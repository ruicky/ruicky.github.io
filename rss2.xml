<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ruicky&#39;s Blog</title>
    <link>https://ruicky.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>记录生活，记录工作</description>
    <pubDate>Tue, 16 Nov 2021 10:20:39 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>使用优盘安装苹果系统</title>
      <link>https://ruicky.github.io/2021/11/16/install-mac/</link>
      <guid>https://ruicky.github.io/2021/11/16/install-mac/</guid>
      <pubDate>Tue, 16 Nov 2021 06:29:25 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/11/16/install-mac/0.jpeg&quot; alt=&quot;header&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/11/16/install-mac/0.jpeg" alt="header"><br><a id="more"></a></p><h1 id="使用优盘安装苹果系统"><a href="#使用优盘安装苹果系统" class="headerlink" title="使用优盘安装苹果系统"></a>使用优盘安装苹果系统</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>同事新领取的 MacBook Pro，需要格式化重新安装新系统，让我帮忙处理下。之前查过资料，为了做个记录，于是有了本文。本文以 <strong>MacOS Catalina</strong> 版本为例。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>MacBook 或者 Mac mini或 IMac 机器一台</li><li>16G 优盘一个</li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol><li>下载系统<ul><li>打开 <a href="https://apps.apple.com/cn/app/macos-catalina/id1466841314?mt=12" target="_blank" rel="noopener">MacOS Catalina</a>在 APP Store 中下载。这些内容会作为名为“安装 MacOS [版本名称]”的 App 下载到您的“应用程序”文件夹。</li></ul></li><li>制作引导盘<ul><li>格式化 U 盘<ul><li>插入你的  U 盘，然后在「应用程序」-&gt;「实用工具」里面找到并打开「磁盘工具」，或者直接用 Spotlight  搜索 “磁盘工具” 打开，如下图。</li><li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/11/16/install-mac/format-usb-flash-drive.jpeg" alt="format-usb-flash-drive"></li><li>右边顶部选择 2 -「分区」，然后在 3 -「分区布局」选择「1个分区」</li><li>在分区信息中的 4 -「名称」输入「Sierra」 (由于后面的命令中会用到此名称，如果你要修改成其他(英文)，请务必对应修改后面的命令)</li><li>在「格式」中选择 5 -「Mac OS 扩展 (日志式)」</li><li>这时，先别急着点“应用”，还要先在 6 -「选项」里面，如下图</li><li>选择「GUID 分区表」，然后点击「好」</li><li>最后再点「应用」开始对 U 盘进行格式化 </li></ul></li><li>打开终端执行<ul><li><code>sudo /Applications/Install\ macOS\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</code> </li><li>这些命令假设安装器位于您的“应用程序”文件夹中，并且“MyVolume”是您所使用的 USB 闪存驱动器或其他宗卷的名称。如果不是这个名称，请将这些命令中的 MyVolume 替换为您的宗卷名称。</li><li>注意替换 <code>MyVolume</code> 我这里就是  <code>/Volumes/Catalina</code> 这个名字是你上面优盘格式化的时候起的名字</li><li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/11/16/install-mac/iterm2.png" alt="iterm2"></li></ul></li></ul></li><li>安装系统<ul><li>需要安装的机器上 插上优盘</li><li>将 Mac 开机或重新启动后，立即按住 Option (Alt) ⌥ 键。</li><li>当您看到显示可引导宗卷的黑屏时，松开 Option 键。</li><li>选择包含可引导安装器的宗卷。然后点按向上箭头或按下 Return 键。 </li><li>根据提示选取您的语言。</li><li>从“实用工具”窗口中选择“安装 macOS”（或“安装 OS X”），然后点按“继续”，并按照屏幕上的说明进行操作。</li></ul></li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>在安装过程中出现：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">安装macOS Catalina 应用程序副本已损坏，不能用来安装macOS</span><br></pre></td></tr></table></figure></p><p><strong>原因是：</strong><br>这个镜像的“安装有效期”过期了</p><p><strong>解决办法如下：</strong></p><ol><li>在安装macOS界面中，断开wifi和拔掉网线，如果没有网络就不用这一步。</li><li>点击顶部菜单栏的实用工具—-终端，输入：date 101112132019，然后敲下回车。注意date后面有个空格。</li><li>点击【终端】—【退出终端】</li><li>重新点击【安装macOS】就可以了</li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>如果下载其他的版本的Mac 系统，方法一样只是命令不一致，具体的 相关命令可在官网中找到。</p><p><a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="noopener">如何创建可引导的 MacOS 安装器</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写完以后发现自己以前写过一篇类似的文章，这里做个关联吧！<br><a href="https://ruicky.github.io/2017/03/29/install-mac-os/">U盘 安装 MacOS Sierra</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="noopener">如何创建可引导的 MacOS 安装器</a><br><a href="https://blog.51cto.com/hackedu/3407508" target="_blank" rel="noopener">制作 MacOS Sierra U盘USB启动安装盘方法教程 (亲测)</a><br><a href="https://www.jianshu.com/p/66eb43dfcbef" target="_blank" rel="noopener">MacOS 10.15 Catalina安装提示程序副本损坏，黑苹果教程</a></p></blockquote>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2021/11/16/install-mac/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【Life】批量下载网易云音乐歌单</title>
      <link>https://ruicky.github.io/2021/10/19/music-down/</link>
      <guid>https://ruicky.github.io/2021/10/19/music-down/</guid>
      <pubDate>Tue, 19 Oct 2021 01:45:41 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/10/19/music-down/0.png&quot; alt=&quot;img&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/10/19/music-down/0.png" alt="img"><br><a id="more"></a></p><h1 id="【Life】批量下载网易云音乐歌单"><a href="#【Life】批量下载网易云音乐歌单" class="headerlink" title="【Life】批量下载网易云音乐歌单"></a>【Life】批量下载网易云音乐歌单</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在刷网页的时候，找到了一个好网易云音乐的歌单，想放在车上听，就得下载下来，用官网自带的播放器还得下载播放器，所以就找找看有没有哪个小伙伴分析好的下载脚本。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><ul><li>Python3 (必须)</li><li>Mac(我本身是 mac机器，win 的不知道有什么不可知问题，这里只是阐述我的硬件)</li><li>iTerm2 (也可以是系统自带的终端)</li></ul><h4 id="开整"><a href="#开整" class="headerlink" title="开整"></a>开整</h4><p>主要找到的是这位大佬的脚本， <a href="https://github.com/codezjx/netease-cloud-music-dl" target="_blank" rel="noopener">网易云音乐下载器</a>。使用方法也很简单：</p><ol><li><p>首先下载源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/codezjx/netease-cloud-music-dl.git</span><br></pre></td></tr></table></figure></li><li><p>进入根目录，然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd netease-cloud-music-dl &amp;&amp; python3 setup.py install</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ncm -h</span><br><span class="line">usage: ncm [-h] [-s song_id] [-ss song_ids [song_ids ...]] [-hot artist_id]</span><br><span class="line">           [-a album_id] [-p playlist_id]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -s song_id            Download a song by song_id</span><br><span class="line">  -ss song_ids [song_ids ...]</span><br><span class="line">                        Download a song list, song_id split by space</span><br><span class="line">  -hot artist_id        Download an artist hot 50 songs by artist_id</span><br><span class="line">  -a album_id           Download an album all songs by album_id</span><br><span class="line">  -p playlist_id        Download a playlist all songs by playlist_id</span><br></pre></td></tr></table></figure></li></ol><p>例如，我要下载这个歌单  <a href="https://music.163.com/#/playlist?id=7023343185" target="_blank" rel="noopener">https://music.163.com/#/playlist?id=7023343185</a> ，只需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncm -p 7023343185</span><br></pre></td></tr></table></figure></p><p>下载存放的目录在 <code>/Users/yourUserName/.ncm/download</code> 其中<strong>yourUserName</strong>是你的用户名，如我的就在<code>/Users/ruicky/.ncm/download</code>。<br>这个是可以配置的，配置文件在 <code>/Users/ruicky/.ncm/ncm.ini</code></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/10/19/music-down/1.png" alt="result"><br>下载的音乐有专辑封面，记录歌手名、音乐标题、专辑名等元数据，自动写入了metadata容器。非常的 nice。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本来，很简单的东西，不想花时间篇幅写下来，但是有些东西，我觉得如果能帮到大家，就尽量积累下来。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://github.com/codezjx/netease-cloud-music-dl" target="_blank" rel="noopener">网易云音乐下载器</a></p></blockquote>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2021/10/19/music-down/#disqus_thread</comments>
    </item>
    
    <item>
      <title>解决微信 JS-SDK 在 IOS 报错 config: Invalid signature</title>
      <link>https://ruicky.github.io/2021/09/30/wx-js-sdk/</link>
      <guid>https://ruicky.github.io/2021/09/30/wx-js-sdk/</guid>
      <pubDate>Thu, 30 Sep 2021 06:09:15 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/30/wx-js-sdk/0.png&quot; alt=&quot;header&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/30/wx-js-sdk/0.png" alt="header"><br><a id="more"></a></p><h1 id="解决微信-JS-SDK-在-IOS-报错-config-Invalid-signature"><a href="#解决微信-JS-SDK-在-IOS-报错-config-Invalid-signature" class="headerlink" title="解决微信 JS-SDK 在 IOS 报错 config: Invalid signature"></a>解决微信 JS-SDK 在 IOS 报错 config: Invalid signature</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一个 ReactJs 的项目中使用到了，微信 JS-SDK 的一些方法，在IOS 的机型上页面加载的时候报错  <code>config: Invalid signature</code>，但是在安卓上却没有复现。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>先说下我的一些背景条件：</p><ul><li>引入的 js 文件 url 为：<code>https://res.wx.qq.com/open/js/jweixin-1.4.0.js</code></li></ul><p>报错发生的地方在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.error(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.errMsg)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根据官网的第常见错误排查，发现跟我后台生成的签名一致，排除了签名算法的问题。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/30/wx-js-sdk/error-fix.png" alt="error-fix"></p><p>经过查找后，发现应该是 spa 页面的缘故，在 IOS 页面中传递给微信端验证的 url 参数是第一次进入的页面，如果过程中你有 push 路由的操作，是不会进行更改的，不知道是微信内核浏览器的问题，还是 JS-SDK 本身的问题了。</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>解决思路很简单，如果是页面经过多次跳转的，则选择第一次页面加载页面的地方进行 url 存储，然后在最终页加载微信 config 的时候，进行传参。</p><p>Page A Load:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.entryUrl === <span class="string">'undefined'</span> || <span class="built_in">window</span>.entryUrl === <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="built_in">window</span>.entryUrl = location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>End Page weixin Config :<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isIOS = <span class="regexp">/iPad|iPhone|iPod/</span>.test(navigator.platform)</span><br><span class="line">|| (navigator.platform === <span class="string">'MacIntel'</span> &amp;&amp; navigator.maxTouchPoints &gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isIOS ? <span class="built_in">window</span>.entryUrl : location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照上述方法改造后，发现确实在微信端起作用了，但是同时在企业微信中却不能工作，所以如果你有在企业微信中打开的需要，则需要排除在企业微信中使用自己注入的 url，应该使用当前 url，改造如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isIOS = <span class="regexp">/iPad|iPhone|iPod/</span>.test(navigator.platform)</span><br><span class="line">|| (navigator.platform === <span class="string">'MacIntel'</span> &amp;&amp; navigator.maxTouchPoints &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> isWeCom = <span class="regexp">/wxwork/i</span>.test(<span class="built_in">window</span>.navigator.userAgent); <span class="comment">// 是否企业微信</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isIOS &amp;&amp; !isWeCom ? <span class="built_in">window</span>.entryUrl : location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，在企业微信跟微信中都可以正常工作，希望官方赶紧把这个 bug 修复一下吧，本文写于 <code>2021-09-30 14:04:48</code> 如果后续官方修复，请以官方为主。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote><p><a href="https://stackoverflow.com/questions/9038625/detect-if-device-is-ios" target="_blank" rel="noopener">Detect if device is iOS</a><br><a href="https://zhuanlan.zhihu.com/p/32227843" target="_blank" rel="noopener">关于微信JSSDK中遇到的“invalid signature”的天坑</a><br><a href="https://work.weixin.qq.com/api/doc/90000/90136/90509" target="_blank" rel="noopener">企业微信 API-常见错误及解决方法</a></p></blockquote>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2021/09/30/wx-js-sdk/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React 在 GitLab 中自动化</title>
      <link>https://ruicky.github.io/2021/09/28/gitlab-ci/</link>
      <guid>https://ruicky.github.io/2021/09/28/gitlab-ci/</guid>
      <pubDate>Tue, 28 Sep 2021 08:45:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/0.png&quot; alt=&quot;header&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/0.png" alt="header"><br><a id="more"></a></p><h1 id="React-在-GitLab-中自动化"><a href="#React-在-GitLab-中自动化" class="headerlink" title="React 在 GitLab 中自动化"></a>React 在 GitLab 中自动化</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目使用自建的  GitLab 进行托管，该项目为 React 前端项目，想用现有的条件下实现，自动化。包含<strong>构建，部署，版本升级</strong>。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>使用 GitLab CI/CD 实现自动化构建并部署到指定服务器(仅 <code>dev</code> 分支)</li><li>master 分支合并代码，实现自动升级版本号以及相关 release 产出跟 生成 CHANGELOG</li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>使用 GitLab 的自动化也就是 CI/CD 功能，主要是有个容器(GItLab Runner)去做相关的操作，使用 node 镜像去构建，并用 ssh 的连接服务器方式去 scp 或者 rsync，同步你的代码到目标服务器。</p><p>版本升级跟其他相关操作，这里使用了一个 npm 的第三方包 <code>release-it</code>。</p><h4 id="release-it"><a href="#release-it" class="headerlink" title="release-it"></a>release-it</h4><p><a href="https://github.com/release-it/release-it" target="_blank" rel="noopener">Release It!</a> 🚀 Automate versioning and package publishing.<br> 直译过来就是”自动化版本控制和包发布“。 我们可以用这个工具来进行版本发布。包括在发布时我们需要做的以下的事，都可以用这个包进行配置。</p><ul><li>升级版本 (修改 package.json 的 version 字段)</li><li>打 tag 标签</li><li>生成 changelog 日志</li><li>产生 release 文件包</li><li>发布到 npm</li><li>GitHub 或 GitLab CI/CD 的使用</li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h4 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h4><ul><li>测试服务器: centos 7</li></ul><h4 id="部署-GitLab-Runner"><a href="#部署-GitLab-Runner" class="headerlink" title="部署 GitLab Runner"></a>部署 GitLab Runner</h4><h5 id="1-使用-Docker-安装-GitLab-Runner"><a href="#1-使用-Docker-安装-GitLab-Runner" class="headerlink" title="1. 使用 Docker 安装 GitLab Runner"></a>1. 使用 Docker 安装 GitLab Runner</h5><h6 id="1-1-安装-Docker-已有的可跳过"><a href="#1-1-安装-Docker-已有的可跳过" class="headerlink" title="1.1 安装 Docker,已有的可跳过"></a>1.1 安装 Docker,已有的可跳过</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用镜像地址安装</span><br><span class="line"><span class="meta">$</span> sudo yum install -y yum-utils</span><br><span class="line"><span class="meta">$</span> sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">$</span> sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span> 启动服务</span><br><span class="line"><span class="meta">$</span> sudo systemctl start docker</span><br><span class="line"><span class="meta">#</span> 开机自启</span><br><span class="line"><span class="meta">$</span> systemctl enable docker</span><br><span class="line"><span class="meta">#</span> 运行 hello-world 镜像</span><br><span class="line"><span class="meta">$</span> sudo docker run hello-world</span><br></pre></td></tr></table></figure><h6 id="1-2-安装-GitLab-Runner-镜像"><a href="#1-2-安装-GitLab-Runner-镜像" class="headerlink" title="1.2 安装 GitLab Runner 镜像"></a>1.2 安装 GitLab Runner 镜像</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -d --name gitlab-runner --restart always \</span><br><span class="line">     -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">     -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">     gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><h6 id="1-3-注册-runner"><a href="#1-3-注册-runner" class="headerlink" title="1.3 注册 runner"></a>1.3 注册 runner</h6><ul><li><p>需要在以下路径里面找到你的 runner 的 url 跟 token:</p><ul><li>找到需要绑定的项目</li><li>在项目菜单的左侧 Settings –&gt; CI/CD –&gt; Runners</li><li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/gitlab-runner.png" alt="gitlab-runner"></li><li>拷贝其中的 url 跟 token 下面要用到</li></ul></li><li><p>运行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register</span><br></pre></td></tr></table></figure><ul><li>输入你上面拷贝的地址 eg: <a href="http://gitlab.xxx.com.cn/" target="_blank" rel="noopener">http://gitlab.xxx.com.cn/</a></li><li>输入 token eg: xxxxx</li><li>输入描述 eg: dev_runner</li><li>输入标签 eg: docker_node</li><li>选择执行者选择 docker</li></ul></li></ul><h4 id="release-it-配置"><a href="#release-it-配置" class="headerlink" title="release-it 配置"></a>release-it 配置</h4><p>在项目的根目录创建文件 <code>.release-it.json</code>。用来配置 release-it 相关。示例文件如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"git"</span>: &#123;</span><br><span class="line">    "commit": true, # 开启 git</span><br><span class="line">    "tagName": "v$&#123;version&#125;", # 打 tag 的名称模板</span><br><span class="line">    "commitMessage": "Release $&#123;version&#125;",  # git 提交消息模板</span><br><span class="line">    "pushArgs": ["-o ci.skip", "--follow-tags"], # Git 提交 release 相关的时候不触发 ci 构建</span><br><span class="line">    "requireUpstream": false</span><br><span class="line">  &#125;,</span><br><span class="line">  "hooks": &#123;</span><br><span class="line">    "before:init": "git fetch --prune --prune-tags origin"  # 在之前拉一下最新的 tag</span><br><span class="line">  &#125;,</span><br><span class="line">  "npm": &#123;</span><br><span class="line">    "publish": false # npm 部署关闭</span><br><span class="line">  &#125;,</span><br><span class="line">  "gitlab": &#123;</span><br><span class="line">    "release": true, # GitLab 部署开启</span><br><span class="line">    "tokenHeader": "PRIVATE-TOKEN", # 调用 API 接口 header 中的 toekn 头</span><br><span class="line">    "origin": "http://gitlab.xxx.com", # GitLab 地址</span><br><span class="line">    "assets": ["dist/*.zip"] # 上传 release 页面的文件</span><br><span class="line">  &#125;,</span><br><span class="line">  "plugins": &#123;</span><br><span class="line">    # 由于本项目使用 conventional 风格 git日志，该插件可以生成 changlog 文件</span><br><span class="line">    "@release-it/conventional-changelog": &#123;</span><br><span class="line">      "infile": "CHANGELOG.md",</span><br><span class="line">      "preset": &#123;</span><br><span class="line">        "name": "conventionalcommits",</span><br><span class="line">        "header": "# 📋 更新历史 \n\n",</span><br><span class="line">        "types": [</span><br><span class="line">          &#123; "type": "feat", "section": "✨ Features | 新功能" &#125;,</span><br><span class="line">          &#123; "type": "fix", "section": "🐛 Bug Fixes | Bug 修复" &#125;,</span><br><span class="line">          &#123; "type": "perf", "section": "⚡ Performance Improvements | 性能优化" &#125;,</span><br><span class="line">          &#123; "type": "revert", "section": "⏪ Reverts | 回退" &#125;,</span><br><span class="line">          &#123; "type": "chore", "section": "📦 Chores | 其他更新" &#125;,</span><br><span class="line">          &#123; "type": "docs", "section": "📝 Documentation | 文档" &#125;,</span><br><span class="line">          &#123; "type": "style", "section": "💄 Styles | 风格", "hidden": true &#125;,</span><br><span class="line">          &#123; "type": "refactor", "section": "♻ Code Refactoring | 代码重构" &#125;,</span><br><span class="line">          &#123; "type": "test", "section": "✅ Tests | 测试" &#125;,</span><br><span class="line">          &#123; "type": "build", "section": "👷‍ Build System | 构建" &#125;,</span><br><span class="line">          &#123; <span class="attr">"type"</span>: <span class="string">"ci"</span>, <span class="attr">"section"</span>: <span class="string">"🔧 Continuous Integration | CI 配置"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="GitLab-CI-配置"><a href="#GitLab-CI-配置" class="headerlink" title="GitLab CI 配置"></a>GitLab CI 配置</h4><h5 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h5><h6 id="2-1-ssh-秘钥串"><a href="#2-1-ssh-秘钥串" class="headerlink" title="2.1 ssh 秘钥串"></a>2.1 ssh 秘钥串</h6><p>在需要部署的服务器上，使用如下命令打印秘钥:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 打印公钥</span><br><span class="line"><span class="meta">$</span> cat ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="meta">#</span> 打印私钥</span><br><span class="line"><span class="meta">$</span> cat ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><p>如果提示没有该文件，则需要手动生成一份。执行以下命令，一直回车，直到结束。再重复上步骤，将公司要里的内容复制到本地备忘录中，下面要用。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 生成秘钥对</span><br><span class="line"><span class="meta">$</span> ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p><h6 id="2-2-GlitLab-Token"><a href="#2-2-GlitLab-Token" class="headerlink" title="2.2 GlitLab Token"></a>2.2 GlitLab Token</h6><p>这个是 release-it 在部署提交 git 的时候需要用到的权限。</p><ul><li>在 GitLab 中，右上角选择自己头像，选择 preferences。</li><li>Access Tokens 下，名字随意，Scopes 全选，点击 <code>Create personal access token</code><ul><li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/gitlab-token.png" alt="gitlab-token.png"></li></ul></li><li>将生成好的 token 复制出，备用<ul><li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/gitlab-token-2.png" alt="gitlab-token-2.png"><h6 id="2-3-将私钥放到到-GitLab-中"><a href="#2-3-将私钥放到到-GitLab-中" class="headerlink" title="2.3 将私钥放到到 GitLab 中"></a>2.3 将私钥放到到 GitLab 中</h6>为了下载代码，可将私钥放到 GItLab 中，操作方法如下：</li></ul></li><li>打开 GItLab 地址</li><li>点击右上角头像，选择 <code>Preferences</code></li><li>点击左侧 <code>SSH Keys</code>，将 2.1中生成的公钥填到框里，点击 <code>Add</code></li><li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/gitlab-ssh.png" alt="gitlab-ssh"></li></ul><h5 id="3-CI-配置"><a href="#3-CI-配置" class="headerlink" title="3. CI 配置"></a>3. CI 配置</h5><h6 id="3-1-配置-CI-变量"><a href="#3-1-配置-CI-变量" class="headerlink" title="3.1 配置 CI 变量"></a>3.1 配置 CI 变量</h6><p>在 CI 运行的时候有些变量，处于安全考虑，不会明文显示，这里可以把相关变量放到 CI 的 Variables 中，CI 运行的时候，可以直接读取。</p><ul><li>打开项目的 GitLab 地址，Settings –&gt; CI/CD –&gt; Variables<ul><li>添加 <code>GITLAB_TOKEN</code> 跟 <code>SSH_PRIVATE_KEY</code>两个变量。 其中 <code>GITLAB_TOKEN</code> 是 2.1 中生成的 token； <code>SSH_PRIVATE_KEY</code> 则是 2.1 中的私钥.</li><li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/gitlab-ci-variable.png" alt="gitlab-ci-variable"><h6 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h6>在需要构建的项目根目录中创建 <code>.gitlab-ci.yml</code> 文件。文件示例如下:<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">SOURCE_PATH:</span> <span class="string">'dist/notice'</span> <span class="comment"># 替换成自己的，需要拷贝的文件夹地址</span></span><br><span class="line">  <span class="attr">REMOTE_ADDRESS:</span> <span class="string">'root@172.177.217.117:/root/webapp/'</span> <span class="comment"># 替换成自己的，拷贝目标的远程的地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apt-get</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">zip</span> <span class="string">unzip</span> <span class="string">git</span> <span class="string">openssh-client</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">eval</span> <span class="string">`ssh-agent</span> <span class="string">-s`</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"$&#123;SSH_PRIVATE_KEY&#125;"</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">'\r'</span> <span class="string">|</span> <span class="string">ssh-add</span> <span class="bullet">-</span> <span class="string">&gt;</span> <span class="string">/dev/null</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'[[ -f /.dockerenv ]] &amp;&amp; echo -e "Host *\n\tStrictHostKeyChecking no\n\n" &gt; ~/.ssh/config'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">checkout</span> <span class="string">$CI_BUILD_REF_NAME</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">remote</span> <span class="string">set-url</span> <span class="string">origin</span> <span class="string">"git@gitlab.xxx.com:$CI_PROJECT_PATH.git"</span> <span class="comment">#  替换成自己的 GitLab 地址</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"$&#123;CI_USERNAME&#125;"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"$&#123;CI_EMAIL&#125;"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">origin</span> <span class="string">$CI_BUILD_REF_NAME</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker_node</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Start building App"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">config</span> <span class="string">list</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Build successfully!"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zip</span> <span class="string">-q</span> <span class="string">-r</span> <span class="string">./dist/notice.zip</span> <span class="string">./dist/notice</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_development:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker_node</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Deploying to dev server"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">scp</span> <span class="string">-r</span> <span class="string">$SOURCE_PATH</span> <span class="string">$REMOTE_ADDRESS</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Deployed"</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">production</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">release:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">release</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker_node</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEBUG="release-it:*"</span> <span class="string">GITLAB_TOKEN="$GITLAB_TOKEN"</span> <span class="string">yarn</span> <span class="string">run</span> <span class="string">release</span> <span class="string">--ci</span> <span class="string">--verbose</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="产出"><a href="#产出" class="headerlink" title="产出"></a>产出</h4><ol><li>package.json 版本变化</li><li>Tags 打标签</li><li>Releases 打包后的二进制文件</li><li>CHANGELOG.md 生成的变化日志</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其中的每个点来说都不难，但是整合跟调试的过程中，有很多错误，刚开始只有个简单的报错，根本不知道为什么会这样，这里学会了使用 DBUG 日志，能够帮助你来定位错误，同时有的文档里面没有描写的，看源码的调用使用也能够解决 一部分问题。在 issues 中看别人提的问题，也能解决一些问题，最重要的是看官方给的文档，能够解决更多的问题。</p><p>总而言之，遇到问题，想办法去解决，但是需要精准的定位问题，才可以。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><p><a href="https://docs.docker.com/engine/install/centos/#install-using-the-repository" target="_blank" rel="noopener">Install Docker Engine on CentOS</a><br><a href="https://docs.gitlab.com/runner/register/#docker" target="_blank" rel="noopener">Registering runners</a><br><a href="https://docs.gitlab.com/ee/user/project/push_options.html#push-options-for-gitlab-cicd" target="_blank" rel="noopener">push 时跳过 ci 执行</a><br><a href="https://ruleoftech.com/2020/automate-versioning-and-changelog-with-release-it-on-gitlab-ci-cd" target="_blank" rel="noopener">Automate versioning and changelog with release-it on GitLab CI/CD</a><br><a href="https://docs.gitlab.com/runner/install/docker.html" target="_blank" rel="noopener">Run GitLab Runner in a container </a></p></blockquote>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2021/09/28/gitlab-ci/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mac OS 修改短密码</title>
      <link>https://ruicky.github.io/2021/09/22/mac-password/</link>
      <guid>https://ruicky.github.io/2021/09/22/mac-password/</guid>
      <pubDate>Wed, 22 Sep 2021 07:07:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/22/mac-password/0.png&quot; alt=&quot;img&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/22/mac-password/0.png" alt="img"><br><a id="more"></a></p><h1 id="Mac-OS-修改短密码"><a href="#Mac-OS-修改短密码" class="headerlink" title="Mac OS 修改短密码"></a>Mac OS 修改短密码</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从 Mac OS 10.14 以后，系统强制默认最低 4 位密码，如果想修改一个短密码，通过正常的操作界面，无法进行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your password did not meet the requirements specified by your server administrator. You may need to use different characters, numbers, or symbols in your password. If you’re not sure how you should change your password, contact your system administrator before trying again.</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>打开系统自带的终端</li><li>在终端中输入  <code>pwpolicy -clearaccountpolicies</code><br>意思是 允许设置任意密码</li><li>修改密码<ul><li>在 Mac 上，“系统偏好设置”，然后点按“用户与群组”</li><li>点按“更改密码”。</li><li>在“旧密码”栏输入您的当前密码。</li><li>在“新密码”栏中输入新密码，然后在“验证”栏中再次输入该密码。</li><li>输入能帮助您记忆密码的提示。</li><li>点按“更改密码”。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有的时候是很简单的事，但是做过一遍以后仅仅有个印象，不如笔记下来，方便之后查询。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote><p><a href="https://www.cnblogs.com/Summer6/p/12658140.html" target="_blank" rel="noopener">Mac os 10.14以上 取消4位数密码限制 设置成无密码或者任意位数（Mac os 10.15.4）</a><br><a href="https://support.apple.com/zh-cn/guide/mac-help/mchlp1550/mac" target="_blank" rel="noopener">在 Mac 上更改登录密码</a></p></blockquote>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2021/09/22/mac-password/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 rsync 同步 Windows 跟 Mac 之间数据</title>
      <link>https://ruicky.github.io/2021/06/22/win-rsync-mac/</link>
      <guid>https://ruicky.github.io/2021/06/22/win-rsync-mac/</guid>
      <pubDate>Tue, 22 Jun 2021 08:40:01 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/0.png&quot; alt=&quot;0&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/0.png" alt="0"><br><a id="more"></a></p><h1 id="使用-rsync-同步-Windows-跟-Mac-之间数据"><a href="#使用-rsync-同步-Windows-跟-Mac-之间数据" class="headerlink" title="使用 rsync 同步 Windows 跟 Mac 之间数据"></a>使用 rsync 同步 Windows 跟 Mac 之间数据</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  年初趁活动买了腾讯云的服务器，装的是 Windows Server 系统，平时没事跑跑脚本啥的。前两天整了个 QT 下载，就下一些比较费时间的资源，放到云端下载节省时间跟资源。下载完以后，就需要把资源从云端同步到本地。以此为背景，有了本文的折腾。</p><p>环境：</p><ul><li>服务端：Windows Server 2008 R2</li><li>客户端：MacOS 10.15.6</li><li>服务端rsync版本：cwRsyncServer_4.1.0_Installer.exe</li></ul><p>术语说明：<br><code>rsync</code> 是一个常用的 Linux 应用程序，用于文件同步，最大特点是会检查发送方和接收方已有的文件，仅传输有变动的部分。<br><code>cwRsyncServer</code> 是 Windows 下实现 rsync 的方式的服务端。</p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>相关文件 我已经放到百度云，共享。先下载文件：</p><ul><li>链接: <a href="https://pan.baidu.com/s/1LZQPu3J2TDwLLZgmWVyAjQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1LZQPu3J2TDwLLZgmWVyAjQ</a> </li><li>提取码: uvxi </li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="创建-Windows-用户"><a href="#创建-Windows-用户" class="headerlink" title="创建 Windows 用户"></a>创建 Windows 用户</h4><h4 id="安装-Server-程序"><a href="#安装-Server-程序" class="headerlink" title="安装 Server 程序"></a>安装 Server 程序</h4><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/1.png" alt="双击安装"></p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/2.png" alt="选择我同意"></p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/3.png" alt="使用默认路径"></p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/4.png" alt="创建用户"></p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/5.png" alt="关闭"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li>打开目录 <code>C:\Program Files(x86)\ICW</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/6.png" alt="在文件夹下打开"></li><li>找到 rsyncd.conf  修改如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">use chroot = false</span><br><span class="line">strict modes = false</span><br><span class="line">uid = 0</span><br><span class="line">gid = 0</span><br><span class="line">log file = rsyncd.log</span><br><span class="line">[movie]</span><br><span class="line">path = /cygdrive/d/data/movie/</span><br><span class="line">ignore errors</span><br><span class="line">read only = false</span><br><span class="line">transfer logging = yes</span><br><span class="line">auth users = ruicky</span><br><span class="line">secrets file = etc/rsync.password</span><br><span class="line">hosts allow = *</span><br></pre></td></tr></table></figure></li></ol><p>重要参数说明</p><ul><li><code>uid = 0</code>: 0代表不限定用户</li><li><code>path = /cygdrive/d/data/movie/</code>: 和linux不同的是windows的备份目录前面都要加/cygdrive</li><li><code>auth users = ruicky</code>: rsync的虚拟用户,上面创建的用户</li><li><code>secrets file = etc/rsync.password</code>: rsync的密码文件路径</li><li><code>hosts allow = *</code>:  所有主机均可访问</li></ul><p><strong>注意：</strong> <code>path</code>路径修改为自己要同步的文件夹地址。</p><ol start="3"><li>在 <code>C:\Program Files(x86)\ICW\etc</code> 目录下创建 <code>rsync.password</code> 文件，内容为：<code>ruicky:A123456a</code>。（说明：该文件存放的认证信息。格式为 用户名:密码）</li><li>在 Windows 的用户管理中，将刚创建的用户 <code>ruicky</code>， 设置为管理员角色</li><li>在 你将要共享的文件夹中，右键，安全选项卡中，将刚创建的用户 <code>ruicky</code> 增加权限，并修改为“全部控制”。</li></ol><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ol><li>在 windows 的 <code>控制面版</code> 找到 <code>管理工具</code>，打开后，找到并打开 <code>服务</code>。这一步有困难的可参考<a href="https://jingyan.baidu.com/article/fc07f989a1ead912fee51948.html" target="_blank" rel="noopener">Windows Server如何打开本地服务(services)</a></li><li>修改“启动类型”为 “自动”后， 启动服务。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/7.png" alt="服务启动"></li><li>检查端口 。打开 Windows 的命令行窗户，输入：<code>netstat -ano | findstr 873</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/8.png" alt="端口"></li><li>[可选] 如果是云服务器，需要在你的云端控制台，将 873 端口放行。</li></ol><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p>可以使用 brew 安装依赖包<code>brew install rsync</code></p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在你认为适合的位置创建 <code>rsync.password</code>文件来保存服务端的密码，内容为 <code>Aa123456a</code>(如果上方你修改，这边记得同步修改).</p><h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><p>打开命令行，运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rsync -avztPr --password-file=/Users/ruicky/Downloads/rsync.password ruicky@11.22.33.44::movie /Users/ruicky/Downloads/movie</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li>rsync 命令<ul><li><code>-a</code>：归档模式，表示递归传输并保持文件属性</li><li><code>-v</code>：显示rsync过程中详细信息</li><li><code>-z</code>：传输时进行压缩提高效率</li><li><code>-t</code>：保持mtime属性</li><li><code>-P</code>：显示文件传输的进度信息</li><li><code>-r</code>：递归到目录中去</li><li><code>--password-file</code>：daemon模式时的密码文件，可以从中读取密码实现非交互式</li></ul></li><li>格式<br><code>rsync 用户名@你服务器IP地址::配置文件中的同步节点  本地同步路径</code></li></ul><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol><li>错误一<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windows auth failed on module movie from unknown missing secret for user</span><br></pre></td></tr></table></figure></li></ol><p><strong>报错原因：服务端的密码文件 <code>etc/rsync.password</code>权限不对，600改为了644</strong></p><ol start="2"><li>错误二<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password file must not be other-accessible continuing without password file</span><br></pre></td></tr></table></figure></li></ol><p><strong>报错原因：服务端的密码文件 <code>etc/rsync.password</code> 路径是否正确</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.csdn.net/u010637366/article/details/108450143" target="_blank" rel="noopener">rsync实现windows和windows之间的数据同步</a><br><a href="https://blog.csdn.net/yunqishequ1/article/details/73844369" target="_blank" rel="noopener">rsync常见问题及解决办法</a><br><a href="http://www.ruanyifeng.com/blog/2020/08/rsync.html" target="_blank" rel="noopener">rsync 用法教程</a><br><a href="https://www.cnblogs.com/yu15/p/11175144.html" target="_blank" rel="noopener">配置Windows server 用户和组权限实验详解</a><br><a href="https://blog.csdn.net/qq_32706349/article/details/91451053" target="_blank" rel="noopener">rsync(一)：基本命令和用法</a><br><a href="https://bayton.org/2018/07/how-to-update-rsync-on-mac-os-high-sierra/" target="_blank" rel="noopener">How to update Rsync on Mac OS Mojave and High Sierra</a></p></blockquote>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2021/06/22/win-rsync-mac/#disqus_thread</comments>
    </item>
    
    <item>
      <title>解决苹果内核加载网页慢的问题</title>
      <link>https://ruicky.github.io/2020/11/09/wk-webview/</link>
      <guid>https://ruicky.github.io/2020/11/09/wk-webview/</guid>
      <pubDate>Mon, 09 Nov 2020 08:49:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/11/09/wk-webview/0.png&quot; alt=&quot;0&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/11/09/wk-webview/0.png" alt="0"><br><a id="more"></a></p><h1 id="解决苹果内核加载网页慢的问题"><a href="#解决苹果内核加载网页慢的问题" class="headerlink" title="解决苹果内核加载网页慢的问题"></a>解决苹果内核加载网页慢的问题</h1><h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><p>  一个H5的页面，里面嵌套在 <code>IOS</code> 中，有它的 <code>wkwebview</code> 进行渲染，这是背景。表现出的问题是，由 <code>IOS</code> 发起请求到最终用户看到页面需要等待特别长的时间，大概6秒到15秒之间。需要排查并解决这个显示慢的问题。</p><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><ol><li><code>IOS</code> 端往浏览器中写入 <code>Cookie</code>。</li><li>浏览器根据 <code>url</code> 地址去请求 <code>Oauth2.0</code> 登录。</li><li>浏览器根据返回的 <code>code</code> 跳转 登录。</li><li>浏览器端登录后跳转到应用首页。</li></ol><p>PS: 其中 <strong>浏览器端</strong> 指的是 <code>IOS</code> 中的 <code>wkwebview</code></p><h2 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h2><ol><li>是否是 <code>IOS</code> 本身的 <code>wkwebview</code> 的问题？</li><li>为什么之前使用 <code>IOS</code> 的 <code>uiwebview</code> 没有这个问题？</li><li>是否是 <code>Oauth2.0</code> 业务的问题？</li><li>是否是应用本身的问题？ </li><li>是否是网络问题？</li></ol><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><ol><li><code>wkwebview</code> 访问其他网页不管是https 或者 http 的都能正常访问 证明不是它本身或者配置问题。</li><li>为什么 <code>uiwebview</code> 没有这个问题？<br>经过试验，发现 uiwebview 本身在访问现有业务确实没有这个问题，当时也不清楚为什么它可以正常访问，就让 <code>IOS</code> 开发切换成这个不就好了。结果反馈说用这个不能上架。原来 <code>iOS13</code> 开始苹果将 <code>UIWebview</code> 列为过期 <code>API</code>。<strong>2020年4月起App Store将不再接受使用UIWebView的新App上架、2020年12月起将不再接受使用UIWebView的App更新。</strong></li><li>Oauth2.0 业务在安卓端都能正常访问，故排除。</li><li>是否是应用本身的问题? 同上。</li><li>是否上网络问题？<br>带着这个问题，去网上按照 <code>ios 苹果 wkwebview 超时</code>，发现大多说是 <code>wkwebview</code> 302 的坑以及存储分离 balaba的，按照给出的答案试了试 都没有解决问题。</li></ol><p>在快要放弃的时候，之前的一个<code>IOS</code>开发大拿说肯定是<code>https</code>的问题你们查查。<br>结果就找到了这篇文章</p><ol><li><a href="https://blog.csdn.net/lovelyelfpop/article/details/107851489" target="_blank" rel="noopener">ios 访问 Let‘s encrypt 免费证书的 https 很慢</a></li><li><a href="https://www.v2ex.com/t/665734" target="_blank" rel="noopener">部署 Let’s Encrypt 的站点国内首次打开很慢？那是因为 OSCP 域名被墙了</a></li><li><a href="https://leanote.zzzmh.cn/blog/post/admin/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A6%96%E6%AC%A1%E8%AF%B7%E6%B1%82%E6%85%A2-pending-10%E7%A7%92%EF%BC%8CSafari%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E6%85%A2%E7%AD%89%E9%97%AE%E9%A2%98%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%98%AFHTTPS%E8%AF%81%E4%B9%A6%E7%9A%84%E9%94%85" target="_blank" rel="noopener">微信小程序首次请求慢 Safari浏览器访问慢 pending 10秒 可能是HTTPS证书的锅</a></li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>看到这里，就会发现是苹果内核安全机制导致的，每次都需要去验证 https的证书，如果不巧，你用的免费的证书，那么他的颁发机构在国外，在有段期间，国内访问都会很慢。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>  找到的原因就解决了，要么更换证书使用国内的颁发的证书，要么在服务器做DNS或者其他优化，来加速访问。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  虽然这次的问题不出在前端应用的本身，而且解决方式非常简洁，但是针对于多端联调以及排查思路有了提高。以后对于网络层次方面的问题也更有经验去定位以及解决问题。</p>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2020/11/09/wk-webview/#disqus_thread</comments>
    </item>
    
    <item>
      <title>NodeJs 中 http-proxy 使用</title>
      <link>https://ruicky.github.io/2020/08/30/node-http-proxy/</link>
      <guid>https://ruicky.github.io/2020/08/30/node-http-proxy/</guid>
      <pubDate>Sun, 30 Aug 2020 06:20:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://source.unsplash.com/random/1400x500&quot; alt=&quot;0&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://source.unsplash.com/random/1400x500" alt="0"><br><a id="more"></a></p><h1 id="NodeJs-中-http-proxy-使用"><a href="#NodeJs-中-http-proxy-使用" class="headerlink" title="NodeJs 中 http-proxy 使用"></a>NodeJs 中 http-proxy 使用</h1><h3 id="http-proxy"><a href="#http-proxy" class="headerlink" title="http-proxy"></a>http-proxy</h3><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p><a href="https://github.com/http-party/node-http-proxy" target="_blank" rel="noopener">官网-GitHub</a><br><code>node-http-proxy</code>是一个 HTTP 可编程的，支持 websockets 的代理库。它适合于实现诸如反向代理和负载平衡器之类的组件。</p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>一般使用在前端静态页，后端是启动一个服务，挂载那个静态页。还有一个提供 api 的服务端。通过 NodeJs 这一层的粘合层来做一点的事，同时需要调用 api 的真实服务，就可以使用代理。</p><p>简而言之就是前端发起请求，NodeJS 层使用代理进行转发，后端服务层处理返回。</p><h5 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h5><p>以 ExpressJs 为例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> httpProxy = <span class="built_in">require</span>(<span class="string">'http-proxy'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> proxy = httpProxy.createProxyServer(&#123;</span><br><span class="line">    target: <span class="string">'http://localhost:5000'</span> + <span class="string">'/api'</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    proxyTimeout: <span class="number">30</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">&#125;);</span><br><span class="line">proxy.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.code !== <span class="string">'ECONNRESET'</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.error(<span class="string">'proxy error'</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.set(<span class="string">'Content-Type'</span>, <span class="string">'application/json; charset=UTF-8'</span>);</span><br><span class="line">    proxy.web(req, res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(app)</span><br><span class="line">server.listen(<span class="number">4000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listen:4000, view http://localhost:4000'</span>)</span><br></pre></td></tr></table></figure><h5 id="高阶"><a href="#高阶" class="headerlink" title="高阶"></a>高阶</h5><p><strong>修改请求</strong><br>在请求接口层之前，追加 headers 。<br>这里有个坑，就是我在 express 中间件中需要获取 body 的值就 需要使用 <code>app.use(express.json())</code>来解析，但是 <code>http-proxy</code>转发代理的时候，解析后的 body 转发不过去，只能在转换回去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modifyProxyReq</span> (<span class="params">proxyReq, req, res</span>) </span>&#123;</span><br><span class="line">  proxyReq.setHeader(<span class="string">'Content-Type'</span>, req.get(<span class="string">'Content-Type'</span>) || <span class="string">'application/json; charset=UTF-8'</span>);</span><br><span class="line">  <span class="keyword">if</span> (!req.body || <span class="built_in">Object</span>.keys(req.body).length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> contentType = proxyReq.getHeader(<span class="string">'Content-Type'</span>);</span><br><span class="line">  <span class="keyword">var</span> bodyData;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (contentType.indexOf(<span class="string">'application/json'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    bodyData = <span class="built_in">JSON</span>.stringify(req.body);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (contentType.indexOf(<span class="string">'application/x-www-form-urlencoded'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    bodyData = querystring.stringify(req.body);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bodyData) &#123;</span><br><span class="line">    proxyReq.setHeader(<span class="string">'Content-Length'</span>, Buffer.byteLength(bodyData));</span><br><span class="line">    proxyReq.write(bodyData);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">proxy.on(<span class="string">'proxyReq'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">proxyReq, req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// modify reqquest body to string</span></span><br><span class="line">  modifyProxyReq(proxyReq, req, res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>修改返回结果</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy.on(<span class="string">'proxyRes'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes,req,res</span>) </span>&#123;</span><br><span class="line">    express.json()(proxyRes, req, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> body = proxyRes.body;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'response body is --&gt;'</span>, body);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>总结</p><p>该组件简单使用来说非常方便，如果有定制需求的话，需要配合监听请求使用。其中遇到 http—&gt;https 代理来说，会报证书错误之类的，配置选项追加 <code>changeOrigin: true</code>来解决问题。</p>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2020/08/30/node-http-proxy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>获取京东 cookie 的正确姿势</title>
      <link>https://ruicky.github.io/2020/07/18/jd-cookie/</link>
      <guid>https://ruicky.github.io/2020/07/18/jd-cookie/</guid>
      <pubDate>Sat, 18 Jul 2020 07:51:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/0.png&quot; alt=&quot;0&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/0.png" alt="0"><br><a id="more"></a></p><h1 id="获取京东-cookie-的正确姿势"><a href="#获取京东-cookie-的正确姿势" class="headerlink" title="获取京东 cookie 的正确姿势"></a>获取京东 cookie 的正确姿势</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前写过一篇文章<a href="https://ruicky.me/2020/06/05/jd-sign/" target="_blank" rel="noopener">京东定时签到-GitHub 实现</a>，比较有多的小伙伴进行安装，实验，反馈很高。其中获取 cookie，这个比较过程，当时写的比较仓储，所以现在单开一篇文章来说明，想要自动化京东签到的可以参考那篇文章。每天四五十豆豆哦，另外，记得给我的GitHub 项目记得给个 star 哦~~</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>chrome 浏览器(谷歌浏览器)</li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol><li>打开 Chrome 浏览器(以下皆简称 Chrome)。</li><li>打开开发者模式，快捷键 Windows 系统为 F12(Mac 为 command+option+i)，或者对当前页面右键，选择其中的“检查”。</li><li>选择手机模式。在打开后点击手机图标的小 icon 进入手机模式,同时勾选’Preserve log’选项。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/手机模式.png" alt="手机模式"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/preserve.png" alt="preserve"></li><li>选择手机型号<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/手机型号.png" alt="手机型号"></li><li>浏览器中输入地址 <code>https://plogin.m.jd.com/login/login</code></li><li>输入相关的账号密码信息，<strong>建议手机号，验证码登录</strong></li><li>登录完成后，会跳转到首页，清空 Network 下的请求。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/清空请求.png" alt="清空请求"></li><li>在请求搜索框搜索 <code>QueryUserInfoM</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/搜索.png" alt="搜索"></li><li>打开该请求，找到 <code>Request Headers</code> 节点下面，复制完成的 cookie<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/复制cookie.png" alt="复制cookie"></li></ol><p><strong>注意：</strong></p><ol><li>必须勾选 <code>Preserve log</code>记录所以日志否则搜索不到</li><li>选择节点为 <code>Request Headers</code>下的 cookie</li><li>复制的时候只需复制 cookie 里的内容。不要复制过多的<strong>其他节点</strong>或者连带 <strong>cookie 本身</strong>。</li><li>复制完后可以粘贴到其他编辑器中进行查看一般都是一行，如果你是多行的话，可能有问题。（PS：小白同学，由于 cookie 本身内容很多，如果你的编辑器设置的自动换行，请注意行号，不要认为换了就是多行哈。）</li><li>如果在过程中发现有的东西没配置，但是已经登录完了，没办法在复现了，咋整？少年，你听说过 Chrome 的无痕模式吗？它可以帮助你。</li></ol><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>经过上面的折腾，相信你肯定会获取到自己心仪的 cookie。有人就要问了，整着麻烦，有必要吗？其实吧，有很多软件或者可一个给你做个 GUI，但是作为爱折腾的人，你要明白怎么来的，才能更好的自己扩展，不是吗？</p>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2020/07/18/jd-cookie/#disqus_thread</comments>
    </item>
    
    <item>
      <title>记录一次 Python 脚本爬虫实录</title>
      <link>https://ruicky.github.io/2020/07/17/python-down-video/</link>
      <guid>https://ruicky.github.io/2020/07/17/python-down-video/</guid>
      <pubDate>Fri, 17 Jul 2020 07:15:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/17/python-down-video/0.png&quot; alt=&quot;header&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/17/python-down-video/0.png" alt="header"><br><a id="more"></a></p><h1 id="记录一次-Python-脚本爬虫实录"><a href="#记录一次-Python-脚本爬虫实录" class="headerlink" title="记录一次 Python 脚本爬虫实录"></a>记录一次 Python 脚本爬虫实录</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前(2018年)，看到人民日报上面有一个特别好的国庆专题，是讲得国内各个省份的一分钟视频跟介绍的，就把那个公账号的地址给记录下来，并整理成了文章–<a href="https://ruicky.me/2019/05/29/china-map/" target="_blank" rel="noopener">这里是中国</a>。最近，因为要用到其中一分钟系列的视频作为素材，想着就用脚本下载下来。<br>刚开始准备用 Chrome 的 snippte 来做的，但是发现，由于有 很多页面跳来跳去的，所以导致很多数据得不到跟获取失败。没办法，只能上大杀器—-爬虫鼻祖 <strong>Python</strong>。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>软件条件：</p><ul><li><a href="https://www.python.org/" target="_blank" rel="noopener">Python3</a></li><li>[you-get][<a href="https://github.com/soimort/you-get]" target="_blank" rel="noopener">https://github.com/soimort/you-get]</a></li><li>[requests][<a href="https://requests.readthedocs.io/en/master/]" target="_blank" rel="noopener">https://requests.readthedocs.io/en/master/]</a></li></ul><p>数据条件:</p><ul><li>之前保存的公众号文章地址</li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="分析页面"><a href="#分析页面" class="headerlink" title="分析页面"></a>分析页面</h3><p>首先分析页面数据，例如打开’<a href="https://mp.weixin.qq.com/s/3JnEJKr9UlgWGdstYsv3hg‘" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/3JnEJKr9UlgWGdstYsv3hg‘</a> 公众号地址。发现其中嵌套了一个 iframe ，里面有个腾讯视频的播放器。点击页面的腾讯视频图标，外跳到腾讯视频中来播放该视频，该视频的真是播放地址为<code>https://v.qq.com/x/page/d0725d6whiw.html</code>。可以看出整个地址的变量应该就是后面的<code>d0725d6whiw</code>.<br>大概思路整理如下：</p><ol><li>使用 Python 脚本打开公众号页面，拿到视频地址</li><li>抓取视频地址并保存</li><li>使用 you-get 工具下载视频</li></ol><h3 id="爬取视频地址"><a href="#爬取视频地址" class="headerlink" title="爬取视频地址"></a>爬取视频地址</h3><p>由于之前已经有获取到每个公众号的地址了，现在这里只需要，通过 <code>requests</code> 包获取到网页内容，记得配置 headers 否则打不开公众号地址，然后通过正则匹配到视频地址的关键串，之后在进行拼接，把所得的结果写入一个文件中。整个流程就完成。</p><p>主要代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def save_file (content):</span><br><span class="line">    with open(&apos;video.txt&apos;, &apos;a&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class="line">        f.write(content+ &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">def get_html (url):</span><br><span class="line">    # url = &apos;https://mp.weixin.qq.com/s/3JnEJKr9UlgWGdstYsv3hg&apos;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &apos;cookie&apos;: &apos;pgv_pvi=6411978752; pgv_pvid=5128749576; RK=RaiYKbaTXh; ptcz=923c6704cdc78e647be2740a43d8264a3dfba2c46c015a188bbca4c1156c4b33; _ga=GA1.2.1273698204.1594176548; rewardsn=; wxtokenkey=777; tvfe_boss_uuid=017df832425d807d; pgv_info=ssid=s1234604434; pgv_si=s9151318016&apos;,</span><br><span class="line">        &apos;user-agent&apos;:&apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    result = requests.get(url,headers=headers)</span><br><span class="line">    return result.text</span><br><span class="line"></span><br><span class="line">def parse_result(html):</span><br><span class="line">    pattern = re.compile(</span><br><span class="line">        &apos;vid=(\w&#123;11&#125;)&apos;,</span><br><span class="line">        re.S)</span><br><span class="line">    # items = re.findall(pattern, html)</span><br><span class="line">    data = re.search(pattern,html)</span><br><span class="line">    print(data.group(1))</span><br><span class="line">    return data.group(1)</span><br><span class="line"></span><br><span class="line">def conect_url (id):</span><br><span class="line">    # https://v.qq.com/x/page/e07415ouyl2.html</span><br><span class="line">    return &apos;https://v.qq.com/x/page/&apos;+ str(id) +&apos;.html&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main ():</span><br><span class="line">    array = [&apos;https://mp.weixin.qq.com/s/3JnEJKr9UlgWGdstYsv3hg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/Tba_AsVUDlh9pwqssugxLA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/fDJWWLc5hNC7TUozqYNNRQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/FXTuwDmPTndO_ispQmwFUA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/QN5sp-6c_t5Voa9Na4hJUg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/ZLJO429hi9A2nBjqKoSDXw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/fsGiEUvWlLG5hTuIXxu9Ew&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/wcnz_v49I9Uu4ZcpOnTywQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/W5CtrpAtlyMMZcdMaUx3yA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/u1j4nIDPZQxieKFGioxQUg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/1H-WTJNrz_ydLgH3n_JatQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/bH5Ip-7aAMscnjm6yJuROw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/vEiAhSggFaqCxkYqCCRdFw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/ZGwvIBFhgW6P4fOAjb4z9g&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/MEJzCmkK7fcCu5wixwrDGA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/2SJvvkpC1S8U__WfpCS1nw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/MJUU6VttxhrRo5WjZtYqJw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/mpCx-FnqJZP8hvBHbbCBpg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/CturocUYQtCf_Q_yOHM3eQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/O2KMaluN7Xg1vRReL9TJFg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/9_yrOUTmpD68qlmpapiSYA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/gCFxale2551ETk9IegBhSQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/LNkXVUJFCNUICdXzbEIbfQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/-uOAT-AQN1cGEmyBrh0BSg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/x6MyukTK0eDt_5CdLJhmcw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/GOSjnUj3smQsXuunKPJ_ww&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/rl5eg1Rds2FA2bGBX5ImSg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/jyYWMAlcqChjiO2z8zUllQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/aKW8ZaPpFi3MAleaJVkzFg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/7oMvbY4oEu1d0OTWW8VcmA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/5E4qHPkxld_acANwYctZNw&apos;]</span><br><span class="line">    for item in array:</span><br><span class="line">        html = get_html(item)</span><br><span class="line">        id = parse_result(html)</span><br><span class="line">        video_url = conect_url(id)</span><br><span class="line">        print(&apos;video_url--&gt;&apos; + str(video_url))</span><br><span class="line">        save_file(video_url)</span><br><span class="line">        # time.sleep(3)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><h3 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h3><h5 id="you-get"><a href="#you-get" class="headerlink" title="you-get"></a>you-get</h5><p><a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a> 是一个 Python 写的下载工具，国内主流的网站都可以下载。不能破解 vip 视频哦，当然你要有 cookie 的话就可以下载，理论上，你看到什么就能下载什么。<br>安装方式： <code>$ pip3 install you-get</code><br>更新方式： <code>$ pip3 install --upgrade you-get</code></p><h5 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h5><p>本文的获取 cookie 是使用的 Chrome 的插件 – <a href="https://chrome.google.com/webstore/detail/cookiestxt/njabckikapfpffapmjgojcnbfjonfjfg?hl=zh" target="_blank" rel="noopener">cookies.txt</a>。它可以导出 cookie 给其他程序使用。</p><p>下载命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> you-get -o /Users/ruicky/Downloads/中国一分钟 -I /Users/ruicky/Downloads/video.txt --cookies /Users/ruicky/Downloads/cookies.txt</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过简单的 Python 脚本就可以实现重复的劳动，果然强大如斯。但是也有一个问题需要考虑，通过 you-get 下载的视频即使携带了 cookie 了能够下载高清的视频，但是也是有水印的，这个怎么破呢？其实也有方法，那就是使用 Mac 下的一个好用方便的下载工具 <code>Downie 4</code>，自己亲测使用抓包的地址下载没有水印，完美解决问题，但是不能实行自动化 比较可惜。</p>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2020/07/17/python-down-video/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mac 软件推荐 [2020-06]</title>
      <link>https://ruicky.github.io/2020/06/28/mac-software/</link>
      <guid>https://ruicky.github.io/2020/06/28/mac-software/</guid>
      <pubDate>Sun, 28 Jun 2020 03:24:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/28/mac-software/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/28/mac-software/0.jpg" alt="0.jpg"><br><a id="more"></a></p><h1 id="Mac-软件推荐"><a href="#Mac-软件推荐" class="headerlink" title="Mac 软件推荐"></a>Mac 软件推荐</h1><p>时间：2020-06-10</p><h2 id="通讯类"><a href="#通讯类" class="headerlink" title="通讯类"></a>通讯类</h2><ul><li><a href="https://im.qq.com/download/" target="_blank" rel="noopener">QQ</a></li><li><a href="https://mac.weixin.qq.com/" target="_blank" rel="noopener">微信</a><ul><li>防撤退插件<a href="https://github.com/MustangYM/WeChatExtension-ForMac" target="_blank" rel="noopener">(WeChatExtension-ForMac)</a></li></ul></li><li><a href="https://page.dingtalk.com/wow/dingtalk/act/download" target="_blank" rel="noopener">钉钉</a></li><li>Telegram</li></ul><h2 id="影音播放"><a href="#影音播放" class="headerlink" title="影音播放"></a>影音播放</h2><ul><li><a href="https://iina.io/" target="_blank" rel="noopener">IINA</a></li><li><a href="https://music.163.com/#/download" target="_blank" rel="noopener">网易云音乐</a></li></ul><h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><ul><li><a href="https://dl.xunlei.com/#mod02" target="_blank" rel="noopener">迅雷</a></li><li><a href="https://macwk.com/soft/downie" target="_blank" rel="noopener">Downie 4</a></li><li><a href="https://macwk.com/soft/transmission" target="_blank" rel="noopener">Transmission</a></li></ul><h2 id="办公类"><a href="#办公类" class="headerlink" title="办公类"></a>办公类</h2><ul><li><a href="https://macwk.com/soft/office" target="_blank" rel="noopener">Microsoft Office 2019</a></li></ul><h2 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a>编程类</h2><ul><li><a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a></li><li><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">Visual Studio Code</a></li><li><a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">Chrome</a><ul><li><a href="https://www.postman.com/downloads/" target="_blank" rel="noopener">Postman</a></li></ul></li><li>DataGrip</li><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a></li><li><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">Docker</a></li><li><a href="https://macwk.com/soft/sketch" target="_blank" rel="noopener">Sketch</a></li><li><a href="https://macwk.com/soft/xmind-8-pro" target="_blank" rel="noopener">XMind</a></li><li><a href="https://macwk.com/soft/adobe-photoshop-cc" target="_blank" rel="noopener">Photoshop</a></li><li><a href="https://macwk.com/soft/transmit" target="_blank" rel="noopener">Transmit</a></li></ul><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ul><li><a href="https://macwk.com/soft/paper" target="_blank" rel="noopener">pap.er</a></li><li><a href="https://macwk.com/soft/perpetual-calendar" target="_blank" rel="noopener">万年历</a></li><li><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a></li><li><a href="https://mac.softpedia.com/get/Utilities/Microsoft-Remote-Desktop-Connection.shtml" target="_blank" rel="noopener">Microsoft Remote Desktop</a></li><li><a href="https://www.yinxiang.com/download/" target="_blank" rel="noopener">印象笔记</a></li><li><a href="https://macwk.com/soft/parallels-desktop" target="_blank" rel="noopener">Parallels Desktop</a></li><li><a href="https://macwk.com/soft/balenaetcher" target="_blank" rel="noopener">balenaEtcher</a></li><li><a href="https://macwk.com/soft/reeder" target="_blank" rel="noopener">Reeder</a></li><li><a href="https://www.markeditor.com/free_download?app=text2image&amp;version=0.0.6" target="_blank" rel="noopener">Text2Image</a></li><li><a href="https://www.theunarchiver.com/" target="_blank" rel="noopener">The unarchiver</a></li><li><a href="https://www.notion.so/desktop" target="_blank" rel="noopener">Notion</a></li><li><a href="https://github.com/meowtec/Imagine" target="_blank" rel="noopener">Imagine</a></li><li><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">Picgo</a></li><li><a href="https://github.com/Cenmrev/V2RayX/releases" target="_blank" rel="noopener">V2RayX</a></li><li><a href="https://macwk.com/soft/atext" target="_blank" rel="noopener">aText</a></li><li><a href="https://macwk.com/soft/mos" target="_blank" rel="noopener">Mos</a></li><li><a href="https://www.u.tools/download.html" target="_blank" rel="noopener">uTools</a></li><li><a href="https://macwk.com/soft/paste" target="_blank" rel="noopener">Paste</a></li><li><a href="https://macwk.com/soft/ccleaner-pro" target="_blank" rel="noopener">CCleaner</a></li></ul><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><ul><li><a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="noopener">Python 3</a></li><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js 10+</a></li></ul><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><ul><li><a href="https://brew.sh/" target="_blank" rel="noopener">brew</a></li><li><a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a></li><li><a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">youtube-dl</a></li></ul>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2020/06/28/mac-software/#disqus_thread</comments>
    </item>
    
    <item>
      <title>京东定时签到-GitHub 实现</title>
      <link>https://ruicky.github.io/2020/06/05/jd-sign/</link>
      <guid>https://ruicky.github.io/2020/06/05/jd-sign/</guid>
      <pubDate>Fri, 05 Jun 2020 09:18:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/0.png&quot; alt=&quot;header&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/0.png" alt="header"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>各位大佬好，最近趁着 618 年中的购物活动，很多针对淘宝的喵币和京东的叠蛋糕的脚本，层出不穷。本教程只是针对 <a href="https://github.com/NobyDa/Script" target="_blank" rel="noopener">NobyDa</a>的签到脚本和 GitHub 的 Actions 来做一个托管的签到。以下有部分内容，比较偏向小白，明白的原理的可直接自己部署。</p><p>大体思路：</p><ol><li>自动下载 NobyDa 大佬的最新脚本</li><li>修改脚本中的参数值</li><li>基于 GitHub Actions 自动执行脚本</li></ol><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol><li>GitHub 账户</li><li>京东账户</li><li>计算机基础知识</li><li>Server 酱[可选，主要用来推送签到结果]</li></ol><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p>通过此教程，你将每天凌晨<strong>定时签到</strong>，<strong>无需服务器</strong>，也不需要很多的开发，只需要简单的部署即可。另外因为京东 cookie 的原因，如果失效了只需要更改 GitHub 中 secret 中的 JD_COOKIE 即可，可以算是非常的简捷方便。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/result.jpg" alt="result"></p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p><strong>你的 cookie 存储在 GitHub 的 secrets 中所以，本人还有其他人是看不到，也无法使用的。敬请放心。</strong></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="GitHub-注册"><a href="#GitHub-注册" class="headerlink" title="GitHub 注册"></a>GitHub 注册</h3><ol><li>首先打开官网 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></li><li>注册页面填入信息<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/github.jpg" alt="github"></li></ol><ul><li>Username: 你的用户名，GitHub 全网唯一，它会自动检测是否有注册，最好英文</li><li>Email：你自己的邮箱</li><li>Password：密码</li></ul><ol start="3"><li>输入上述信息后，点击 <code>Sign up for GitHub</code> 按钮，会给你发送一封确认邮件，确认即可。</li></ol><h3 id="Server-酱配置-【可选】"><a href="#Server-酱配置-【可选】" class="headerlink" title="Server 酱配置 【可选】"></a>Server 酱配置 【可选】</h3><p>「Server酱」，英文名「ServerChan」，是一款「程序员」和「服务器」之间的通信软件。</p><p>使用 Server酱 前提是已有了 GitHub 账号，登录获取到 key 值，并绑定微信即可。然后会把每日签到的消息给你推送到微信中。</p><ol><li>打开 server 酱的官网[<a href="http://sc.ftqq.com/3.version]" target="_blank" rel="noopener">http://sc.ftqq.com/3.version]</a></li><li>点击右上角的 <code>登入</code> 链接<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/server-1.jpg" alt="server-1"></li><li>会跳入 GitHub 授权页，在该页面填入你在上方注册的 GitHub 账户即可<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/server-2.jpg" alt="server-2.jpg"></li><li>点击上方的 <code>微信推送</code> 链接， 然后点击页面中的 <code>开始绑定</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/server-3.jpg" alt="server-3"></li><li>掏出手机，打开微信，扫描屏幕上的二维码，如果未关注，先关注，然后在绑定即可。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/server-4.jpg" alt="server-4"></li><li>绑定后，点击上方的 <code>发送消息</code> 链接，就可以看到你自己的 key 值，保存下来，下面会用到。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/server-5.jpg" alt="server-5"></li></ol><h3 id="获取京东-cookie"><a href="#获取京东-cookie" class="headerlink" title="获取京东 cookie"></a>获取京东 cookie</h3><p>描述，所有的操作都是基于京东的账户的 cookie 操作的，所以这一步很重要。大概率使用<strong>手机号验证码登录的</strong>京东的 cookie 有效期大概一个月(没有实际论证过，存疑)。</p><ol><li>电脑上打开 Chrome 浏览器，按 F12 打开开发者工具，并点击工具栏的左上角选择手机模式。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/chrome-1.png" alt="chrome-1"></li><li>然后选中一个设备<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/chrome-2.png" alt="chrome-2"></li><li>输入地址 <code>https://plogin.m.jd.com/login/login</code> 并打开网页，输入手机号验证码，点击登录。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/chrome-3.jpg" alt="chrome-3"></li><li>选择右侧工具栏中的 <code>console</code> 然后在下放输入 <code>copy(document.cookie)</code> 它会拷贝当前的 cookie， 然后在一个文本编辑器中或其他可编辑的窗口中复制出内容，并保存好，下方要用。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/chrome-4.jpg" alt="chrome-4"></li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="Fork-代码"><a href="#Fork-代码" class="headerlink" title="Fork 代码"></a>Fork 代码</h3><p>相关的基础程序都已经写好，放在了，大家可以直接 fork 代码到自己的项目中。</p><ul><li>打开 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，登录自己的 GitHub 账户。</li><li>浏览器访问 <a href="https://github.com/ruicky/jd_sign_bot" target="_blank" rel="noopener">ruicky/jd_sign_bot</a><ul><li>点击 右上角的 Star 按钮。</li><li>点击 右上角的 Fork 按钮。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/fork.jpg" alt="fork"></p><h3 id="GitHub-配置"><a href="#GitHub-配置" class="headerlink" title="GitHub 配置"></a>GitHub 配置</h3><ul><li>点击页面的 <code>Settings</code> 操作按钮<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/settings.jpg" alt="settings"></li><li>点击左侧的 <code>Secrets</code> 选项卡<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/secrets.jpg" alt="secrets"></li><li>点击页面右上角的 <code>New secret</code> 按钮<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/new-secret.jpg" alt="new-secret"></li><li>填写 京东 cookie 的 secret  信息<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/add-secret.jpg" alt="add-secret"><ul><li>Name: JD_COOKIE</li><li>Value: 你自己的 京东 cookie 值</li><li>填写完成后 点击 <code>Add secret</code> 按钮</li></ul></li></ul><p>下面的内容会配置通知微信推送的 <code>Server 酱</code>，属于可选操作。</p><ul><li>再次点击页面右上角的 <code>New secret</code> 按钮<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/new-secret.jpg" alt="new-secret"></li><li>填写 server 酱 key 的  secret  信息[<em>可选</em>]<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/add-secret-push.jpg" alt="add-secret-push"><ul><li>Name: PUSH_KEY</li><li>Value: 你自己的 server key 值</li><li>填写完成后 点击 <code>Add secret</code> 按钮</li></ul></li><li>启动 <code>GitHub Actions</code><ul><li>点击功能栏中的 <code>Actions</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/actions.jpg" alt="actions"></li><li>点击绿色按钮，启用 <code>Actions</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/enable-actions.jpg" alt="enable-actions"></li></ul></li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>  先说原理，目前的 <code>GitHub Actions</code> 配置的执行触发有 2 个：</p><ol><li>定时执行</li><li><p>推送更新代码执行</p><p>大家可以根据第二点的特性来进行测试。例如编辑 README.md 文档，增加个回车，然后提交，来进行触发。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/edit-file.jpg" alt="edit-file"><br>然后查看 <code>Actions</code> 的日志看是否成功。</p><ul><li>成功的日志<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/success-log.jpg" alt="success-log"></li><li>错误的日志<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/faile-log.jpg" alt="faile-log"></li></ul></li></ol><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q: Actions 日志里面显示 Key 报错，怎么处理？<br>A: 那可能是你的 Cookie 的问题，查看是否粘贴错误，例如多粘其他参数什么的。（小技巧：可以把 key 复制出来在电脑的编辑器上看是否是 1 行）</p><p>Q：按照配置，没有看到 Actions 执行，也没收到提示？<br>A：首先查看你的 Actions 中是否启用。默认 Fork 的分支，是关闭的。然后在查看你的日志，看对应的错误是什么。再次看是否自己的代码跟我的最新的是否一致。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>注意：</strong> 京东 <code>Cookie</code> 的有效期如果使用扫码登录的 1 天，使用手机验证码登录的 1 个月。建议使用手机验证码登录。<br>每过一个月 <code>Cookie</code> 会过期，所以要定时去记得更新你的 <code>Secrets</code> 中的 <code>JD_COOKIE</code>, 否则，程序不能正常运行。<br>整个流程比较简单，相关操作过程也已经写明，如果还有不明白的地方可在下方留言。如果给我的相关项目给个 <code>Star</code> 会更好哦~</p>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2020/06/05/jd-sign/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2020-04-07 Hexo 部署 GitHub 调整</title>
      <link>https://ruicky.github.io/2020/04/07/github-actions/</link>
      <guid>https://ruicky.github.io/2020/04/07/github-actions/</guid>
      <pubDate>Tue, 07 Apr 2020 08:13:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/04/07/github-actions/0.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/04/07/github-actions/0.png" alt="img"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现状：我的网站原先是在GitHub上进行源码托管，使用Netlify进行自动化部署。</p><p>改变：</p><pre><code>1. 使用GitHub进行托管源码2. 使用GitHub Pages来进行代码展示3. 使用https加密服务</code></pre><p>总而言之，就是由Netlify自动化迁向GitHub全家桶实现。</p><p>思路：</p><p>创建2个GitHub仓库，一个私有仓库用来存储源码，一个用来GitHub Pages展示静态页。</p><p>使用GitHub自带的GitHub Actions 来实现自动化部署。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><ul><li><p>创建私有仓库为 <code>ruicky_blog</code> 存放hexo相关的源码</p></li><li><p>创建公共仓库为 <code>ruicky.github.io</code> 用来展示GitHub Pages</p></li></ul><h4 id="配置-GitHub-Actions"><a href="#配置-GitHub-Actions" class="headerlink" title="配置 GitHub Actions"></a>配置 GitHub Actions</h4><ul><li><p>本地生成秘钥</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在GitHub 的个人配置页 <code>Setting</code> —&gt; <code>SSH and GPG keys</code> 添加刚刚生成的公钥，名称随意。</p></li><li><p>在 <code>ruicky_blog</code> 的 <code>Settings</code> —&gt; <code>Secrets</code> 里添加刚刚生成的私钥，名称为 <code>ACTION_DEPLOY_KEY</code>。</p></li><li><p>在 <code>ruicky_blog</code>的仓库的 <code>Actions</code> 选型卡中新建 <code>workflow</code>，填写以下配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> name: Deploy Blog</span><br><span class="line"></span><br><span class="line">on: [push] # 当有新push时运行</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build: # 一项叫做build的任务</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行</span><br><span class="line">    </span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout # 将仓库内master分支的内容下载到工作目录</span><br><span class="line">      uses: actions/checkout@v1 # 脚本来自 https://github.com/actions/checkout</span><br><span class="line">      </span><br><span class="line">    - name: Use Node.js 10.x # 配置Node环境</span><br><span class="line">      uses: actions/setup-node@v1 # 配置脚本来自 https://github.com/actions/setup-node</span><br><span class="line">      with:</span><br><span class="line">        node-version: &quot;10.x&quot;</span><br><span class="line">    </span><br><span class="line">    - name: Setup Hexo env</span><br><span class="line">      env:</span><br><span class="line">        ACTION_DEPLOY_KEY: $&#123;&#123; secrets.ACTION_DEPLOY_KEY &#125;&#125;</span><br><span class="line">      run: |</span><br><span class="line">        # set up private key for deploy</span><br><span class="line">        mkdir -p ~/.ssh/</span><br><span class="line">        echo &quot;$ACTION_DEPLOY_KEY&quot; | tr -d &apos;\r&apos; &gt; ~/.ssh/id_rsa # 配置秘钥</span><br><span class="line">        chmod 600 ~/.ssh/id_rsa</span><br><span class="line">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">        # set git infomation</span><br><span class="line">        git config --global user.name &apos;ruicky&apos; # 换成你自己的邮箱和名字</span><br><span class="line">        git config --global user.email &apos;ruicky@ruicky.me&apos;</span><br><span class="line">        # install dependencies</span><br><span class="line">        npm i -g hexo-cli # 安装hexo</span><br><span class="line">        npm i</span><br><span class="line">  </span><br><span class="line">    - name: Deploy</span><br><span class="line">      run: |</span><br><span class="line">        # publish</span><br><span class="line">        hexo generate &amp;&amp; hexo deploy # 执行部署程序</span><br></pre></td></tr></table></figure></li></ul><ul><li>配置 站点 <code>_config.yml</code> 中的 <code>deploy</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:ruicky/ruicky.github.io.git</span><br></pre></td></tr></table></figure></li></ul><h4 id="配置域名，启用https"><a href="#配置域名，启用https" class="headerlink" title="配置域名，启用https"></a>配置域名，启用https</h4><p>在 <code>ruicky.github.io</code> 仓库中 找到 <code>Settings</code> ,配置该节点下的 <code>GitHub Pages</code>。将其中的 <code>Custom domain</code>修改为自己的域名，如: <code>ruicky.me</code>, 并勾选 <code>Enforce HTTPS</code> 即可。</p><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>注意其中的两个仓库 <code>ruicky</code> 跟 <code>ruicky.github.io</code> 是我自己的仓库，如果要操作的话，需要改为你自己的。<br>该文章面向有点基础的同学，非小白教程，如果有什么不明白的，可在下方留言。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p><a href="https://imagician.net/archives/17/" target="_blank" rel="noopener">用GitHub Actions自动化发布Hexo网站到GitHub Pages</a></p></blockquote>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2020/04/07/github-actions/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Datagrip 连接 Phoenix 教程</title>
      <link>https://ruicky.github.io/2019/09/27/datagrip-phoenix/</link>
      <guid>https://ruicky.github.io/2019/09/27/datagrip-phoenix/</guid>
      <pubDate>Fri, 27 Sep 2019 06:08:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/0.png&quot; alt=&quot;datagrip-phoenix&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/0.png" alt="datagrip-phoenix"><br><a id="more"></a></p><h1 id="Datagrip-连接-Phoenix-教程"><a href="#Datagrip-连接-Phoenix-教程" class="headerlink" title="Datagrip 连接 Phoenix 教程"></a>Datagrip 连接 Phoenix 教程</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Phoenix 是 Apache 公司出的 构建在HBase之上的关系型数据库层的一个产品。使用 JDBC 驱动可访问。本文也是基于此来连接。</p><p>Datagrip 是JetBrains公司推出的管理数据库的产品。小巧万能。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol><li>系统: MacOS V10.14.4</li><li>Datagrip 2018.2.4</li><li>Phoenix 4.14.0</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>从 Phoneix 包中 找到对应的 client 的 jar 包，我这里是 phoenix-4.14.0-HBase-1.2-client.jar。 并拷贝到一个目录备用。</li><li>打开 Datagrip<ul><li>打开菜单 <code>File--&gt;Data sources...</code> (也可使用 <code>command +;</code>方式打开)</li><li>点击左上角的加号，选择 Driver<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/1.jpg" alt="datagrip-1"></li><li>输入配置信息<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/2.jpg" alt="datagrip-2"><ul><li>Name: Phoenix-Driver (此处填写的是驱动的名称)</li><li>Driver Files 中 点击 <code>+</code> 然后 选择 <code>Customer JARs</code> 选择之前准备好的 Phoenix 的 client 的 jar 包</li><li>Class 中 选择 <code>org.apache.phoenix.jdbc.PhoenixDriver</code></li><li>点解 <code>ok</code>键</li></ul></li><li>输入连接信息<ul><li>打开菜单 <code>File--&gt;Data sources...</code> (也可使用 <code>command +;</code>方式打开)</li><li>创建新的连接<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/3.jpg" alt="datagrip-3"></li><li>输入连接信息<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/4.jpg" alt="datagrip-4"></li><li>Name :连接的别称</li><li>URL: 连接的地址。<code>eg:jdbc:phoenix:IP:2181</code></li><li>点击 <code>Test Connection</code> 按钮</li><li>点击 <code>OK</code> 按钮</li><li>注意：如果有 User 跟 Password 的话，也要填写。</li></ul></li></ul></li></ol><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><blockquote><p><a href="https://pan.baidu.com/s/1kfIvg5tjSn5TFX8nIlIxwQ" target="_blank" rel="noopener">phoenix-4.14.0-HBase-1.2-client.jar</a> 提取码: xgad</p></blockquote><p>以上你就能愉快的在 Datagrip 操作 Phoenix 了。</p>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2019/09/27/datagrip-phoenix/#disqus_thread</comments>
    </item>
    
    <item>
      <title>第一次违章全纪录</title>
      <link>https://ruicky.github.io/2019/09/04/first-ticket/</link>
      <guid>https://ruicky.github.io/2019/09/04/first-ticket/</guid>
      <pubDate>Wed, 04 Sep 2019 09:54:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/0.jpg&quot; alt=&quot;0&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/0.jpg" alt="0"></p><a id="more"></a><h1 id="第一次违章全纪录"><a href="#第一次违章全纪录" class="headerlink" title="第一次违章全纪录"></a>第一次违章全纪录</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  本人山西人氏，在北京工作了好几年了，但是由于摇号，所以也没有北京车牌，上的是老家的车牌，现在是 2019年9月份，还是可以在“北京交警” APP 上申请进京证的。<br>  今天，像往常一样打开 APP 申请进京证。但是，提交资料以后，等待审核后，提示这个 “请处理机动车在京违法后，再申请进京证”。难道违章了？</p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/app.jpg" alt="请处理机动车在京违法后，再申请进京证"></p><h2 id="违章处理"><a href="#违章处理" class="headerlink" title="违章处理"></a>违章处理</h2><p>  打开 <code>交管12123</code>APP 上，想看下自己的违章，但是，打开后，并没有啊、</p><p>  难道是同步慢么？为了尽快落实这个问题，我上网搜索了一下。像我这种异地的在北京的违章怎么看。还真找到了，</p><p>  首先，你如果之前在你所在地 注册过 交管12123 的话，你得登录 你注册时候的省份，就像我是山西注册的 所以地址是 <code>https://sx.122.gov.cn</code>.<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/第一次登录.jpg" alt="第一次登录"></p><p>  登录完以后，在左上角，切换所在地，就可以查看相应地方的违章。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/切换城市.jpg" alt="切换城市"></p><p>  点击业务办理<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/业务办理.jpg" alt="业务办理"></p><p>  然后在看点击这个“电子监控违法处理”，就能看到你的违章了。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/在线办理.jpg" alt="在线办理"></p><p>  <strong>简而言之就是：先去注册所在地登录，在切换城市，就能看到相应城市的违章。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  交通违章代码:70522<br>  违章行为:未按照指示交通标线指示行驶的。</p><p>  以后安全行车，争取不违章。</p>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2019/09/04/first-ticket/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mac 解锁网易云音乐变灰</title>
      <link>https://ruicky.github.io/2019/07/31/unblock-music/</link>
      <guid>https://ruicky.github.io/2019/07/31/unblock-music/</guid>
      <pubDate>Wed, 31 Jul 2019 08:28:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/0.jpg&quot; alt=&quot;header&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/0.jpg" alt="header"><br><a id="more"></a></p><h1 id="Mac-解锁网易云音乐变灰"><a href="#Mac-解锁网易云音乐变灰" class="headerlink" title="Mac 解锁网易云音乐变灰"></a>Mac 解锁网易云音乐变灰</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>有天，朋友推荐了一首周杰伦的《告白气球》，说很好听，让我听下。打开网易云音乐客户端，搜索框输入’告白气球‘，额，一顿操作猛如虎，一看歌单全是灰。</p><p>好吧，原来由于版权问题，网易音乐把很多没有版权的音乐给下架了。但是资料还可以查到，就是不能播放了。</p><p>好吧，对于习惯使用网易音乐的朋友，每天听听歌，看看评论也是蛮有意思的。这下不能听了咋整，网上搜索一番，找到如下方法解决。 </p><p>以下，偏向有一定编程基础的人。</p><h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>使用/ QQ / 虾米 / 百度 / 酷狗 音源替换变灰歌曲链接。</p><h2 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a>开始前准备</h2><p>软件环境:</p><ul><li>mac(macOs 10.14.4)</li><li>网易云音乐[v2.1.1(790]</li><li>node (v10.13.0)</li><li>pm2 <ul><li>node进程管理工具</li></ul></li><li>Proxifier (v2.22)<ul><li>代理工具</li><li><a href="https://xclient.info/s/proxifier.html" target="_blank" rel="noopener">下载地址</a></li></ul></li></ul><p>需提前获取 <code>music.163.com</code> 的 实际IP。 可通过 <code>ping music.163.com</code> 获取。</p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/ping-ip.png" alt="ping-ip"></p><p>如我的就是 <code>59.111.160.197</code>，在项目启动的时候 就要用这个了。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol><li>代码<ul><li>下载代码 <ul><li><code>git clone https://github.com/nondanee/UnblockNeteaseMusic.git</code></li></ul></li><li>安装依赖 <ul><li><code>cd UnblockNeteaseMusic</code></li></ul></li><li>使用进程管理<ul><li><code>pm2 start app.js --name unblockMusic -- -f 59.111.160.197 -p 63455:8081</code></li><li>说明： <code>-f</code> 为上方你自己本地的 ping 出来的 ip 替换成自己的即可.</li><li><code>-p</code> 中 63455 为 https 的端口， 8081 为http 的端口</li></ul></li></ul></li><li><p>配置代理</p><ul><li>打开 <code>Proxifier</code> 软件</li><li>配置 <code>Proxies</code> 如下<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/p-1.jpg" alt="p-1"></li><li>配置 <code>Rules</code> 如下<ul><li>Applications 为 <code>NeteaseMusic;com.apple.WebKit.Networking</code></li><li>Target Hosts 为 <code>*.music.163.com;*.music.126.net;mam.netease.com;api.iplay.163.com</code></li><li>选择 Action 为刚才创建的即可<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/p-2.jpg" alt="p-2"></li></ul></li><li>配置 <code>DNS</code> 如下<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/p-3.jpg" alt="p-3"></li></ul></li><li><p>测试<br>打开网易云音乐，搜索 <code>周杰伦</code>，看到歌曲不为灰色 就算成功了！<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/r-1.jpg" alt="r-1"></p></li><li><p>补充<br>服务器部署 <code>pm2 start app.js --name unblockMusic -- -f 59.111.160.197 -p 80:443</code><br>Proxifier 代理 <code>https ip</code> 说明：启动的时候假如是 63255:9300 其实对应的是http:https 但是这个软件不一样需要对应的是 63255 http 代理</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/22" target="_blank" rel="noopener">UnblockNeteaseMusic</a></p><p><a href="https://www.sheyilin.com/2019/06/unblockneteasemusic/" target="_blank" rel="noopener">解锁网易云音乐变灰歌曲</a></p></blockquote>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2019/07/31/unblock-music/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019中国北京世界园艺博览会指北</title>
      <link>https://ruicky.github.io/2019/07/18/horti-expo2019/</link>
      <guid>https://ruicky.github.io/2019/07/18/horti-expo2019/</guid>
      <pubDate>Thu, 18 Jul 2019 05:41:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/18/horti-expo2019/园区导览图.jpg&quot; alt=&quot;园区导览图&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/18/horti-expo2019/园区导览图.jpg" alt="园区导览图"></p><a id="more"></a><h1 id="2019中国北京世界园艺博览会指北"><a href="#2019中国北京世界园艺博览会指北" class="headerlink" title="2019中国北京世界园艺博览会指北"></a>2019中国北京世界园艺博览会指北</h1><h2 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h2><p>方式：自驾<br>地点：出发地到北京世界园艺博览会<br>时间：1小时30分钟<br>高速花费：<code>15*2 = 30</code> 或 <code>25*2 = 50</code><br>停车场： P1,P2,P3,P4  小车收费 10 元/次</p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/18/horti-expo2019/路程.jpg" alt="收费+免费"></p><h2 id="门票"><a href="#门票" class="headerlink" title="门票"></a>门票</h2><p>平日票：120<br>提前2天打九折： <code>120*0.9 = 108</code><br>领取文惠券：满80减20 满200减50  满400减100 <a href="https://mp.weixin.qq.com/s/RXmXpNYAbzgrCmAsClU5qA" target="_blank" rel="noopener">领取地址</a></p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/18/horti-expo2019/门票价格.png" alt="门票价格"></p><h2 id="出行前准备"><a href="#出行前准备" class="headerlink" title="出行前准备"></a>出行前准备</h2><ul><li><strong>身份证，身份证，身份证</strong> (重要的事情说三遍)</li><li>防晒三件套(防晒衣，防晒伞，防晒霜)</li><li>防虫</li><li>食物，特别是水</li><li>充电宝</li></ul><h2 id="游览顺序"><a href="#游览顺序" class="headerlink" title="游览顺序"></a>游览顺序</h2><h3 id="线路1-精彩园艺体验之旅-两日游线路"><a href="#线路1-精彩园艺体验之旅-两日游线路" class="headerlink" title="线路1　精彩园艺体验之旅(两日游线路)"></a>线路1　精彩园艺体验之旅(两日游线路)</h3><h4 id="第1日：园艺与世界"><a href="#第1日：园艺与世界" class="headerlink" title="第1日：园艺与世界"></a>第1日：园艺与世界</h4><p>下午4：00后入园：1号门——中国馆——永宁阁(不登阁)——园内用晚餐——妫汭湖畔漫步——妫汭剧场——奇幻光影森林(夜晚)——1号门</p><h4 id="第2日：园艺与我们"><a href="#第2日：园艺与我们" class="headerlink" title="第2日：园艺与我们"></a>第2日：园艺与我们</h4><p>早8：30入园：1号门——百草园、百果园、百蔬园——植物馆——园艺小镇——荷风馆——园内用午餐——中华园艺展示区(选择2-3处展园参观)——国际馆——世界园艺展示区(选择2-3处展园参观)——生活体验馆——花车巡游及自由活动——1号门</p><h4 id="线路1特色"><a href="#线路1特色" class="headerlink" title="线路1特色"></a>线路1特色</h4><p>这是一条囊括了北京世园会全部美景的线路，主办方精心准备了跨夜票，在第一天下午4点以后入园，可以享受到两天精彩的园艺之旅——世园梦夜、灯光秀景、星空人间、美丽家园。<br>这条线路包含了北京世园会的主要场馆和展区，包括中国馆、国际馆、植物馆、生活体验馆和妫汭剧场，以及永宁阁、荷风馆、园艺小镇、“三百园”(百草园、百果园、百蔬园)等户外展区。<br>除了静态园艺观赏外，还有“花车巡游”等丰富多彩的活动等着您观赏和参与。</p><h3 id="线路2-探秘世园会之旅-半日游线路"><a href="#线路2-探秘世园会之旅-半日游线路" class="headerlink" title="线路2　探秘世园会之旅　(半日游线路)"></a>线路2　探秘世园会之旅　(半日游线路)</h3><p>1号门——永宁阁——中国馆——中华园艺展示区(选择2-3处参观)——国际馆——世界园艺展示区(选择2-3处参观)——自由活动——1号门</p><h4 id="线路2特色"><a href="#线路2特色" class="headerlink" title="线路2特色"></a>线路2特色</h4><p>这是一条带您了解北京世园会园艺精华的游览线路。<br>在这条线路上您将会观赏到北京世园会的制高点和标志性建筑——永宁阁。<br>参观极富特色的中国馆和国际馆。<br>中国馆承载锦绣园艺情、如意中国梦，展示中国园艺建设成果;国际馆外观像是一把把创意飞扬的花伞，是世界园艺展示的室内场馆。<br>此外，在中华园艺展示区，有来自中华园艺区各省市区的代表园艺景观，建议您从中选择2-3处景点参观，领略其中的精彩。<br>世界园艺异彩纷呈，在世界园艺展示区有参会世界各国的特色园艺作品，建议您从中选择2-3处景点参观，感受世界园艺的独特魅力。园艺的世界，多彩的梦幻组合，共同为您构建一个美丽家园!</p><h3 id="线路3-园艺文化探究之旅-一日游线路"><a href="#线路3-园艺文化探究之旅-一日游线路" class="headerlink" title="线路3　园艺文化探究之旅　(一日游线路)"></a>线路3　园艺文化探究之旅　(一日游线路)</h3><p>1号门——植物馆——百草园、百果园、百蔬园——园艺小镇——永宁阁——中国馆——园内午餐——中华园艺展示区(选择2-3处参观)——国际馆——世界园艺展示区(选择5-7处参观)——生活体验馆——1号门</p><h4 id="线路3特色"><a href="#线路3特色" class="headerlink" title="线路3特色"></a>线路3特色</h4><p>这是一条带您集中感受北京世园会园艺文化的游览线路。<br>植物馆是一个多彩奇妙的植物世界，馆内汇聚了上千个植物品种，您可以在此探索植物的奥秘。满园春色、瓜果飘香的“三百园”(百草园、百果园、百蔬园)，为您展现了与人类生活密切相关的果蔬园艺和中草药园艺。<br>园艺小镇是一座古色古香、幽静的园林式小镇，展示家庭生活中的园艺，并为大家提供游览中的相关接待服务。<br>您还可以观赏到北京世园会的制高点和标志性建筑——永宁阁。参观极富特色的中国馆和国际馆。中国馆承载锦绣园艺情、如意中国梦，展示中国园艺建设成果;国际馆外观像是一把把创意飞扬的花伞，是世界园艺展示的室内场馆。<br>此外，在中华园艺展示区，有来自中华园艺区各省市区的代表园艺景观，建议您从中选择2-3处景点参观，领略其中的精彩。<br>世界园艺异彩纷呈,在世界园艺展示区有参会世界各国的特色园艺作品，建议您从中选择5-7处景点参观，感受世界园艺的独特魅力。最后还有生活体验馆，让您亲身参与园艺生活的点滴体验。绿色生活，美丽家园。让园艺融入自然，让自然感动心灵!</p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/18/horti-expo2019/周边景区.jpg" alt="周边景区"></p><h2 id="游记"><a href="#游记" class="headerlink" title="游记"></a>游记</h2><p>待补充~</p><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="http://www.horti-expo2019.com/" target="_blank" rel="noopener">2019中国北京世界园艺博览会官方网站</a></p>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2019/07/18/horti-expo2019/#disqus_thread</comments>
    </item>
    
    <item>
      <title>解决 vsCode 终端命令不能使用问题</title>
      <link>https://ruicky.github.io/2019/06/19/vscode-nvm-error/</link>
      <guid>https://ruicky.github.io/2019/06/19/vscode-nvm-error/</guid>
      <pubDate>Wed, 19 Jun 2019 03:28:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/19/vscode-nvm-error/error.png&quot; alt=&quot;error&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/19/vscode-nvm-error/error.png" alt="error"><br><a id="more"></a></p><h1 id="解决-vsCode-终端命令不能使用问题"><a href="#解决-vsCode-终端命令不能使用问题" class="headerlink" title="解决 vsCode 终端命令不能使用问题"></a>解决 vsCode 终端命令不能使用问题</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>系统：MACOS<br>说明：在使用vsCode的终端，使用 <code>npm i</code> 报错 <code>Cannot find module &#39;node-gyp/bin/node-gyp&#39;</code> 但在别的终端 如 iTerm2 上面 就可以正常使用。</p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/19/vscode-nvm-error/error.png" alt="error"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先排除 <code>node-gyp</code> 没有全局安装的问题，因为可以在其他的终端正常使用。<br>其次，看了下两边的版本 <code>node -v</code> 都是 v10.13.0<br>然后，突然想起，自己先使用官方的安装包(dmg)方式安装，后来为了兼容老项目，安装过 <code>nvm</code> ，会不会是它搞得鬼。使用<code>nvm list</code>，发现果然不一样。</p><p>↓↓↓ iTerm2显示结果  ↓↓↓<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/19/vscode-nvm-error/terimal.png" alt="iTerm2显示结果"></p><p>↓↓↓ vsCode终端显示结果  ↓↓↓<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/19/vscode-nvm-error/vscode.png" alt="vsCode终端显示结果"></p><p>那么显而易见 就是这个原因了。vsCode 中的终端 使用的是我前面dmg安装的系统的变量以及node_pacage包，而 iTerm2 则使用的是 nvm的变量及包。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>知道了原因就对症下药。</p><h5 id="临时解决方案："><a href="#临时解决方案：" class="headerlink" title="临时解决方案："></a>临时解决方案：</h5><p>在vsCode的终端也使用跟 iTerm2 中一样的 nvm 版本。</p><p>即 在 vsCode 终端中 执行 <code>nvm use v10.13.0</code>， 也能够正常的使用。</p><p>为什么说临时呢，因为当你关闭编辑器，再次打开的时候，还得设置。</p><h5 id="最终解决方案："><a href="#最终解决方案：" class="headerlink" title="最终解决方案："></a>最终解决方案：</h5><p>在 Google 了一圈在这个 github 的 <a href>issues</a>发现解决问题</p><p>即 在 vsCode 的 <code>settings.json</code>  文件中增加 <code>&quot;terminal.integrated.shellArgs.osx&quot;: []</code></p><p>PS：每个系统的 <code>settings.json</code> 存放位置不一样，可借鉴下面。</p><ul><li><strong>Windows</strong> <code>%APPDATA%\Code\User\settings.json</code></li><li><strong>macOS</strong> <code>$HOME/Library/Application Support/Code/User/settings.json</code></li><li><strong>Linux</strong> <code>$HOME/.config/Code/User/settings.json</code></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p><a href="https://code.visualstudio.com/docs/getstarted/settings" target="_blank" rel="noopener">User and Workspace Settings</a><br><a href="https://github.com/Microsoft/vscode/issues/36987" target="_blank" rel="noopener">Terminal seems to set <code>npm config prefix</code> and it breaks <code>nvm</code></a></p></blockquote>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2019/06/19/vscode-nvm-error/#disqus_thread</comments>
    </item>
    
    <item>
      <title>拯救被墙的IP，CDN + v2ray</title>
      <link>https://ruicky.github.io/2019/06/12/solve-ban-ip/</link>
      <guid>https://ruicky.github.io/2019/06/12/solve-ban-ip/</guid>
      <pubDate>Wed, 12 Jun 2019 02:34:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/0.png&quot; alt=&quot;solve&quot;&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/0.png" alt="solve"><br><a id="more"></a></p><h1 id="拯救被墙的IP，CDN-v2ray"><a href="#拯救被墙的IP，CDN-v2ray" class="headerlink" title="拯救被墙的IP，CDN + v2ray"></a>拯救被墙的IP，CDN + v2ray</h1><h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>  相信大家都有ban IP 的经历，不管怎么加密，混淆都有可能被ban IP的可能，目前没有任何一个工具保证永远不会出问题。</p><p>  遇到问题，上网搜索，发现一个好玩的就是 CDN + v2ray的组合,简而言之就是 下载乃服务器上用v2ray伪装成一个网站，再用cdn中转。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/pc-firewall-cdn-vps.png" alt="网络流量传递"><br>  这样的话，防火墙只知道你喝CDN之间的联系，不知道VPS实际的地址，这样就有效的防止你的IP被ban，并且CDN会有很多ip地址，防火墙也不会随意去 ban 他们的 IP，毕竟也有很多正规的网站在使用，所以基本上可以确保你的 IP 的安全。<br>  优缺点<br>CDN 也不是万能的，否则大家就都用这个了，其中的优劣如下：</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>有效防止 IP 被 ban</li><li>已经被 ban 的 IP 也能通过这个方式继续使用</li><li>对于网络很糟糕的线路可以起到加速的效果<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4></li><li>延迟可能会增大</li><li>对于原本很好的线路会起到减速的效果</li><li>配置比较繁琐</li><li>需要拥有一个域名，不过域名价格便宜，也不完全算是缺点，便宜的域名一年的费用还没有 vps 一个月的价格高。<h4 id="适合的人群"><a href="#适合的人群" class="headerlink" title="适合的人群"></a>适合的人群</h4></li><li>担心将来 IP 被 ban</li><li>IP 已经被 ban 但是由于各种原因不想或不能换 IP</li><li>经常为 ban IP 而烦恼</li><li>对速度要求不高只想安安稳稳的用</li></ul><h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>  可通过各种渠道购买域名，捡便宜的买就好，主要做个域名映射而已。推荐用<a href="https://sg.godaddy.com/zh" target="_blank" rel="noopener">godaddy</a>购买，可用支付宝，而且没有备案之类的东西。<br>  购买过程就省略了很简单</p><h4 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h4><p>  本文的前提是你已经有VPS独立的IP了。如果没有可通过其他渠道购买。</p><h2 id="三、使用-CloundFlare-CDN"><a href="#三、使用-CloundFlare-CDN" class="headerlink" title="三、使用 CloundFlare CDN"></a>三、使用 CloundFlare CDN</h2><p>  CloudFlare 是一家全球知名的 CDN 服务商，并且提供了免费的 CDN 套餐，还不限流量，所以我们完全不需要花一分钱就能使用它的 CDN 服务，接下来我就说明如何注册并使用 CloudFlare。</p><h4 id="注册CloundFlare"><a href="#注册CloundFlare" class="headerlink" title="注册CloundFlare"></a>注册CloundFlare</h4><p>首先打开 <a href="https://blog.sprov.xyz/go/cloudflare" target="_blank" rel="noopener">CloudFlare</a> 官网，注册一个账号，注册流程很简单，只需要邮箱就行了，这里不再阐述。</p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/register-cf.png" alt="注册 CloundFlare CDN 账户"></p><h4 id="使用-CloudFlare-管理域名"><a href="#使用-CloudFlare-管理域名" class="headerlink" title="使用 CloudFlare 管理域名"></a>使用 CloudFlare 管理域名</h4><ol><li>添加网站</li><li>修改域名服务器的解析地址</li></ol><h4 id="使用-CloudFlare-CDN"><a href="#使用-CloudFlare-CDN" class="headerlink" title="使用 CloudFlare CDN"></a>使用 CloudFlare CDN</h4><p>  我们选择 【DNS】，这里就是管理域名的解析记录的地方，我这里还没有添加解析记录，下方红框可以用来添加一条解析记录，要填入的信息分别是：解析记录类型、解析名称、解析记录、TTL值。橘色云朵代表该解析记录使用 CDN，灰色云朵代表该解析记录不使用 CDN，点击云朵可以进行切换</p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/dns.png" alt="DNS管理"></p><p>我们先添加一条解析记录，类型选择 A，名称填入 www，再填上你的 vps 的 IP 地址，TTL 默认选择 Automatic，橘色云朵，填好之后点击 Add Record，这样，一条解析记录就添加完成了。</p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/dns-jiexi.png" alt="添加解析记录"></p><p>假设你的域名为 haha.xyz，这条解析记录的意思就是：将 <a href="http://www.haha.xyz" target="_blank" rel="noopener">www.haha.xyz</a> 解析到 IP 地址 123.123.123.123 上。因为开启了橘色云朵，所以实际上的解析记录是 CloudFlare 提供的 CDN 节点的 IP，并由 CDN 节点来访问实际的 IP 地址。</p><p>添加完这条解析记录就不用管 CDN 了，接下来就是配置 v2ray。</p><h2 id="四、Veray-安装及配置"><a href="#四、Veray-安装及配置" class="headerlink" title="四、Veray 安装及配置"></a>四、Veray 安装及配置</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="1-安装-curl-，-vim-和-wget"><a href="#1-安装-curl-，-vim-和-wget" class="headerlink" title="1. 安装 curl  ， vim 和 wget"></a>1. 安装 curl  ， vim 和 wget</h5><p><strong> RedHat系列：Redhat、Centos、Fedora等 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install curl vim wget -y</span><br></pre></td></tr></table></figure><p><strong> Debian系列：Debian、Ubuntu等 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install curl vim wget -y</span><br></pre></td></tr></table></figure></p><h5 id="2-安装-v2ray"><a href="#2-安装-v2ray" class="headerlink" title="2. 安装 v2ray"></a>2. 安装 v2ray</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><h5 id="3-启动v2ray"><a href="#3-启动v2ray" class="headerlink" title="3. 启动v2ray"></a>3. 启动v2ray</h5><p>使用以下命令启动v2ray。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start v2ray</span><br></pre></td></tr></table></figure></p><p>再使用以下命令检测是否启动成功，如果出现active (running)字样就说明启动成功了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status v2ray</span><br></pre></td></tr></table></figure></p><p>如果上面的命令报错的话，可以尝试以下命令启动，并检测是否启动成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service v2ray start</span><br><span class="line">service v2ray status</span><br></pre></td></tr></table></figure></p><h5 id="4-关闭linux防火墙"><a href="#4-关闭linux防火墙" class="headerlink" title="4. 关闭linux防火墙"></a>4. 关闭linux防火墙</h5><p>因为Linux防火墙可能会阻挡我们去连接v2ray，所以需要关闭它。使用以下三组命令关闭防火墙，你只需要选择其中的一组来执行即可，如果报错，才需要去执行下一组的命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"> </span><br><span class="line">servcie iptables stop</span><br><span class="line">chkconfig iptables off</span><br><span class="line"> </span><br><span class="line">ufw disable</span><br></pre></td></tr></table></figure></p><h5 id="5-安装bbr加速tcp"><a href="#5-安装bbr加速tcp" class="headerlink" title="5. 安装bbr加速tcp"></a>5. 安装bbr加速tcp</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/sprov065/blog/raw/master/bbr.sh &amp;&amp; bash bbr.sh</span><br></pre></td></tr></table></figure><p>安装完成，提示是否重启系统，输入y，并回车，重启系统，如果不重启的话bbr是不会生效的。<br>使用下面的命令查看是否启用了bbr<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure></p><p>如果返回的结果出现了tcp_bbr字样那说明已经启用了，可以用了。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="1-服务器端配置"><a href="#1-服务器端配置" class="headerlink" title="1. 服务器端配置"></a>1. 服务器端配置</h5><p>调用 <code>usr/bin/v2ray/v2ctl uui</code>d 命令随机生成一个 id ，下面填写要用</p><p>编辑config文件, <code>vim /etc/v2ray/config.json</code>，在 <strong>inbounds</strong> 节点下增加一个对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>:&#123;</span><br><span class="line">    <span class="attr">"clients"</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>:<span class="string">"这里填写生成的id"</span>,</span><br><span class="line">        <span class="attr">"alterId"</span>:<span class="number">64</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"protocol"</span>:<span class="string">"vmess"</span>,</span><br><span class="line">  <span class="attr">"port"</span>:<span class="number">80</span>,</span><br><span class="line">  <span class="attr">"streamSettings"</span>:&#123;</span><br><span class="line">    <span class="attr">"wsSettings"</span>:&#123;</span><br><span class="line">      <span class="attr">"path"</span>:<span class="string">"/"</span>,</span><br><span class="line">      <span class="attr">"headers"</span>:&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"network"</span>:<span class="string">"ws"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完如下图<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/config.jpg" alt="config"></p><p>重启v2ray<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart v2ray</span><br></pre></td></tr></table></figure></p><p>查看状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status v2ray</span><br></pre></td></tr></table></figure></p><p>如果其中有filed提示，仔细检查config文件是否配置正确。</p><h5 id="2-客户端配置"><a href="#2-客户端配置" class="headerlink" title="2. 客户端配置"></a>2. 客户端配置</h5><p><strong> 客户端下载 </strong><br>V2RayW(windows):<a href="https://github.com/Cenmrev/V2RayW/releases" target="_blank" rel="noopener">github</a><br>V2RayX(macos):<a href="https://github.com/Cenmrev/V2RayX/releases" target="_blank" rel="noopener">github</a></p><p><strong> 客户端配置 </strong><br>众多的客户端我就不一一演示了，基本上大同小异，这里就以 Windows 客户端 v2rayN 来说明一下配置要点：</p><ul><li>地址一定要填域名，并且这个域名要解析到 v2ray 服务器的 IP，开启橘色云朵</li><li>传输协议选择 ws，有些客户端叫做 WebSocket，是一样的</li><li>路径一定要和服务端的一模一样，错了就连不上</li><li>其余的都是常规配置，这里不再说明<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/client.jpg" alt="client"></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/client-2.png" alt="client-2"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>选择pac模式，load core。</p><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/client-3.png" alt="client-3"></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>以上就是使用 CDN + v2ray 的代理方式的全部教程了，内容比较多，对于新手来说可能会比较复杂，如果你遇到了难以解决的问题，可以在评论区留言，我会尽量给出解决方案，祝你搭建成功</p><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><blockquote><p><a href="https://blog.sprov.xyz/2019/03/11/cdn-v2ray-safe-proxy/#CDN" target="_blank" rel="noopener">拯救被墙的IP，CDN + v2ray，安全的科学上网方法</a><br><a href="https://www.v2ray.com/" target="_blank" rel="noopener">v2ray官网</a></p></blockquote>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2019/06/12/solve-ban-ip/#disqus_thread</comments>
    </item>
    
    <item>
      <title>这里是中国</title>
      <link>https://ruicky.github.io/2019/05/29/china-map/</link>
      <guid>https://ruicky.github.io/2019/05/29/china-map/</guid>
      <pubDate>Wed, 29 May 2019 02:21:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/29/china-map/0.png&quot; alt=&quot;header&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/29/china-map/0.png" alt="header"></p><a id="more"></a><iframe src="https://geek-rui.github.io/static-page/china-map/map.html" width="100%" height="1000" frameborder="0" scrolling="no" allowfullscreen></iframe><p>这里按照中国地图的省份，收集了很多相关的城市介绍，以及一分钟看懂中国。<br>希望你们能够喜欢。</p>]]></content:encoded>
      
      <comments>https://ruicky.github.io/2019/05/29/china-map/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
