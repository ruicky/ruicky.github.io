<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018年年终总结</title>
    <url>/2019/01/10/2018-report/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/0.png" alt="0"></p>
<a id="more"></a>
<p>  2019 已至，总感觉，不梳理一下 2018 ，就觉得这一年没过一样，为了不虚度光阴，并自省，顾有了此文。</p>
<p>  1月份，寒冷已至，那夜冬夜去接她回家。那时她还在优胜，生活作息时间跟我完全相反。那时候的王者荣耀，黄忠的大还没有改版，地蹲还是可以5杀。那时的小沙河水库已经结冰，跟猴子蛋蛋还能愉快的滑冰。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/1-1.jpeg" alt="1-1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/1-2.jpeg" alt="1-2"></p>
<p>  2月份，耗费了好几年的证书下来了，拿到了沉甸甸的档案袋。她说我的头发她可以剪，就真的操刀开始了，结果么，你猜。’这个时间了，又开始过年的迁徙，从北京到山西。过完年，安排了一场西安的家庭旅行。带着忙碌了一年的父母，出来走走看看。大雁塔，大唐不夜城，大唐芙蓉园，鼓楼，都留下我们的足迹。返回北京的时候，我跟她一起看了一场电影-《红海行动》，血腥场面让她一度受不了。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/2-1.jpeg" alt="2-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/2-2.jpeg" alt="2-1"></p>
<p>  3月份，快速的一个月，上班的一个月。折腾折腾树莓派影音播放，拆拆电脑主机，卖卖零件。跟着朋友去软件园拍拍照片，体验一把摄影师的感觉。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/3-1.jpeg" alt="3-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/3-2.jpeg" alt="3-2"></p>
<p>  4月份，这个月的主题，开始变成了装修，回了家，定了地板，看了各种风格。这个月也是工作的转折点，换了工作，来到现在的单位。对了，家里那台打印机，也被我闲鱼给卖了，来来回回修整好几次。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/4-1.jpeg" alt="4-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/4-2.jpeg" alt="4-2"></p>
<p>  5月份，跟猴子他们一起组了一场自驾游。当然车是租的，去了延庆，看了很多美景，也放松了紧绷的心。新办的身份证也下来了，看着对比照，发现年龄真的大了，这一届属猴的同志们，如今也是到了换证的年龄了。来到新公司，认识新的人，熟悉新的工作方式。去了宜家，看了家具，想想未来家的样子。月底的时候，跟着她，一起回她的老家，见见她的父母，看看她成长的城市。第一次见父母的紧张，第一次感觉生活离自己那么近。感谢她为了我，跟家里说的好话。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/5-1.jpeg" alt="5-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/5-2.jpeg" alt="5-2"></p>
<p>  6月份，吃着公司发的儿童节零食大礼包，不小了，不能装嫩了。这个月生日了，亲爱的她给了我买了榴莲蛋糕，看着吃不动的蛋糕，我俩笑了。中旬跟着贺贺一起去了北戴河，这是一场海边的旅游，也是一场跑错场地看日出的浪漫之旅。这个月，我们搬家了，换了新地方，置办了冰箱。这个月也是悲催的一个月，她开始治脚，我晚上骑车的时候摔了一跤，腿摔倒不好走路。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/6-1.jpeg" alt="6-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/6-2.jpeg" alt="6-2"></p>
<p>  7月份，回了老家，定了装修公司，负责后半部分的装修。公司团建去了张家口的大草原，吃到了烤全羊，为了团队的荣誉，拔河蹭破了手。当然，这个月也把折磨了很长时间的智齿给拔了。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/7-1.jpeg" alt="7-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/7-2.jpeg" alt="7-2"></p>
<p>  8月份，买了黑加的手环，腿脚也慢慢好了。骑着小电驴，周末出去觅食，也发现了“夺命小串”这个美食。给自己的手机换了一个骚包的红色。二去宜家，买了些家用品。月底，带着她去了我家，看了我父母，看我长大的地方。心里满满的全是幸福。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/8-1.jpeg" alt="8-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/8-2.jpeg" alt="8-2"></p>
<p>  9月份，挑了个好天，去水库拍了照片。去了国家博物馆匆匆一撇。领了新MAC笔记本。我的她又长大了一岁，生日快乐，我永远十八岁的姑娘。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/9-1.jpeg" alt="9-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/9-2.jpeg" alt="9-2"></p>
<p>  10月份，国庆七天假期开始了。去了云南，吃了美食，看了风景。总有一些美景在路上，总有一些人在身旁，大概就是这个感觉吧。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/10-1.jpeg" alt="10-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/10-2.jpeg" alt="10-2"></p>
<p>  11月份，抢夺方向盘造成人员死亡成了热搜，英语考试成了我的主旋律，当然，雾霾也开启了冬天模式。买了个温湿度计来看家的温度的变化。湿度温度双低成了常规。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/11-1.jpeg" alt="11-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/11-2.jpeg" alt="11-2"></p>
<p>  12月份，寒冷的冬天真的来临了。微信也出到了v7.0.0了，增加了小视频UI的变化。冬至跟几个好友，一起包个饺子，一起玩一玩。周末打升级(打牌)成了我们的日常。在最后一天的元旦，一起吃个饭，嗨个歌，为这一年say bye bye。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/12-1.jpeg" alt="12-1"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/01/10/2018-report/12-2.jpeg" alt="12-2"></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>云南之行[2018]</title>
    <url>/2019/05/27/2018-yunnan/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/云南头图.jpg" alt="云南头图"><br><a id="more"></a></p>
<h1 id="云南之行-2018"><a href="#云南之行-2018" class="headerlink" title="云南之行[2018]"></a>云南之行[2018]</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><center>这里气候温润，物种丰富</center>

<center>这里群山叠翠，江河纵横</center>

<center>这里有上苍恩赐的阳光和蓝天</center>

<center>这里有四季美奂的山川和风景</center>



<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/前言1.jpg" alt="前言1.jpg"></p>
<center>在这里，亲近历史脉搏</center>

<center>在这里，体验别样生活</center>

<center>在这里，品味民族风情</center>

<center><b>这里，是七彩云南</b></center>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>  耳朵里响起“彩云之南 我心的方向 …”，还未到十一假期，心却已飞驰。2018 准备去云南看一看。前期准备，也比较简单，除了带的衣物外，就是准备行程，以及住宿。在这里，非常感谢我的女朋友，整个都是她安排的，辛苦了！</p>
<p>  行程安排，采用的是当地<strong>自驾</strong>(在昆明租车自己开着游)，之前做功课的时候，7天的行程，如果是坐动车，大巴等公共交通工具，时间不太自由，而且不确定性因素太多。</p>
<p>  人员四名，我跟我女朋友还有，朋友跟他媳妇。</p>
<p>  如果你也是按照这个行程走的话，在这里给大家安利一个 好用的自驾安排的工具 <strong>高德-路书</strong>，具体的参考这个<a href>自驾行程怎么管理？一篇就够了</a> </p>
<p>  这是我的 清单，请君参考</p>
<blockquote>
<ul>
<li>[ ] 钱包(现金，身份证，驾驶证，银行卡)</li>
<li>[ ] 换洗衣物</li>
<li>[ ] 棉服一套 (PS:为玉龙雪山准备)</li>
<li>[ ] 隔脏床睡袋 (PS:不太放心宾馆的卫生情况)</li>
<li>[ ] 相机</li>
<li>[ ] 手机充电器，充电宝</li>
<li>[ ] 常用药物，冲可贴，拉肚子药</li>
<li>[ ] 洗漱用品</li>
<li>[ ] 纸品</li>
<li>[ ] 雨伞</li>
<li>[ ] 旅途三宝 (U型枕， 瓜子，水杯)  </li>
</ul>
</blockquote>
<p>接下来就是这次玩的过程，与其说是游记，不如说是流水账。</p>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>Day1: 北京 —&gt; 昆明</p>
<p>Day2: 昆明-石林</p>
<p>Day3: 大理-洱海</p>
<p>Day4: 丽江-虎跳峡-茶马古道</p>
<p>Day5: 丽江- 玉龙雪山</p>
<p>Day6: 大理-天龙八部影视城</p>
<p>Day7: 昆明-滇池</p>
<p>Day8: 昆明 —&gt; 北京</p>
<h2 id="9-30-Day1-北京-—-gt-昆明"><a href="#9-30-Day1-北京-—-gt-昆明" class="headerlink" title="9-30 Day1: 北京 —&gt; 昆明"></a>9-30 Day1: 北京 —&gt; 昆明</h2><h3 id="8-00-–-19-00"><a href="#8-00-–-19-00" class="headerlink" title="8:00  –  19:00"></a>8:00  –  19:00</h3><p> 🚄 G403(北京西–&gt;昆明南) 路上的11个小时。注意，有晚点的情况哦，这个就晚了半个小时。</p>
<h3 id="19-00-–-20-00"><a href="#19-00-–-20-00" class="headerlink" title="19:00  –  20:00"></a>19:00  –  20:00</h3><p> 🚖 从高铁站打车到住宿的地方，但是高铁站据说是17年才开通使用的，所以有半边广场还没有建全，出租车相对比较少，等了大概20分钟左右才等到。</p>
<h3 id="20-00-–-21-00"><a href="#20-00-–-21-00" class="headerlink" title="20:00 – 21:00"></a>20:00 – 21:00</h3><p> 在宾馆放下行李，就继续打车去了这边(昆明呈贡区)排名第一的<strong>老滇山寨</strong></p>
<p>  他这边的菜还是不错的云南菜，🐟思茅酸汤鱼片，芭蕉叶烤肉，🍍菠萝饭，铁板烤豆腐。</p>
<p>  鱼片很鲜美，味道有些冬阴功汤的味道，女士们比较喜欢，烤肉，看着就流口水，蘸酱吃，味道更好，菠萝饭跟在北京云海肴吃的不一样，北京的是白色粳米，这边的更像八宝粥那种颜色，跟菠萝一起伴着的，甜口的，量还比较大。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/老滇山寨.jpg" alt="老滇山寨"></p>
<h2 id="10-1-Day2-昆明-石林"><a href="#10-1-Day2-昆明-石林" class="headerlink" title="10-1 Day2: 昆明-石林"></a>10-1 Day2: 昆明-石林</h2><p> <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/石林.jpg" alt="石林"></p>
<h3 id="7-00-–-8-30"><a href="#7-00-–-8-30" class="headerlink" title="7:00  –  8:30"></a>7:00  –  8:30</h3><p> 早上跟猴子(我那个朋友) 起了个大早，出来骑着“哈喽单车”(支付宝里那个)，去昆明南站周边的那个神州租车点，办理取车，不得不说的是，现在真的是方便多了，网上预订好后，直接到现场，自己都可以用手机自助取车了。取完车，外面也开始下雨了，昆明的天，真是多变。</p>
<h3 id="8-30-–-10-30"><a href="#8-30-–-10-30" class="headerlink" title="8:30  –  10:30"></a>8:30  –  10:30</h3><p>  开了2个小时到达目的地，一路上阴天，下雨，再加上有的地方全是红土。也别有一番情调。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/路上.jpg" alt="路上"></p>
<h3 id="10-30-–-16-00"><a href="#10-30-–-16-00" class="headerlink" title="10:30  –  16:00"></a>10:30  –  16:00</h3><p>  到了地方，去游客中心去买票，有很多的自助买票机，很方便，可以扫码支付。</p>
<p> 💰门票价格 <code>130</code> </p>
<p> 💰电瓶车价格 <code>25</code></p>
<p> 建议：由于入口处到园区 还有一大段距离，<strong>强烈建议购买电瓶车票</strong>，要不走过去就很累了</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/石林门票.jpg" alt="石林"></p>
<p>  石林 风景区，喀斯特地貌，5A景区，被誉为“天下第一奇观”。在这里，只要发挥你的想象力，你就能看到千奇百怪的世界。</p>
<p>  从园区往里走，就会看到一个胡–石林湖， 据说这个是根据周恩来总理建议而修建的。当年周总看到这里说”有山就有水，有水就不枯燥了“。 再往前面走就看到 世界自然遗产的标志石。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/石湖.jpg" alt="石湖"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/世界自然遗产标志石.jpg" alt="世界自然遗产标志石"></p>
<p>石林 主要分为：小石林，大石林，石林长湖，步哨山，李子园箐，奇风洞，石林芝云洞。 由于时间的关系，只看了大小石林。</p>
<p> <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/石林景区.jpg" alt="石林景区"></p>
<p>  在景区里，有很多租民族特色服装的，10元左右，先穿，然后还衣服的时候交钱。推荐漂亮的小姐姐们可以租一件，拍出来的照片比较好看。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/民族服饰.jpg" alt="民族服饰"></p>
<p>  在这里给大家科普一个小知识，我也是到了那里才知道的：“阿诗玛”和“阿黑哥”是彝族撒尼姑娘和小伙的象征， 石林景区正好在彝族区，所以女的都是 阿诗玛，男的全是阿黑哥~</p>
<h3 id="16-00-–-16-40"><a href="#16-00-–-16-40" class="headerlink" title="16:00  –  16:40"></a>16:00  –  16:40</h3><p>  游览完，已经接近下午，虽然中午吃了点自己带的零食之类的，但是不顶饿，这个点已经都饿了，就在景区入口的 桥香缘过桥米线 那里吃了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/桥香园过桥米线.jpg" alt="桥香园过桥米线"></p>
<p> 玩的过程中还有个小插曲，原先定于晚上的住宿由于之前的沟通问题，没有预留下，只能现找，好在跟整体的行程不冲突，就在路途上找了一家快捷酒店。 </p>
<h3 id="16-40-–-21-00"><a href="#16-40-–-21-00" class="headerlink" title="16:40  –  21:00"></a>16:40  –  21:00</h3><p>  从景区出来，交完停车费，开始去楚雄。全程高速，路上堵了2次车，都是行车道往超车道超车发生的，出门在外的安全最重要啊，不要强行加速跟超车啊。到了酒店已经是晚上的8点多了。办了入住，直接奔向据说这里的美食排行榜第一名的“彝府轩土菜馆”。 </p>
<p>  他家的炭烧肉，菌王手撕鸡，酸辣藕片很好吃。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/土家菜馆.jpg" alt="土家菜馆"></p>
<h2 id="10-2-Day3-大理-洱海"><a href="#10-2-Day3-大理-洱海" class="headerlink" title="10-2 Day3: 大理-洱海"></a>10-2 Day3: 大理-洱海</h2><h2 id="10-3-Day4-丽江-虎跳峡-茶马古道"><a href="#10-3-Day4-丽江-虎跳峡-茶马古道" class="headerlink" title="10-3 Day4: 丽江-虎跳峡-茶马古道"></a>10-3 Day4: 丽江-虎跳峡-茶马古道</h2><p> <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/虎跳峡.jpg" alt="虎跳峡"></p>
<h2 id="10-4-Day5-丽江-玉龙雪山"><a href="#10-4-Day5-丽江-玉龙雪山" class="headerlink" title="10-4 Day5: 丽江- 玉龙雪山"></a>10-4 Day5: 丽江- 玉龙雪山</h2><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/27/2018-yunnan/玉龙雪山.jpg" alt="玉龙雪山"></p>
<h2 id="10-5-Day6-大理-天龙八部影视城"><a href="#10-5-Day6-大理-天龙八部影视城" class="headerlink" title="10-5 Day6: 大理-天龙八部影视城"></a>10-5 Day6: 大理-天龙八部影视城</h2><h2 id="10-6-Day7-昆明-滇池"><a href="#10-6-Day7-昆明-滇池" class="headerlink" title="10-6 Day7: 昆明-滇池"></a>10-6 Day7: 昆明-滇池</h2><p>当初冬的霜露飘落五百里滇池</p>
<p>西伯利亚的红嘴鸥也如约而至</p>
<p>时而在碧水蓝天中翱翔</p>
<p>时而展翅于游人眼前</p>
<h2 id="10-7-Day8-昆明-—-gt-北京"><a href="#10-7-Day8-昆明-—-gt-北京" class="headerlink" title="10-7 Day8: 昆明 —&gt; 北京"></a>10-7 Day8: 昆明 —&gt; 北京</h2><h2 id="花费清单"><a href="#花费清单" class="headerlink" title="花费清单"></a>花费清单</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  这是一篇烂尾的文章，可是我自己现在却没有能力写下去了，时间的久远，已经让我无法记得更多的细节。<br>  同时，通过这件事，自己以后如果有了好的选题，就一定要及时的记录！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mp.weixin.qq.com/s/3wRsNBe7yDQj44Y5Xhnb1w" target="_blank" rel="noopener">这里是云南！</a></p>
<p><a href="https://blog.csdn.net/so_geili/article/details/53028039" target="_blank" rel="noopener">CSDN-markdown语法——缩进、图片居中、字体、字号与颜色</a> </p>
]]></content>
  </entry>
  <entry>
    <title>Nodejs 对接支付宝获取用户信息(By-Ruicky)</title>
    <url>/2016/10/26/Nodejs%20%E5%AF%B9%E6%8E%A5%E6%94%AF%E4%BB%98%E5%AE%9D/</url>
    <content><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>业务需要，需要与支付宝对接，但是官方的只提供了C#，PHP，Java的版本，没有node版本的对接，网上找资料找了很多，但是却没有完整的示例。</p>
<a id="more"></a>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol>
<li><p>已有nodejs基本知识</p>
</li>
<li><p>已开通支付宝相对应的服务</p>
</li>
<li><p>是基于nodejs ＋ express</p>
</li>
<li><p>支付宝官方API: <a href="https://doc.open.alipay.com/doc2/detail.htm?treeId=115&amp;articleId=104114&amp;docType=1" target="_blank" rel="noopener">点击跳转</a></p>
</li>
</ol>
<h2 id="1-URL拼接与引导授权"><a href="#1-URL拼接与引导授权" class="headerlink" title="1.URL拼接与引导授权"></a>1.URL拼接与引导授权</h2><p>官方对于这边的第三方授权的示例写的还是比较明白的，其中有两个参数，一个是app_id为开发者应用AppId，另一个为redirect_uri回调页面，两个都是必填项。</p>
<h2 id="2-获取app-auth-code"><a href="#2-获取app-auth-code" class="headerlink" title="2. 获取app_auth_code"></a>2. 获取app_auth_code</h2><p>当商户授权成功后，会跳转到开发者定义的回掉页面。</p>
<h2 id="3-使用app-auth-code换取app-auth-token"><a href="#3-使用app-auth-code换取app-auth-token" class="headerlink" title="3. 使用app_auth_code换取app_auth_token"></a>3. 使用app_auth_code换取app_auth_token</h2><p>根据返回的数据进行加密，post到支付宝提供的接口，来获取到用户的userid.</p>
<h1 id="回顾总结"><a href="#回顾总结" class="headerlink" title="回顾总结"></a>回顾总结</h1><p>你可能会说，作者你个大骗子，丫的说这么多，官方文档不都有么？ 重新说一遍有啥用啊，我要的是实现。客观，莫急啊，好菜永远在最后啦。 为了能够使自己的东西能够有所价值，就维护到了<a href="https://github.com/ruicky/node_zhifubao" target="_blank" rel="noopener"><strong>Github</strong></a>上了，上面全是干货.</p>
<p>最后一句话总结：配置相关数据(支付宝上的账号信息[回调地址，秘钥])—-&gt;跳转支付宝授权—-&gt;回调用code换userid—-&gt;验钥实现程序</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>alipay</tag>
      </tags>
  </entry>
  <entry>
    <title>百度网盘破解下载速度，MAC版</title>
    <url>/2017/11/09/baidupan/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/11/09/baidupan/0.png" alt="0"><br><a id="more"></a></p>
<h1 id="百度网盘破解下载速度，MAC版"><a href="#百度网盘破解下载速度，MAC版" class="headerlink" title="百度网盘破解下载速度，MAC版"></a>百度网盘破解下载速度，MAC版</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>你是不是跟我一样 有过这样的经历，别人给你分享一个文件，需要在百度网盘下载，看着那个龟速的下载速度，你是不是也心急如焚，这位客官说了：“你可以开个<strong>会员</strong>啊？！”，老铁，不是所有的人都是<strong>“贵族”</strong>啊。 </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/11/09/baidupan/1.png" alt="1"></p>
<p>为了给大家省点银子，给大家分享一个方法。可以突破官方定义的限速哦。通过Chrome插件：网盘助手，和一个MAC OS下开源的软件 Aira2GUI,配合起来就能免费高速的下载云盘里的（包括别人分享出来的）任何文件。当然，你网速本身就很慢，那就没办法了。</p>
<h2 id="网盘助手"><a href="#网盘助手" class="headerlink" title="网盘助手"></a>网盘助手</h2><blockquote>
<p>网盘助手是一个开源的Chrome 脚本. <a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="noopener">acgotaku</a> 的github分享的，可以去给个star哦~</p>
</blockquote>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>  因为你知道的某些原因，这个插件已经从Chrome应用商店下架了，所以你需要点击这里下载。<br> 下载地址： <a href="https://github.com/acgotaku/BaiduExporter/blob/master/chrome.crx?raw=true" target="_blank" rel="noopener">点击下载</a>  (<a href="https://pan.baidu.com/s/1nvQh9Nz" target="_blank" rel="noopener">备用下载</a>)</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>打开Chrome浏览器的扩展程序管理窗口，点击<code>加载已解压的扩展程序</code>（确保开发者模式已经打开），在弹出的文件浏览界面中选中刚才下载的插件目录里的<code>chrome</code>目录后，点击<code>选择</code>，插件就安装成功了。如下图：<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/11/09/baidupan/2.png" alt="2"></p>
<p>安装成功后是这样的，确认已<code>启用</code>被勾选：<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/11/09/baidupan/3.png" alt="3"></p>
<h2 id="Aria2GUI"><a href="#Aria2GUI" class="headerlink" title="Aria2GUI"></a>Aria2GUI</h2><blockquote>
<p>这是一位Github上ID为 <a href="https://github.com/yangshun1029" target="_blank" rel="noopener">yangshun1029</a> 的程序员制作的软件，软代码已经开放，目前只有Mac OS下的客户端。</p>
</blockquote>
<h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p>下载最新版的 <a href="https://github.com/yangshun1029/aria2gui/releases" target="_blank" rel="noopener">release</a><br>(<a href="https://pan.baidu.com/s/1jInDVAA" target="_blank" rel="noopener">备用下载</a>)</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>将下载后的文件解压，直接得到Aria2GUI.app 拖拽到应用程序目录即算安装成功。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>准备工作做好了， 让我们来使用它吧！</p>
<ol>
<li>首先，打开上一步下载好的Aria2GUI，确保这个应用处于运行状态。<strong>重要</strong></li>
<li>在Chrome 中打开百度盘的页面，选中你要下载的文件之后，在顶部工具条中点击<code>导出下载</code>，（如果没有看到“导出下载”按钮，说明插件的状态有问题，可能是：安装成功、没有启用、插件失效等，重启一下浏览器，刷新界面重试一下）。演示如下图:<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/11/09/baidupan/4.png" alt="4"><br>如果成功界面上会弹出一个提示，这时候你可以去Aria2GUI应用内查看文件已经开始下载了<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/11/09/baidupan/5.png" alt="5"><br>非常简洁的界面，速度贼快有没有。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/11/09/baidupan/6.png" alt="6"></li>
</ol>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul>
<li>文件默认下载目录在<code>Download</code>目录下。</li>
<li>下载别人分享的文件也是同样的操作步骤，网页的界面上找到<code>导出下载</code>并点击</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p><a href="http://www.jianshu.com/p/a46479de9d13" target="_blank" rel="noopener">Chrome插件：网盘助手简介</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>百度盘</tag>
      </tags>
  </entry>
  <entry>
    <title>使用搬瓦工bandwagonhost VPS安装 Shadowsocks Server(By-Ruicky)</title>
    <url>/2017/06/30/bandwagonhost/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/06/30/bandwagonhost/0.jpg" alt="0.png"></p>
<a id="more"></a>
<h1 id="使用搬瓦工bandwagonhost-VPS安装-Shadowsocks-Server"><a href="#使用搬瓦工bandwagonhost-VPS安装-Shadowsocks-Server" class="headerlink" title="使用搬瓦工bandwagonhost VPS安装 Shadowsocks Server"></a>使用搬瓦工bandwagonhost VPS安装 Shadowsocks Server</h1><h2 id="推荐购买操作。如下："><a href="#推荐购买操作。如下：" class="headerlink" title="推荐购买操作。如下："></a>推荐购买操作。如下：</h2><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/06/30/bandwagonhost/1.png" alt="只看购买即可"></p>
<h2 id="推荐一键安装。如下："><a href="#推荐一键安装。如下：" class="headerlink" title="推荐一键安装。如下："></a>推荐一键安装。如下：</h2><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/06/30/bandwagonhost/2.png" alt="只看安装即可"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="http://blog.csdn.net/win_turn/article/details/51559867" target="_blank" rel="noopener">使用搬瓦工bandwagonhost VPS安装Shadowsocks Server</a><br><a href="http://www.jianshu.com/p/4571f870747c" target="_blank" rel="noopener">获取Bandwagonhost优惠码方法及快速搭建SS和PPTP方法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>bandwagonhost</tag>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>云BUG管理分析（By-Ruicky）</title>
    <url>/2017/05/09/bug-tools/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/09/bug-tools/1.png" alt="1.png"><br><a id="more"></a></p>
<h1 id="云BUG管理分析（By-Ruicky）"><a href="#云BUG管理分析（By-Ruicky）" class="headerlink" title="云BUG管理分析（By-Ruicky）"></a>云BUG管理分析（By-Ruicky）</h1><p>我收集的bug 管理 ，都是云管理。</p>
<ol>
<li><a href="https://bug.pgyer.com/" target="_blank" rel="noopener">https://bug.pgyer.com/</a> (用最优雅的方式追踪 Bug)  蒲公英云 大厂支持</li>
<li><a href="https://www.bugtags.com/" target="_blank" rel="noopener">https://www.bugtags.com/</a> (移动时代首选Bug 管理系统) 偏向手机APP</li>
<li><a href="http://www.delbug.cn/" target="_blank" rel="noopener">http://www.delbug.cn/</a> (云端bug管理工具) 新起之秀</li>
<li><a href="https://www.zentaopm.com/" target="_blank" rel="noopener">https://www.zentaopm.com/</a> （云禅道）元老级别，付费</li>
</ol>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>异地上牌指南（山西闻喜）</title>
    <url>/2019/02/14/car-license-tag/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/02/14/car-license-tag/0.png" alt="0"></p>
<a id="more"></a>
<h1 id="异地上牌指南（山西闻喜）"><a href="#异地上牌指南（山西闻喜）" class="headerlink" title="异地上牌指南（山西闻喜）"></a>异地上牌指南（山西闻喜）</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  从北京买了车以后，苦逼的没有指标上京牌，只能上一个老家的牌。这篇文章也许能够帮你在异地购车回山西闻喜上牌一些指导。</p>
<h2 id="1-购置税"><a href="#1-购置税" class="headerlink" title="1. 购置税"></a>1. 购置税</h2><p>  购置税是买车必须上的。<br>  地点：中国税务局  (也就是国税局，在闻喜县广播电视台对面)<br>  办理时间：周一到周五 具体时间看下图<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/02/14/car-license-tag/1.png" alt="办公时间"><br>  注意事项：进去以后，不用取号，直接去大厅的最左侧排队办理就好，前提是准备好材料（我这个是卖车的时候销售都给我备好了）买车的发票+申请表+身份证复印件+银行卡。</p>
<p>  交完以后会给你一个完税证明<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/02/14/car-license-tag/2.png" alt="完税证明"></p>
<h2 id="2-交强险"><a href="#2-交强险" class="headerlink" title="2. 交强险"></a>2. 交强险</h2><p>  在车办理上牌的时候，需要车的交强险，所以必须提前交完。我选择的是中国平安的。交了850，这个跟车的排量有关。<br>  地点：中国平安财产保险股份有限公司(闻喜支公司)</p>
<h2 id="3-验车"><a href="#3-验车" class="headerlink" title="3. 验车"></a>3. 验车</h2><p>  闻喜县的验车跟办业务的地方在一个地方，都在交警大队，就是在城西南路那里的那个。<br>  地点：闻喜县公安局交通警察大队<br>  流程：把车开到那个大门门口的右侧地方，然后打开发动机盖，把三脚架，反光衣，灭火器放到车的旁边。三脚架要打开，然后把副驾驶的座椅后移，漏出下面的车辆识别码，带着材料去旁边的小屋。带的材料有：车辆照片2张，身份证，身份证复印件，申请表，车辆识别码2张，交强险副本，完税证明副本。这个刚进门有个人 会帮你把这些东西给贴到申请表上。然后拿着整理好的材料，外面有人负责验车，给人家。人家验完以后，会拿到里面给你签字，然后在小屋里等着，会有一个人,给你把信息 录入系统，办完后，会让你进大院里面1楼右拐服务大厅办理剩下的。</p>
<h2 id="4-选号"><a href="#4-选号" class="headerlink" title="4. 选号"></a>4. 选号</h2><p>  拿着资料，进1楼右拐的服务大厅，取个号，等着叫号去办理业务。这一步基本上不需要操作什么，就是需要<strong>本人即车主去</strong>，因为要拍照。号码是50选1，费用是120。可微信支付。全部弄完后。会给你个大绿本（机动车登记证书）跟 行驶证。号码牌是选择的邮寄，不知道有没有当场取的选项，需要自己去问一下。我这个情况是年底都是邮寄。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/02/14/car-license-tag/3.png" alt="机动车登记证书"></p>
<h2 id="5-上牌"><a href="#5-上牌" class="headerlink" title="5. 上牌"></a>5. 上牌</h2><p>  大概不到3天的时间，号码牌就会发到你手里。然后就拿一字平起上到车上就ok了。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/02/14/car-license-tag/4.png" alt="车牌"></p>
<h2 id="6-贴标签-年检标志和交强险"><a href="#6-贴标签-年检标志和交强险" class="headerlink" title="6. 贴标签(年检标志和交强险)"></a>6. 贴标签(年检标志和交强险)</h2><p>  交完交强险后，会有一个车标，需将其贴在副驾驶上方的挡风玻璃上。若不贴，即使车主购买了交强险，警察也会视其为未缴纳交强险，如果不能够及时拿出有效证明，车辆就会被扣留。若证明已缴纳交强险，但没有粘贴车标，则会对<strong>驾驶员进行1分+200元的处罚。</strong><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/02/14/car-license-tag/5.png" alt="车险标志"></p>
<p>  以上就是我的上牌的全部过程。有啥疑问可在留言区留言。看到就会帮忙解答。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>上牌</tag>
        <tag>汽车</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo插上CDN的翅膀</title>
    <url>/2018/12/05/cdn-hexo/</url>
    <content><![CDATA[<a id="more"></a>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/12/05/cdn-hexo/1.png" alt="1"></p>
]]></content>
  </entry>
  <entry>
    <title>在Centos 7 中，从零搭建Node.js环境(By-Ruicky)</title>
    <url>/2017/05/08/centos7-node/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/08/centos7-node/1.jpg" alt="1.jpg"><br><a id="more"></a></p>
<h1 id="常用装机顺序"><a href="#常用装机顺序" class="headerlink" title="常用装机顺序"></a>常用装机顺序</h1><ol>
<li>更新本地最新包：<code>yum update -y</code></li>
<li>安装常用工具包: <code>yum groupinstall &#39;Development Tools&#39; -y</code></li>
<li>安装Git<ul>
<li>安装依赖包：<code>yum install gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel -y</code></li>
<li><code>yum install curl-devel -y</code></li>
<li>从GitHub上下载源码：<code>wget https://github.com/git/git/archive/v2.12.2.tar.gz -O git.tar.gz</code></li>
<li>解压文件：<code>tar -zxf git.tar.gz</code></li>
<li>切换目录：<code>cd git-*</code></li>
<li>检查:<code>make configure</code></li>
<li>加前缀：<code>./configure --prefix=/usr/local</code></li>
<li>安装：<code>make install</code></li>
<li>记住密码: <code>git config --global credential.helper cache</code>   <code>git config --global credential.helper &#39;cache --timeout=36000&#39;</code></li>
</ul>
</li>
<li>安装Nginx<ul>
<li>增加nginx仓库:<code>sudo yum install epel-release -y</code></li>
<li>安装nginx：<code>sudo yum install nginx -y</code></li>
<li>启动nginx：<code>sudo systemctl start nginx</code></li>
<li>开机自启：<code>sudo systemctl enable nginx</code></li>
</ul>
</li>
<li>安装Nodejs<ul>
<li><code>curl --silent --location https://rpm.nodesource.com/setup_6.x | bash -</code></li>
<li><code>yum -y install nodejs</code>  </li>
</ul>
</li>
<li>安装cnpm(可选，用来加速安装node包的速度)<ul>
<li><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>  </li>
</ul>
</li>
<li>安装babel<ul>
<li><code>npm install -g babel-cli</code></li>
</ul>
</li>
</ol>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol>
<li>报错：<code>libpng12.so.0: cannot open shared object file...</code><br>解决方法：<code>yum install libpng12.x86_64 -y</code></li>
<li>git clone 项目时候 报错：<code>Unable to find remote helper for &#39;https&#39;</code><br>解决方法：<code>yum install curl-devel</code></li>
</ol>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote>
<p>  <a href="https://www.digitalocean.com/community/tutorials/how-to-install-git-on-centos-7" target="_blank" rel="noopener"> How To Install Git on CentOS 7</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7" target="_blank" rel="noopener">How To Install Nginx on CentOS 7</a><br><a href="https://nodejs.org/en/download/package-manager/#enterprise-linux-and-fedora" target="_blank" rel="noopener">Installing Node.js via package manager</a><br><a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM 镜像</a><br><a href="http://stackoverflow.com/questions/22578827/libpng12-so-0-cannot-open-shared-object-file-genymotion" target="_blank" rel="noopener">libpng12.so.0: cannot open shared object file - genymotion</a><br><a href="http://stackoverflow.com/questions/8329485/unable-to-find-remote-helper-for-https-during-git-clone" target="_blank" rel="noopener">“Unable to find remote helper for ‘https’” during git clone</a><br><a href="https://help.github.com/articles/caching-your-github-password-in-git/#platform-linux" target="_blank" rel="noopener">Caching your GitHub password in Git</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>centos7</tag>
        <tag>nginx</tag>
        <tag>linux</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>这里是中国</title>
    <url>/2019/05/29/china-map/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/05/29/china-map/0.png" alt="header"></p>
<a id="more"></a>
<iframe src="https://geek-rui.github.io/static-page/china-map/map.html" width="100%" height="1000" frameborder="0" scrolling="no" allowfullscreen></iframe>

<p>这里按照中国地图的省份，收集了很多相关的城市介绍，以及一分钟看懂中国。<br>希望你们能够喜欢。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>china</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用命令整理(By-Ruicky)</title>
    <url>/2017/04/25/command-line/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/25/command-line/1.jpg" alt="1.jpg"><br><a id="more"></a></p>
<p>Linux 常用命令整理(By-Ruicky)</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 在平时，有很多Linux命令 需要操作。但是都是记个大概，自己整理一下，这个文档不定时更新，需要了我就写下来，方便，平时查阅调用。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ul>
<li>在<code>SSH</code>使用<code>rsync</code>同步文件<ul>
<li>从本地同步到远程 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rsync -avz -e ssh /data/wwwroot/shop/upload/ root@120.24.170.210:/data/wwwroot/shop/upload</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>从远程同步到本地<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rsync -avzP -e ssh root@114.215.191.193:/data/wwwroot/shop/upload /data/wwwroot/shop/upload/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>查看Linux内核版本<ul>
<li><code>cat /etc/redhat-release</code> (PS:Centos有效)</li>
</ul>
</li>
<li>找出文件大于800M的，并倒序排列，只显示大小 文件目录<ul>
<li><code>find . -type f -size +800M  -print0 | xargs -0 du -h | sort -nr</code></li>
</ul>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://segmentfault.com/a/1190000007634970" target="_blank" rel="noopener">通过ssh执行rsync来完成同步文件的命令总结</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>commandline</tag>
      </tags>
  </entry>
  <entry>
    <title>Datagrip 连接 Phoenix 教程</title>
    <url>/2019/09/27/datagrip-phoenix/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/0.png" alt="datagrip-phoenix"><br><a id="more"></a></p>
<h1 id="Datagrip-连接-Phoenix-教程"><a href="#Datagrip-连接-Phoenix-教程" class="headerlink" title="Datagrip 连接 Phoenix 教程"></a>Datagrip 连接 Phoenix 教程</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Phoenix 是 Apache 公司出的 构建在HBase之上的关系型数据库层的一个产品。使用 JDBC 驱动可访问。本文也是基于此来连接。</p>
<p>Datagrip 是JetBrains公司推出的管理数据库的产品。小巧万能。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol>
<li>系统: MacOS V10.14.4</li>
<li>Datagrip 2018.2.4</li>
<li>Phoenix 4.14.0</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>从 Phoneix 包中 找到对应的 client 的 jar 包，我这里是 phoenix-4.14.0-HBase-1.2-client.jar。 并拷贝到一个目录备用。</li>
<li>打开 Datagrip<ul>
<li>打开菜单 <code>File--&gt;Data sources...</code> (也可使用 <code>command +;</code>方式打开)</li>
<li>点击左上角的加号，选择 Driver<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/1.jpg" alt="datagrip-1"></li>
<li>输入配置信息<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/2.jpg" alt="datagrip-2"><ul>
<li>Name: Phoenix-Driver (此处填写的是驱动的名称)</li>
<li>Driver Files 中 点击 <code>+</code> 然后 选择 <code>Customer JARs</code> 选择之前准备好的 Phoenix 的 client 的 jar 包</li>
<li>Class 中 选择 <code>org.apache.phoenix.jdbc.PhoenixDriver</code></li>
<li>点解 <code>ok</code>键</li>
</ul>
</li>
<li>输入连接信息<ul>
<li>打开菜单 <code>File--&gt;Data sources...</code> (也可使用 <code>command +;</code>方式打开)</li>
<li>创建新的连接<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/3.jpg" alt="datagrip-3"></li>
<li>输入连接信息<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/27/datagrip-phoenix/4.jpg" alt="datagrip-4"></li>
<li>Name :连接的别称</li>
<li>URL: 连接的地址。<code>eg:jdbc:phoenix:IP:2181</code></li>
<li>点击 <code>Test Connection</code> 按钮</li>
<li>点击 <code>OK</code> 按钮</li>
<li>注意：如果有 User 跟 Password 的话，也要填写。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><blockquote>
<p><a href="https://pan.baidu.com/s/1kfIvg5tjSn5TFX8nIlIxwQ" target="_blank" rel="noopener">phoenix-4.14.0-HBase-1.2-client.jar</a> 提取码: xgad</p>
</blockquote>
<p>以上你就能愉快的在 Datagrip 操作 Phoenix 了。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>datagrip</tag>
        <tag>phoenix</tag>
      </tags>
  </entry>
  <entry>
    <title>清除本地DNS缓存，win/mac/linux (By-Ruicky)</title>
    <url>/2017/05/23/dns-clear/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/23/dns-clear/1.jpg" alt="1.jpg"><br><a id="more"></a></p>
<h3 id="macOS-Sierra-10-12-0"><a href="#macOS-Sierra-10-12-0" class="headerlink" title="macOS Sierra 10.12.0"></a>macOS Sierra 10.12.0</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure>
<h3 id="OSX-10-11-0"><a href="#OSX-10-11-0" class="headerlink" title="OSX 10.11.0"></a>OSX 10.11.0</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure>
<h3 id="OSX-10-10-4"><a href="#OSX-10-10-4" class="headerlink" title="OSX 10.10.4"></a>OSX 10.10.4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure>
<h3 id="OSX-10-10-0-–-10-10-3"><a href="#OSX-10-10-0-–-10-10-3" class="headerlink" title="OSX 10.10.0 – 10.10.3"></a>OSX 10.10.0 – 10.10.3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo discoveryutil mdnsflushcache</span><br></pre></td></tr></table></figure>
<h3 id="OSX-10-9-–-10-8-–-10-7"><a href="#OSX-10-9-–-10-8-–-10-7" class="headerlink" title="OSX 10.9  – 10.8 – 10.7"></a>OSX 10.9  – 10.8 – 10.7</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure>
<h3 id="OSX-10-5-–-10-6"><a href="#OSX-10-5-–-10-6" class="headerlink" title="OSX 10.5 – 10.6"></a>OSX 10.5 – 10.6</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dscacheutil -flushcache</span><br></pre></td></tr></table></figure>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure>
<h1 id="Linux-depending-on-what-you’re-running"><a href="#Linux-depending-on-what-you’re-running" class="headerlink" title="Linux (depending on what you’re running)"></a>Linux (depending on what you’re running)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/init.d/named restart</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nscd restart</span><br></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://coolestguidesontheplanet.com/clear-the-local-dns-cache-in-osx/" target="_blank" rel="noopener">Clear the local DNS cache in macOS Sierra, OSX, Linux and Windows</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 跟 node.js 最佳实践</title>
    <url>/2017/03/29/docker-nodejs/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/03/29/docker-nodejs/1.jpg" alt="1.jpg"></p>
<a id="more"></a>
<h4 id="Level-1-简单实现"><a href="#Level-1-简单实现" class="headerlink" title="Level-1 简单实现"></a>Level-1 简单实现</h4><p>需求：简单的构建一个app应用并且用docker部署。<br>Dockerfile编写为:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM node:7.3.0</span><br><span class="line"></span><br><span class="line">RUN mkdir -p /usr/src/app</span><br><span class="line">COPY package.json /usr/src/app/</span><br><span class="line">RUN npm install </span><br><span class="line">COPY . /usr/src/app</span><br><span class="line"></span><br><span class="line">EXPOSE 3000</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="Leve1-2-增加pm2"><a href="#Leve1-2-增加pm2" class="headerlink" title="Leve1-2 增加pm2"></a>Leve1-2 增加pm2</h4><p>需求：虽然我上了Docker了吧，但是没有进程守护心里怕怕的。<br><strong>PS</strong>:除了使用pm2外，另外还有一说是在启动docker时候添加<code>restart=always</code> 也可以实现自动重启。<br><strong>在在PS</strong>:pm2也有 docker了，即<a href="http://pm2.keymetrics.io/docs/usage/docker-pm2-nodejs/" target="_blank" rel="noopener">pm2-docke</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM node:7.3.0</span><br><span class="line"></span><br><span class="line">RUN mkdir -p /usr/src/app</span><br><span class="line">COPY package.json /usr/src/app/</span><br><span class="line">RUN npm install </span><br><span class="line">COPY . /usr/src/app</span><br><span class="line"></span><br><span class="line">EXPOSE 3000</span><br><span class="line"></span><br><span class="line">CMD [&quot;pm2&quot;,&quot;start&quot;, &quot;pm2.json&quot;,&quot;--no-daemon&quot;]</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Leve-3-使用shell脚本-执行多任务带参数的启动"><a href="#Leve-3-使用shell脚本-执行多任务带参数的启动" class="headerlink" title="Leve-3 使用shell脚本,执行多任务带参数的启动"></a>Leve-3 使用shell脚本,执行多任务带参数的启动</h4><p>需求：在启动的时候要执行多个带变量的命令、<br>这样的话CMD就满足不了了，只能上shell脚本来完成<br><code>docker_start.sh</code>为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #!/bin/sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NODE_ENV=$1</span><br><span class="line"></span><br><span class="line">if [ -z $NODE_ENV ]</span><br><span class="line">then echo &quot;please input NODE_ENV&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo $NODE_ENV</span><br><span class="line"></span><br><span class="line">pm2 start pm2.json --env $NODE_ENV --no-daemon</span><br></pre></td></tr></table></figure></p>
<p><code>Dockerfile</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM node:boron</span><br><span class="line"></span><br><span class="line"># Install global pm2 </span><br><span class="line">RUN npm install pm2 -g --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Create app directory</span><br><span class="line">RUN mkdir -p /usr/src/app</span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line"></span><br><span class="line"># Install app dependencies</span><br><span class="line">COPY package.json /usr/src/app/</span><br><span class="line">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Bundle app source</span><br><span class="line">COPY . /usr/src/app</span><br><span class="line"></span><br><span class="line">ENV NODE_ENV dev</span><br><span class="line"></span><br><span class="line">RUN [&quot;chmod&quot;, &quot;+x&quot;, &quot;/usr/src/app/docker_start.sh&quot;]</span><br><span class="line">CMD /bin/bash /usr/src/app/docker_start.sh $NODE_ENV</span><br><span class="line"></span><br><span class="line">EXPOSE 3000</span><br><span class="line"></span><br><span class="line"># Build image</span><br><span class="line"># docker build -t pm2_test:v1 .</span><br><span class="line"></span><br><span class="line"># Run docker</span><br><span class="line"># docker run -e NODE_ENV=staging --name pm2_test -p 3500:3500  -d  pm2_test:v1</span><br></pre></td></tr></table></figure></p>
<p><strong>重点说明：</strong> 其中的变量是<code>NODE_ENV</code>，所以在run的时候环境变量会替换到<code>Dockerfile</code>中的<code>ENV</code>，这就是精华所在。</p>
<p>以上，就是最近docker实践心得。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用AppVeyor和Travis，自动构建和发布 Electrion应用</title>
    <url>/2018/12/26/electron-ci/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/12/26/electron-ci/0.png" alt="0"></p>
<a id="more"></a>
<h1 id="使用AppVeyor和Travis，自动构建和发布-Electrion应用"><a href="#使用AppVeyor和Travis，自动构建和发布-Electrion应用" class="headerlink" title="使用AppVeyor和Travis，自动构建和发布 Electrion应用"></a>使用AppVeyor和Travis，自动构建和发布 Electrion应用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  Electron应用在开发以后，本地运行 build 只能打包相对于的环境。如在 Mac 下运行只能打包 dmg 不能兼顾其他平台。为了解决这个痛点，就有了这篇文章。</p>
<p>  简单说一下构建和发布流程：主要是配置构建工具 <a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener">electron-builder</a>, 配置 <a href="https://www.appveyor.com/" target="_blank" rel="noopener">Travis</a> 以构建 Linux 和 Mac 应用，配置 <a href="https://www.appveyor.com/" target="_blank" rel="noopener">AppVeyor</a> 以构建 Windows 应用，当提交代码到 Github 后，CI 自动拉取代码，运行 electron-builder 相关命令，生成个平台的安装包，并将安装包推送到 Github Releases 中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/12/26/electron-ci/1.png" alt="release包"></p>
<p>在使用 git 提交代码后，CI 自动构建并发布。so easy~ 顺表说一下，对于开源项目，Travis 和 AppVeyor 是能够免费使用的。</p>
<h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><ol>
<li>GitHub 账户</li>
<li>AppVeyor 账户</li>
<li>Travis 账户</li>
<li>基于 Electron-vue 脚手架构建的项目(非必须)</li>
<li>项目基于 electron-builder 打包(非必须)</li>
</ol>
<h4 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h4><p>编辑本地的 <code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"electron-v2er"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"ruicky &lt;xxx@163.com&gt;"</span>,</span><br><span class="line">  <span class="attr">"homepage"</span>:<span class="string">"https://github.com/ruicky/electron-v2ex"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"An electron-vue project"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"./dist/electron/main.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"build"</span>: <span class="string">"node .electron-vue/build.js &amp;&amp; electron-builder --publish always"</span></span><br><span class="line">      	 ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">   <span class="string">"mac"</span>: &#123;</span><br><span class="line">      <span class="attr">"icon"</span>: <span class="string">"build/icons/v2ex.icns"</span>,</span><br><span class="line">      <span class="attr">"category"</span>: <span class="string">"public.app-category.utilities"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"win"</span>: &#123;</span><br><span class="line">      <span class="attr">"icon"</span>: <span class="string">"build/icons/v2ex.ico"</span>,</span><br><span class="line">      <span class="attr">"target"</span>: <span class="string">"nsis"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"linux"</span>: &#123;</span><br><span class="line">      <span class="attr">"icon"</span>: <span class="string">"build/icons"</span>,</span><br><span class="line">      <span class="attr">"category"</span>: <span class="string">"Utility"</span>,</span><br><span class="line">      <span class="attr">"target"</span>: [</span><br><span class="line">        <span class="string">"deb"</span>,</span><br><span class="line">        <span class="string">"AppImage"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<ol>
<li>其中的 <code>name</code>(项目名称) <code>version</code>(项目版本)  <code>author</code>(作者信息) <code>description</code> (项目描述) <code>license</code>(开源协议) 都需要填写，否则在编译 linux 版本的时候会报错。填写或修改成自己的参数即可。 可参考 <a href="https://www.electron.build/configuration/configuration#metadata" target="_blank" rel="noopener">Metadata</a> 参数解释</li>
<li>在 <code>scripts</code> 中的 <code>build</code> 添加 <code>--publish always</code> 可参考 <a href="https://www.electron.build/configuration/publish#how-to-publish" target="_blank" rel="noopener">How to Publish</a> 里的参数解释</li>
</ol>
<h4 id="生成-GitHub-的-GH-TOKEN"><a href="#生成-GitHub-的-GH-TOKEN" class="headerlink" title="生成 GitHub 的 GH_TOKEN"></a>生成 GitHub 的 GH_TOKEN</h4><p>  electron-builder 需要 GH_TOKEN(Github Personal access token) 才有权限上传文件到 Github Releases 中。 可在 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal access tokens</a> 页面进行生成，由于只会显示一次，注意保存好。在创建的时候 只需要勾选 <code>repo &gt; public_repo</code> 即可。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/12/26/electron-ci/2.png" alt="生成GH_TOKEN"></p>
<h2 id="配置-CI"><a href="#配置-CI" class="headerlink" title="配置 CI"></a>配置 CI</h2><h3 id="AppVeyor"><a href="#AppVeyor" class="headerlink" title="AppVeyor"></a>AppVeyor</h3><p>在本地项目根目录中添加文件 <code>appveyor.yml</code>,具体可参考一下的示例配置，几乎不用修改。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span><span class="string">.&#123;build&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image:</span> <span class="string">Visual</span> <span class="string">Studio</span> <span class="number">2017</span></span><br><span class="line"><span class="attr">platform:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">x64</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'%APPDATA%\npm-cache'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'%USERPROFILE%\.electron'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'%USERPROFILE%\AppData\Local\Yarn\cache'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">init:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">core.autocrlf</span> <span class="string">input</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ps:</span> <span class="string">Install-Product</span> <span class="string">node</span> <span class="number">8</span> <span class="string">x64</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">reset</span> <span class="string">--hard</span> <span class="string">HEAD</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">node</span> <span class="string">--version</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_script:</span></span><br><span class="line">  <span class="comment">#- yarn test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span> <span class="string">off</span></span><br></pre></td></tr></table></figure>
<ol>
<li>创建项目<ul>
<li>然后打开 <a href="`https://ci.appveyor.com/projects`">Appveyor 项目页</a>，点击 左边的 <code>NEW PROJECT</code> 按钮，然后在选择你要自动化的仓库。</li>
</ul>
</li>
<li>设置<ul>
<li>回到首页选择创建好的项目</li>
<li>点击 <code>Settings</code> tab</li>
<li>在 <code>Environment</code> 中填写 <code>GH_TOKEN</code> 的值，点击页面最下面的“保存”<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/12/26/electron-ci/3.png" alt="填写token"></li>
<li>在 <code>Deployment</code> 中配置部署的结果页，选择 <code>GitHub Releases</code> 并填写之前生成好的 <code>GH_TOKEN</code>，点击页面最下面的“保存”<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/12/26/electron-ci/4.png" alt="选择deployment"></li>
</ul>
</li>
</ol>
<h3 id="Travis"><a href="#Travis" class="headerlink" title="Travis"></a>Travis</h3><p>在项目的根目录创建文件 <code>.travis.yml</code> 然后参考下面的配置写入，大部分不用修改。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Commented sections below can be used to run tests on the CI server</span></span><br><span class="line"><span class="comment"># https://simulatedgreg.gitbooks.io/electron-vue/content/en/testing.html#on-the-subject-of-ci-testing</span></span><br><span class="line"><span class="attr">osx_image:</span> <span class="string">xcode8.3</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"><span class="attr">dist:</span> <span class="string">trusty</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">c</span></span><br><span class="line"><span class="attr">matrix:</span></span><br><span class="line">  <span class="attr">include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">os:</span> <span class="string">osx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">os:</span> <span class="string">linux</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">CC=clang</span> <span class="string">CXX=clang++</span> <span class="string">npm_config_clang=1</span></span><br><span class="line">    <span class="attr">compiler:</span> <span class="string">clang</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"$HOME/.electron"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"$HOME/.cache"</span></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">apt:</span></span><br><span class="line">    <span class="attr">packages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">libgnome-keyring-dev</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">icnsutils</span></span><br><span class="line">    <span class="comment">#- xvfb</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/tmp/git-lfs</span> <span class="string">&amp;&amp;</span> <span class="string">curl</span> <span class="string">-L</span> <span class="string">https://github.com/github/git-lfs/releases/download/v1.2.1/git-lfs-$([</span></span><br><span class="line">  <span class="string">"$TRAVIS_OS_NAME"</span> <span class="string">==</span> <span class="string">"linux"</span> <span class="string">]</span> <span class="string">&amp;&amp;</span> <span class="string">echo</span> <span class="string">"linux"</span> <span class="string">||</span> <span class="string">echo</span> <span class="string">"darwin"</span><span class="string">)-amd64-1.2.1.tar.gz</span></span><br><span class="line">  <span class="string">|</span> <span class="string">tar</span> <span class="string">-xz</span> <span class="string">-C</span> <span class="string">/tmp/git-lfs</span> <span class="string">--strip-components</span> <span class="number">1</span> <span class="string">&amp;&amp;</span> <span class="string">/tmp/git-lfs/git-lfs</span> <span class="string">pull</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">if</span> <span class="string">[[</span> <span class="string">"$TRAVIS_OS_NAME"</span> <span class="string">==</span> <span class="string">"linux"</span> <span class="string">]];</span> <span class="string">then</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">--no-install-recommends</span> <span class="string">-y</span> <span class="string">icnsutils</span> <span class="string">graphicsmagick</span> <span class="string">xz-utils;</span> <span class="string">fi</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="comment">#- export DISPLAY=':99.0'</span></span><br><span class="line"><span class="comment">#- Xvfb :99 -screen 0 1024x768x24 &gt; /dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">nvm</span> <span class="string">install</span> <span class="number">9</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">curl</span> <span class="string">-o-</span> <span class="string">-L</span> <span class="string">https://yarnpkg.com/install.sh</span> <span class="string">|</span> <span class="string">bash</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">source</span> <span class="string">~/.bashrc</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">xvfb-maybe</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="comment">#- xvfb-maybe node_modules/.bin/karma start test/unit/karma.conf.js</span></span><br><span class="line"><span class="comment">#- yarn run pack &amp;&amp; xvfb-maybe node_modules/.bin/mocha test/e2e</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<ol>
<li>进入 <a href="https://travis-ci.org/" target="_blank" rel="noopener">travis官网</a>， 点击 GitHub 登录 可自动同步项目到 <code>travis</code></li>
<li>选择要 配置的项目</li>
<li>选择项目右边的 <code>setting</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/12/26/electron-ci/5.png" alt="setting"></li>
<li>填写 GB_TOEN的值<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/12/26/electron-ci/6.png" alt="GH_TOKEN"></li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>按照上述的配置，就能够自动化的部署了。在配置的过程中由于是  <code>electron-vue</code> 脚手架生成的项目，在 <code>package.json</code> 中有些节点没有，导致在 build linux 环境的时候报错。所以建议，按照上面的说明都配置上。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.im/entry/5995599a6fb9a0249f6a131b" target="_blank" rel="noopener">使用 CI 构建和发布全平台 Electron 应用</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Electron</tag>
        <tag>Travis</tag>
        <tag>AppVeyor</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次违章全纪录</title>
    <url>/2019/09/04/first-ticket/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/0.jpg" alt="0"></p>
<a id="more"></a>
<h1 id="第一次违章全纪录"><a href="#第一次违章全纪录" class="headerlink" title="第一次违章全纪录"></a>第一次违章全纪录</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  本人山西人氏，在北京工作了好几年了，但是由于摇号，所以也没有北京车牌，上的是老家的车牌，现在是 2019年9月份，还是可以在“北京交警” APP 上申请进京证的。<br>  今天，像往常一样打开 APP 申请进京证。但是，提交资料以后，等待审核后，提示这个 “请处理机动车在京违法后，再申请进京证”。难道违章了？</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/app.jpg" alt="请处理机动车在京违法后，再申请进京证"></p>
<h2 id="违章处理"><a href="#违章处理" class="headerlink" title="违章处理"></a>违章处理</h2><p>  打开 <code>交管12123</code>APP 上，想看下自己的违章，但是，打开后，并没有啊、</p>
<p>  难道是同步慢么？为了尽快落实这个问题，我上网搜索了一下。像我这种异地的在北京的违章怎么看。还真找到了，</p>
<p>  首先，你如果之前在你所在地 注册过 交管12123 的话，你得登录 你注册时候的省份，就像我是山西注册的 所以地址是 <code>https://sx.122.gov.cn</code>.<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/第一次登录.jpg" alt="第一次登录"></p>
<p>  登录完以后，在左上角，切换所在地，就可以查看相应地方的违章。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/切换城市.jpg" alt="切换城市"></p>
<p>  点击业务办理<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/业务办理.jpg" alt="业务办理"></p>
<p>  然后在看点击这个“电子监控违法处理”，就能看到你的违章了。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/09/04/first-ticket/在线办理.jpg" alt="在线办理"></p>
<p>  <strong>简而言之就是：先去注册所在地登录，在切换城市，就能看到相应城市的违章。</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  交通违章代码:70522<br>  违章行为:未按照指示交通标线指示行驶的。</p>
<p>  以后安全行车，争取不违章。</p>
]]></content>
      <categories>
        <category>汽车</category>
        <category>违章</category>
      </categories>
      <tags>
        <tag>进京证</tag>
        <tag>违章</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Let&#39;s Encrypt生成免费SSL证书(By-Ruicky)</title>
    <url>/2017/05/25/free-ssl/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/25/free-ssl/1.png" alt="img"></p>
<a id="more"></a>
<h1 id="使用Let’s-Encrypt生成免费SSL证书-By-Ruicky"><a href="#使用Let’s-Encrypt生成免费SSL证书-By-Ruicky" class="headerlink" title="使用Let’s Encrypt生成免费SSL证书(By-Ruicky)"></a>使用Let’s Encrypt生成免费SSL证书(By-Ruicky)</h1><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol>
<li>nginx</li>
<li>Centos 7</li>
<li>域名:<a href="http://www.example.com(替换成你自己的)" target="_blank" rel="noopener">www.example.com(替换成你自己的)</a></li>
</ol>
<h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><h3 id="1-配置Nginx，验证证书对应域名的所有权"><a href="#1-配置Nginx，验证证书对应域名的所有权" class="headerlink" title="1. 配置Nginx，验证证书对应域名的所有权."></a>1. 配置Nginx，验证证书对应域名的所有权.</h3><p>为需要配置https的站点添加以下配置，将访问/.well-known的请求指向本地目录。Let’s Encrypt在生成证书的过程中，会在/var/www/<a href="http://www.xxx.com/.well-known目录生成一个临时文件，并且会访问类似于http://www.xxx.com/.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX的url，来检查域名配置是否有效。" target="_blank" rel="noopener">www.xxx.com/.well-known目录生成一个临时文件，并且会访问类似于http://www.xxx.com/.well-known/acme-challenge/HGr8U1IeTW4kY_Z6UIyaakzOkyQgPr_7ArlLgtZE8SX的url，来检查域名配置是否有效。</a></p>
<p>添加以下配置，并重启Nginx：nginx -s reload，如果reload不生效，可以试试restart。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /.well-known &#123;</span><br><span class="line">        alias /var/www/www.xxx.com/.well-known;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-安装certbot。推荐使用官方推荐安装方法（centosrhel7-nginx）。"><a href="#2-安装certbot。推荐使用官方推荐安装方法（centosrhel7-nginx）。" class="headerlink" title="2. 安装certbot。推荐使用官方推荐安装方法（centosrhel7-nginx）。"></a>2. 安装certbot。推荐使用官方推荐安装方法（<a href="https://certbot.eff.org/#centosrhel7-nginx" target="_blank" rel="noopener">centosrhel7-nginx</a>）。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br><span class="line">yum install certbot</span><br></pre></td></tr></table></figure>
<h3 id="3-使用certbot命令行生成证书"><a href="#3-使用certbot命令行生成证书" class="headerlink" title="3. 使用certbot命令行生成证书."></a>3. 使用certbot命令行生成证书.</h3><ul>
<li>使用向导生成<ul>
<li><code>certbot certonly</code></li>
</ul>
</li>
<li>使用快捷方式生成<ul>
<li><code>cd /var/www &amp;&amp; mkdir www.example.com</code></li>
<li><code>certbot certonly --webroot --webroot-path /var/www/www.example.com -d www.example.com --agree-tos --email admin@example.com</code>  </li>
</ul>
</li>
</ul>
<p><strong>生成的证书默认在/etc/letsencrypt/live/<a href="http://www.xxx.com/目录。" target="_blank" rel="noopener">www.xxx.com/目录。</a></strong></p>
<h3 id="4-配置Nginx使用证书"><a href="#4-配置Nginx使用证书" class="headerlink" title="4. 配置Nginx使用证书"></a>4. 配置Nginx使用证书</h3><p>添加以下配置，并重启Nginx：nginx -s reload，如果reload不生效，可以试试restart。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    listen 443;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line">    ssl_certificate         /etc/letsencrypt/live/www.xxx.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key     /etc/letsencrypt/live/www.xxx.com/privkey.pem;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PS: 如果想让http强制跳转到http则需要监听80端口的配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name  example.comn;</span><br><span class="line">    return       301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终，你的nginx的配置文件应该类似下面这种<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name www.example.com;</span><br><span class="line"></span><br><span class="line">    location /.well-known &#123;</span><br><span class="line">     alias /var/www/www.example.com/.well-known;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      return 301 https://$host$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen   443;</span><br><span class="line">  server_name  www.example.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">     proxy_pass http://127.0.0.1:3000;</span><br><span class="line">     proxy_set_header Host  $host;</span><br><span class="line">     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_stapling_verify on;</span><br><span class="line">  ssl_certificate         /etc/letsencrypt/live/www.example.com/fullchain.pem;</span><br><span class="line">  ssl_certificate_key     /etc/letsencrypt/live/www.example.com/privkey.pem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-检查证书的有效性"><a href="#5-检查证书的有效性" class="headerlink" title="5. 检查证书的有效性"></a>5. 检查证书的有效性</h3><p>打开浏览器，检查证书的有效性。</p>
<h3 id="6-证书续期"><a href="#6-证书续期" class="headerlink" title="6. 证书续期"></a>6. 证书续期</h3><p>Let’s Encrypt颁发的证书有期是90天，需要在过期前进行续期，好在Let’s Encrypt已经提供了自动续期的脚本。</p>
<p>官网说明，可以一天调用两次，如果检测到证书不需要更新，是什么都不做的，以减少意外造成的故障。</p>
<p>先运行certbot-auto renew –dry-run命令检查证书自动续期是否正常，如果正常，将certbot-auto renew –quiet命令添加到系统的计划任务cron中，就可以实现证书自动续期了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<p>输入以下内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01 1 * * * certbot renew --post-hook &quot;systemctl reload nginx&quot;</span><br></pre></td></tr></table></figure></p>
<p>表示每天的1点1分自动执行续期脚本。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="https://latlonworld.com/article/free-ssl-with-lets-encrypt.html" target="_blank" rel="noopener">使用Let’s Encrypt生成免费SSL证书</a><br><a href="https://serverfault.com/questions/790772/cron-job-for-lets-encrypt-renewal" target="_blank" rel="noopener">Cron job for let’s encrypt renewal</a><br><a href="http://www.jianshu.com/p/eaac0d082ba2" target="_blank" rel="noopener">Let’s Encrypt SSL证书配置</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>Let&#39;s Encrypt</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 分支管理最佳实践</title>
    <url>/2017/06/06/git-flow/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/06/06/git-flow/1.png" alt="img"><br><a id="more"></a></p>
<h1 id="Git-分支管理最佳实践"><a href="#Git-分支管理最佳实践" class="headerlink" title="Git 分支管理最佳实践"></a>Git 分支管理最佳实践</h1><h2 id="git-flow"><a href="#git-flow" class="headerlink" title="git-flow"></a>git-flow</h2><p><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">git-flow</a> 应该是目前流传最广的 Git 分支管理实践。git-flow 围绕的核心概念是版本发布（release）。因此 git-flow 适用于有较长版本发布周期的项目。虽然目前推崇的做法是持续集成和随时发布。有的项目甚至可以一天发布很多次。随时发布对于 SaaS 服务类的项目来说是很适合的。不过仍然有很大数量的项目的发布周期是几个星期甚至几个月。较长的发布周期可能是由于非技术相关的因素造成的，比如人员限制、管理层决策和市场营销策略等。</p>
<p>git-flow 流程中包含 5 类分支，分别是 master、develop、新功能分支（feature）、发布分支（release）和 hotfix。这些分支的作用和生命周期各不相同。master 分支中包含的是可以部署到生产环境中的代码，这一点和 GitHub flow 是相同的。develop 分支中包含的是下个版本需要发布的内容。从某种意义上来说，develop 是一个进行代码集成的分支。当 develop 分支集成了足够的新功能和 bug 修复代码之后，通过一个发布流程来完成新版本的发布。发布完成之后，develop 分支的代码会被合并到 master 分支中。</p>
<p>其余三类分支的描述如表 1所示。这三类分支只在需要时从 develop 或 master 分支创建。在完成之后合并到 develop 或 master 分支。合并完成之后该分支被删除。这几类分支的名称应该遵循一定的命名规范，以方便开发人员识别。</p>
<p>表 1. git-flow 分支类型</p>
<table>
<thead>
<tr>
<th>分支类型</th>
<th>命名规范</th>
<th>创建自</th>
<th>合并到</th>
<th>说明  </th>
</tr>
</thead>
<tbody>
<tr>
<td>feature</td>
<td>feature/*</td>
<td>develop</td>
<td>develop</td>
<td>新功能</td>
</tr>
<tr>
<td>release</td>
<td>release/*</td>
<td>develop</td>
<td>develop 和 master</td>
<td>一次新版本的发布</td>
</tr>
<tr>
<td>hotfix</td>
<td>hotfix/*</td>
<td>master</td>
<td>develop 和 master</td>
<td>生产环境中发现的紧急 bug 的修复  </td>
</tr>
</tbody>
</table>
<p>对于开发过程中的不同任务，需要在对应的分支上进行工作并正确地进行合并。每个任务开始前需要按照指定的步骤完成分支的创建。例如当需要开发一个新的功能时，基本的流程如下：</p>
<ul>
<li>从 develop 分支创建一个新的 feature 分支，如 feature/my-awesome-feature。</li>
<li>在该 feature 分支上进行开发，提交代码，push 到远端仓库。</li>
<li>当代码完成之后，合并到 develop 分支并删除当前 feature 分支。</li>
</ul>
<p>在进行版本发布和 hotfix 时也有类似的流程。当需要发布新版本时，采用的是如下的流程：</p>
<ul>
<li>从 develop 分支创建一个新的 release 分支，如 release/1.4。</li>
<li>把 release 分支部署到持续集成服务器上进行测试。测试包括自动化集成测试和手动的用户接受测试。</li>
<li>对于测试中发现的问题，直接在 release 分支上提交修改。完成修改之后再次部署和测试。</li>
<li>当 release 分支中的代码通过测试之后，把 release 分支合并到 develop 和 master 分支，并在 master 分支上添加相应的 tag。</li>
</ul>
<p>因为 git-flow 相关的流程比较繁琐和难以记忆，在实践中一般使用<a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener">辅助脚本</a>来完成相关的工作。比如同样的开发新功能的任务，可以使用 git flow feature start my-awesome-feature 来完成新分支的创建，使用 git flow feature finish my-awesome-feature 来结束 feature 分支。辅助脚本会完成正确的分支创建、切换和合并等工作。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html" target="_blank" rel="noopener">Git 分支管理最佳实践</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-04-07 Hexo 部署 GitHub 调整</title>
    <url>/2020/04/07/github-actions/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/04/07/github-actions/0.png" alt="img"></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现状：我的网站原先是在GitHub上进行源码托管，使用Netlify进行自动化部署。</p>
<p>改变：</p>
<pre><code>1. 使用GitHub进行托管源码
2. 使用GitHub Pages来进行代码展示
3. 使用https加密服务
</code></pre><p>总而言之，就是由Netlify自动化迁向GitHub全家桶实现。</p>
<p>思路：</p>
<p>创建2个GitHub仓库，一个私有仓库用来存储源码，一个用来GitHub Pages展示静态页。</p>
<p>使用GitHub自带的GitHub Actions 来实现自动化部署。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><ul>
<li><p>创建私有仓库为 <code>ruicky_blog</code> 存放hexo相关的源码</p>
</li>
<li><p>创建公共仓库为 <code>ruicky.github.io</code> 用来展示GitHub Pages</p>
</li>
</ul>
<h4 id="配置-GitHub-Actions"><a href="#配置-GitHub-Actions" class="headerlink" title="配置 GitHub Actions"></a>配置 GitHub Actions</h4><ul>
<li><p>本地生成秘钥</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在GitHub 的个人配置页 <code>Setting</code> —&gt; <code>SSH and GPG keys</code> 添加刚刚生成的公钥，名称随意。</p>
</li>
<li><p>在 <code>ruicky_blog</code> 的 <code>Settings</code> —&gt; <code>Secrets</code> 里添加刚刚生成的私钥，名称为 <code>ACTION_DEPLOY_KEY</code>。</p>
</li>
<li><p>在 <code>ruicky_blog</code>的仓库的 <code>Actions</code> 选型卡中新建 <code>workflow</code>，填写以下配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> name: Deploy Blog</span><br><span class="line"></span><br><span class="line">on: [push] # 当有新push时运行</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build: # 一项叫做build的任务</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行</span><br><span class="line">    </span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout # 将仓库内master分支的内容下载到工作目录</span><br><span class="line">      uses: actions/checkout@v1 # 脚本来自 https://github.com/actions/checkout</span><br><span class="line">      </span><br><span class="line">    - name: Use Node.js 10.x # 配置Node环境</span><br><span class="line">      uses: actions/setup-node@v1 # 配置脚本来自 https://github.com/actions/setup-node</span><br><span class="line">      with:</span><br><span class="line">        node-version: &quot;10.x&quot;</span><br><span class="line">    </span><br><span class="line">    - name: Setup Hexo env</span><br><span class="line">      env:</span><br><span class="line">        ACTION_DEPLOY_KEY: $&#123;&#123; secrets.ACTION_DEPLOY_KEY &#125;&#125;</span><br><span class="line">      run: |</span><br><span class="line">        # set up private key for deploy</span><br><span class="line">        mkdir -p ~/.ssh/</span><br><span class="line">        echo &quot;$ACTION_DEPLOY_KEY&quot; | tr -d &apos;\r&apos; &gt; ~/.ssh/id_rsa # 配置秘钥</span><br><span class="line">        chmod 600 ~/.ssh/id_rsa</span><br><span class="line">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">        # set git infomation</span><br><span class="line">        git config --global user.name &apos;ruicky&apos; # 换成你自己的邮箱和名字</span><br><span class="line">        git config --global user.email &apos;ruicky@ruicky.me&apos;</span><br><span class="line">        # install dependencies</span><br><span class="line">        npm i -g hexo-cli # 安装hexo</span><br><span class="line">        npm i</span><br><span class="line">  </span><br><span class="line">    - name: Deploy</span><br><span class="line">      run: |</span><br><span class="line">        # publish</span><br><span class="line">        hexo generate &amp;&amp; hexo deploy # 执行部署程序</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>配置 站点 <code>_config.yml</code> 中的 <code>deploy</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:ruicky/ruicky.github.io.git</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="配置域名，启用https"><a href="#配置域名，启用https" class="headerlink" title="配置域名，启用https"></a>配置域名，启用https</h4><p>在 <code>ruicky.github.io</code> 仓库中 找到 <code>Settings</code> ,配置该节点下的 <code>GitHub Pages</code>。将其中的 <code>Custom domain</code>修改为自己的域名，如: <code>ruicky.me</code>, 并勾选 <code>Enforce HTTPS</code> 即可。</p>
<h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>注意其中的两个仓库 <code>ruicky</code> 跟 <code>ruicky.github.io</code> 是我自己的仓库，如果要操作的话，需要改为你自己的。<br>该文章面向有点基础的同学，非小白教程，如果有什么不明白的，可在下方留言。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote>
<p><a href="https://imagician.net/archives/17/" target="_blank" rel="noopener">用GitHub Actions自动化发布Hexo网站到GitHub Pages</a></p>
</blockquote>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>GitHub</tag>
        <tag>GitHub Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins + GitLab 借助定时检测 自动发版</title>
    <url>/2018/02/05/gitlab-jenkins/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/05/gitlab-jenkins/0.png" alt="0.png"><br><a id="more"></a></p>
<h1 id="Jenkins-GitLab-借助定时检测-自动发版"><a href="#Jenkins-GitLab-借助定时检测-自动发版" class="headerlink" title="Jenkins + GitLab 借助定时检测 自动发版"></a>Jenkins + GitLab 借助定时检测 自动发版</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><pre><code>本来想着用 GitLab的webhooks来进行通知Jenkins 进行自动发版的，但是由于Jenkins在局域网内，所以GitLab 不能给 Jenkins 通知。
无奈之下，只能让Jenkins定时检测 GitLab 有没有更新，实现进行自动发版操作。
</code></pre><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol>
<li>Jenkins(局域网)</li>
<li>GitLab(公网)</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>安装Jenkins(安装方法略)</li>
<li>安装GitLab(安装方法略)  </li>
<li>安装Jenkins 插件 <code>Git plugin</code>(安装方法略) </li>
<li>新建Jenkins Job (以NodeJs为例)<ul>
<li>构建一个自由风格软件项目</li>
<li>源码管理中 选择 <code>Git</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/05/gitlab-jenkins/1.png" alt="1.png"></li>
<li>构建触发器 选择 <code>Pool SCM</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/05/gitlab-jenkins/2.png" alt="2.png"></li>
<li>构建 中添加自己需要执行 shell 脚本<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/05/gitlab-jenkins/3.png" alt="3.png"></li>
</ul>
</li>
</ol>
<h2 id="补充阅读"><a href="#补充阅读" class="headerlink" title="补充阅读"></a>补充阅读</h2><ol>
<li><p>Pull SCM 语法规则</p>
<blockquote>
<ul>
<li>空行 和 以#开头的行，会被忽略为注释</li>
<li>每行的格式: 分钟 小时 天 月份 星期 (以空格或 tab 分隔)<ul>
<li>分钟: 0–59</li>
<li>小时: 0–23</li>
<li>天数: 1–31</li>
<li>月份: 1-12</li>
<li>星期: 0-7 0和7代表星期天</li>
</ul>
</li>
<li>H 的使用规则及说明:<ul>
<li>可防止重复执行. eg: <code>0 0 * * *</code>会在12:00执行多次，而 <code>H H * * *</code>可以保证 12:00 任务只执行一次</li>
<li>结合区间使用：<code>H H(0-7) * * *</code> 代表 0点到7:59分内，的一些时间点</li>
<li>H 代表某个区间内的随机值，本质上是 job 名称的 hash 值，而不是一个随机数函数。</li>
<li>当设置天数为 <code>H/3</code> 时，会导致误差。<code>*/3</code>中<code>*</code> 代表<code>1-31</code>, 而 <code>H/3</code>中的 <code>H</code>代表<code>1-28</code></li>
</ul>
</li>
<li>示例:<ul>
<li><code>H/15 * * * *</code> 每15分钟</li>
<li><code>H(0-29)/10 * * * *</code>每10分钟(仅限于 每小时内的前半个小时)</li>
<li><code>45 9-16/2 * * 1-5</code> 工作日内, 每天9:45~4:45之间, 之后每隔两小时 执行一次 job。执行时间必须为 x:45.</li>
<li><code>H H(9-16)/2 * * 1-5</code> 工作日内, 每天的9:00~16:00之间, 每隔两小时执行一次。（有可能是: 10:38–&gt;12:38…）</li>
<li><code>H H 1,15 1-11 *</code> 每年1~11月内, 1号和15号两天内, 每天执行一次 job.</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>构建触发方式</p>
<blockquote>
<ul>
<li>手动: 手动点击 Build 按钮触发</li>
<li>触发远程构建 (例如,使用脚本)</li>
<li>Build after other projects are built</li>
<li>Build periodically <ul>
<li>周期进行项目构建（它不care源码是否发生变化）</li>
</ul>
</li>
<li>GitHub hook trigger for GITScm polling</li>
<li>Poll SCM<ul>
<li>定时检查源码变更（根据SCM软件的版本号），如果有更新就checkout最新code下来，然后执行构建动作。</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>如果想使用GitLab的webhook方式让Jenkins自动构建的话，阅读一下文章</p>
<blockquote>
<p><a href="https://www.cnblogs.com/kevingrace/p/6479813.html" target="_blank" rel="noopener">Gitlab利用Webhook实现Push代码后的jenkins自动构建</a></p>
</blockquote>
</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="http://books.xueboren.com/linux/zh-cn/ServersInstallAndConfig/Jenkins/jenkins-build.html#%E8%87%AA%E5%8A%A8-pull-scm" target="_blank" rel="noopener">Jenkins 构建触发设置</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>2019中国北京世界园艺博览会指北</title>
    <url>/2019/07/18/horti-expo2019/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/18/horti-expo2019/园区导览图.jpg" alt="园区导览图"></p>
<a id="more"></a>
<h1 id="2019中国北京世界园艺博览会指北"><a href="#2019中国北京世界园艺博览会指北" class="headerlink" title="2019中国北京世界园艺博览会指北"></a>2019中国北京世界园艺博览会指北</h1><h2 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h2><p>方式：自驾<br>地点：出发地到北京世界园艺博览会<br>时间：1小时30分钟<br>高速花费：<code>15*2 = 30</code> 或 <code>25*2 = 50</code><br>停车场： P1,P2,P3,P4  小车收费 10 元/次</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/18/horti-expo2019/路程.jpg" alt="收费+免费"></p>
<h2 id="门票"><a href="#门票" class="headerlink" title="门票"></a>门票</h2><p>平日票：120<br>提前2天打九折： <code>120*0.9 = 108</code><br>领取文惠券：满80减20 满200减50  满400减100 <a href="https://mp.weixin.qq.com/s/RXmXpNYAbzgrCmAsClU5qA" target="_blank" rel="noopener">领取地址</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/18/horti-expo2019/门票价格.png" alt="门票价格"></p>
<h2 id="出行前准备"><a href="#出行前准备" class="headerlink" title="出行前准备"></a>出行前准备</h2><ul>
<li><strong>身份证，身份证，身份证</strong> (重要的事情说三遍)</li>
<li>防晒三件套(防晒衣，防晒伞，防晒霜)</li>
<li>防虫</li>
<li>食物，特别是水</li>
<li>充电宝</li>
</ul>
<h2 id="游览顺序"><a href="#游览顺序" class="headerlink" title="游览顺序"></a>游览顺序</h2><h3 id="线路1-精彩园艺体验之旅-两日游线路"><a href="#线路1-精彩园艺体验之旅-两日游线路" class="headerlink" title="线路1　精彩园艺体验之旅(两日游线路)"></a>线路1　精彩园艺体验之旅(两日游线路)</h3><h4 id="第1日：园艺与世界"><a href="#第1日：园艺与世界" class="headerlink" title="第1日：园艺与世界"></a>第1日：园艺与世界</h4><p>下午4：00后入园：1号门——中国馆——永宁阁(不登阁)——园内用晚餐——妫汭湖畔漫步——妫汭剧场——奇幻光影森林(夜晚)——1号门</p>
<h4 id="第2日：园艺与我们"><a href="#第2日：园艺与我们" class="headerlink" title="第2日：园艺与我们"></a>第2日：园艺与我们</h4><p>早8：30入园：1号门——百草园、百果园、百蔬园——植物馆——园艺小镇——荷风馆——园内用午餐——中华园艺展示区(选择2-3处展园参观)——国际馆——世界园艺展示区(选择2-3处展园参观)——生活体验馆——花车巡游及自由活动——1号门</p>
<h4 id="线路1特色"><a href="#线路1特色" class="headerlink" title="线路1特色"></a>线路1特色</h4><p>这是一条囊括了北京世园会全部美景的线路，主办方精心准备了跨夜票，在第一天下午4点以后入园，可以享受到两天精彩的园艺之旅——世园梦夜、灯光秀景、星空人间、美丽家园。<br>这条线路包含了北京世园会的主要场馆和展区，包括中国馆、国际馆、植物馆、生活体验馆和妫汭剧场，以及永宁阁、荷风馆、园艺小镇、“三百园”(百草园、百果园、百蔬园)等户外展区。<br>除了静态园艺观赏外，还有“花车巡游”等丰富多彩的活动等着您观赏和参与。</p>
<h3 id="线路2-探秘世园会之旅-半日游线路"><a href="#线路2-探秘世园会之旅-半日游线路" class="headerlink" title="线路2　探秘世园会之旅　(半日游线路)"></a>线路2　探秘世园会之旅　(半日游线路)</h3><p>1号门——永宁阁——中国馆——中华园艺展示区(选择2-3处参观)——国际馆——世界园艺展示区(选择2-3处参观)——自由活动——1号门</p>
<h4 id="线路2特色"><a href="#线路2特色" class="headerlink" title="线路2特色"></a>线路2特色</h4><p>这是一条带您了解北京世园会园艺精华的游览线路。<br>在这条线路上您将会观赏到北京世园会的制高点和标志性建筑——永宁阁。<br>参观极富特色的中国馆和国际馆。<br>中国馆承载锦绣园艺情、如意中国梦，展示中国园艺建设成果;国际馆外观像是一把把创意飞扬的花伞，是世界园艺展示的室内场馆。<br>此外，在中华园艺展示区，有来自中华园艺区各省市区的代表园艺景观，建议您从中选择2-3处景点参观，领略其中的精彩。<br>世界园艺异彩纷呈，在世界园艺展示区有参会世界各国的特色园艺作品，建议您从中选择2-3处景点参观，感受世界园艺的独特魅力。园艺的世界，多彩的梦幻组合，共同为您构建一个美丽家园!</p>
<h3 id="线路3-园艺文化探究之旅-一日游线路"><a href="#线路3-园艺文化探究之旅-一日游线路" class="headerlink" title="线路3　园艺文化探究之旅　(一日游线路)"></a>线路3　园艺文化探究之旅　(一日游线路)</h3><p>1号门——植物馆——百草园、百果园、百蔬园——园艺小镇——永宁阁——中国馆——园内午餐——中华园艺展示区(选择2-3处参观)——国际馆——世界园艺展示区(选择5-7处参观)——生活体验馆——1号门</p>
<h4 id="线路3特色"><a href="#线路3特色" class="headerlink" title="线路3特色"></a>线路3特色</h4><p>这是一条带您集中感受北京世园会园艺文化的游览线路。<br>植物馆是一个多彩奇妙的植物世界，馆内汇聚了上千个植物品种，您可以在此探索植物的奥秘。满园春色、瓜果飘香的“三百园”(百草园、百果园、百蔬园)，为您展现了与人类生活密切相关的果蔬园艺和中草药园艺。<br>园艺小镇是一座古色古香、幽静的园林式小镇，展示家庭生活中的园艺，并为大家提供游览中的相关接待服务。<br>您还可以观赏到北京世园会的制高点和标志性建筑——永宁阁。参观极富特色的中国馆和国际馆。中国馆承载锦绣园艺情、如意中国梦，展示中国园艺建设成果;国际馆外观像是一把把创意飞扬的花伞，是世界园艺展示的室内场馆。<br>此外，在中华园艺展示区，有来自中华园艺区各省市区的代表园艺景观，建议您从中选择2-3处景点参观，领略其中的精彩。<br>世界园艺异彩纷呈,在世界园艺展示区有参会世界各国的特色园艺作品，建议您从中选择5-7处景点参观，感受世界园艺的独特魅力。最后还有生活体验馆，让您亲身参与园艺生活的点滴体验。绿色生活，美丽家园。让园艺融入自然，让自然感动心灵!</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/18/horti-expo2019/周边景区.jpg" alt="周边景区"></p>
<h2 id="游记"><a href="#游记" class="headerlink" title="游记"></a>游记</h2><p>待补充~</p>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p><a href="http://www.horti-expo2019.com/" target="_blank" rel="noopener">2019中国北京世界园艺博览会官方网站</a></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>游记</tag>
        <tag>旅游</tag>
        <tag>北京</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装 jenkins(By-Ruicky)</title>
    <url>/2017/05/24/install-jenkins/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/install-jenkins/0.jpg" alt="0"></p>
<a id="more"></a>
<h1 id="CentOS-7-install-jenkins"><a href="#CentOS-7-install-jenkins" class="headerlink" title="CentOS 7 install jenkins"></a>CentOS 7 install jenkins</h1><h2 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h2><ul>
<li>安装时的版本：<ul>
<li>java: <code>1.8.0_91</code></li>
<li>jenkins: <code>2.46.2-1.1</code></li>
</ul>
</li>
</ul>
<h2 id="Step1-更新你ContOS-7-系统"><a href="#Step1-更新你ContOS-7-系统" class="headerlink" title="Step1: 更新你ContOS 7 系统"></a>Step1: 更新你ContOS 7 系统</h2><p>Linux管理员最好的做法是保持你的系统是最新的。安装最新稳定包，然后重启。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum update</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></p>
<h2 id="Step2-安装Java"><a href="#Step2-安装Java" class="headerlink" title="Step2: 安装Java"></a>Step2: 安装Java</h2><p>使用<code>YUM</code>安装java的jdk<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure></p>
<p>安装完成后，你可以用一下命令进行确认：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></p>
<p>这个命令就会告诉你有关安装java运行的环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openjdk version &quot;1.8.0_91&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_91-b14)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.91-b14, mixed mode)</span><br></pre></td></tr></table></figure></p>
<p>为例能够让java程序能够正确的找到环境变量，需要配置:<code>JAVA_HOME</code>和<code>JRE_HOME</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/profile /etc/profile_backup</span><br><span class="line">echo &apos;export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk&apos; | sudo tee -a /etc/profile</span><br><span class="line">echo &apos;export JRE_HOME=/usr/lib/jvm/jre&apos; | sudo tee -a /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p>
<p>最后你可以打印出来检查一下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br><span class="line">echo $JRE_HOME</span><br></pre></td></tr></table></figure></p>
<h2 id="Step-3-安装-Jenkins"><a href="#Step-3-安装-Jenkins" class="headerlink" title="Step 3: 安装 Jenkins"></a>Step 3: 安装 Jenkins</h2><p>使用官方YUM仓库来安装最新稳定版的Jenkins,在写本文的时候版本为<code>2.46.2-1.1</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</span><br><span class="line">sudo rpm --import http://pkg.jenkins-ci.org/redhat-stable/jenkins-ci.org.key</span><br><span class="line">sudo yum install jenkins</span><br></pre></td></tr></table></figure></p>
<p>设置Jenkins服务开机自启：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start jenkins.service</span><br><span class="line">sudo systemctl enable jenkins.service</span><br></pre></td></tr></table></figure></p>
<p>如果有防火墙，则需要配置允许访问8080端口:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>
<p>现在，你可以在浏览器中访问一下地址来测试Jenkins:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://&lt;your-Vultr-server-IP&gt;:8080</span><br></pre></td></tr></table></figure></p>
<h2 id="Step-4-安装Nginx-可选"><a href="#Step-4-安装Nginx-可选" class="headerlink" title="Step 4:安装Nginx(可选)"></a>Step 4:安装Nginx(可选)</h2><p>为了方便访问Jenkins,你可以为Jenkins设置Nginx的反向代理，因此，当访问Jenkins程序是，就不需要输入8080端口。<br>用YUM安装Nginx:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure></p>
<p>修改Nginx的配置文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p>
<p>找到以下两行:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>将以下六行插入{}里：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Forwarded-Proto $scheme;</span><br></pre></td></tr></table></figure></p>
<p>最终结果应该是：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>保存并退出:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure></p>
<p>或者在<code>conf.d</code>目录下建立单独文件:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen      80;</span><br><span class="line">        server_name example.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1:8080;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">            &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>开始启动Nginx服务：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start nginx.service</span><br><span class="line">sudo systemctl enable nginx.service</span><br></pre></td></tr></table></figure></p>
<p>防火墙运行80端口：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --permanent --add-service=http</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>
<p>最后在浏览器中访问一下地址来检查安装成功与否：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://&lt;your-Vultr-server-IP&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="Configure-Jenkins"><a href="#Configure-Jenkins" class="headerlink" title="Configure Jenkins"></a>Configure Jenkins</h1><p>在浏览器中访问Jenkins地址<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/install-jenkins/1.jpg" alt="1"><br>需要你输入密码，密码存放位置在<code>/var/lib/jenkins/secrets/initialAdminPassword</code>通过以下地址访问得到密码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure></p>
<p>在下以页面选择：<code>Install suggested plugins</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/install-jenkins/2.jpg" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/install-jenkins/3.jpg" alt="img"><br>如果在安装插件过程中卡主不动了，有失败的插件，那是由于墙的缘故，重启Jenkins，重启地址为，访问:<code>http://[jenkins-server]/restart</code>,然后在选在湖绿安装失败的插件。<a href="http://www.cnblogs.com/zhaoqingqing/p/6704786.html" target="_blank" rel="noopener">点我看详情</a></p>
<p>安装完插件后，创建管理员用户<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/install-jenkins/4.jpg" alt="img"><br>点击<code>Save and Finish</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/install-jenkins/5.jpg" alt="img"><br>点击<code>Start using Jenkins</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/install-jenkins/6.jpg" alt="img"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="https://www.vultr.com/docs/how-to-install-jenkins-on-centos-7" target="_blank" rel="noopener">How to Install Jenkins on CentOS 7</a><br><a href="http://www.cnblogs.com/zhaoqingqing/p/6704786.html" target="_blank" rel="noopener">安装Jenkins getting started卡住</a><br><a href="https://stackoverflow.com/questions/14869311/start-stop-and-restart-jenkins-service-on-windows" target="_blank" rel="noopener">Start/Stop and Restart Jenkins service on Windows</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>U盘 安装 macOS Sierra</title>
    <url>/2017/03/29/install-mac-os/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/03/29/install-mac-os/11.jpg" alt="1.png"></p>
<a id="more"></a>
<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><ol>
<li>本来用官方的方法，重新还原，但是报如下错<blockquote>
<p>苹果重装系统显示 apple.com/support -2105f</p>
</blockquote>
</li>
<li>command+r进入到网络恢复模式，输入了ID后，则又提示<blockquote>
<p>您尝试购买的项目已停止供货。请稍后再试。</p>
</blockquote>
</li>
</ol>
<h2 id="无奈下只能选择U盘重装了，-ㄒoㄒ"><a href="#无奈下只能选择U盘重装了，-ㄒoㄒ" class="headerlink" title="无奈下只能选择U盘重装了，/(ㄒoㄒ)/~~"></a><strong>无奈下只能选择U盘重装了，/(ㄒoㄒ)/~~</strong></h2><h2 id="一、前提说明"><a href="#一、前提说明" class="headerlink" title="一、前提说明"></a>一、前提说明</h2><p>  防止以后再次安装mac系统写个备注，以下内容很多都来自最后的参考资料，这里只做一些备注说明</p>
<h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><ol>
<li>准备一个 <code>8G</code> 或者以上容量的<code>U盘</code></li>
<li>打开 <code>App store</code> 下载 <code>macOS Sierra</code><ul>
<li>搜索系统</li>
<li>下载</li>
<li>点击“继续”</li>
<li>在<code>launchpad</code>中检查下载成功否<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/03/29/install-mac-os/12.jpg" alt="1.png"></li>
</ul>
</li>
</ol>
<h2 id="三、制作启动盘"><a href="#三、制作启动盘" class="headerlink" title="三、制作启动盘"></a>三、制作启动盘</h2><ol>
<li>使用磁盘工具抹除数据</li>
<li>终端输入制作启动盘<br>PS: 如果你安装的是 macOS Sierra 系统，请将你的U盘名字改为 Sierra 然后复制如下指令 (请三击鼠标左键进行全选，点击右键复制)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --applicationpath /Applications/Install\ macOS\ Sierra.app --nointeraction</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/03/29/install-mac-os/13.jpg" alt="2.png"></p>
<h2 id="四、-U盘启动安装macOS-Sierra"><a href="#四、-U盘启动安装macOS-Sierra" class="headerlink" title="四、 U盘启动安装macOS Sierra"></a>四、 U盘启动安装macOS Sierra</h2><ol>
<li>选择U盘启动安装</li>
<li>一路点击<code>下一步</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/03/29/install-mac-os/14.jpg" alt="3.png"></li>
</ol>
<h2 id="一些其他问题"><a href="#一些其他问题" class="headerlink" title="一些其他问题"></a>一些其他问题</h2><ol>
<li>制作Sierra正式版的的U盘说明可参考: <a href="http://www.iplaysoft.com/macos-usb-install-drive.html" target="_blank" rel="noopener">简单制作 macOS Sierra 正式版U盘USB启动安装盘方法教程 (全新安装 Mac 系统)</a></li>
<li>安装报错,”安装器有效负载签名检查失败”,可用这个方法解决：<a href="http://www.cnblogs.com/xxoome/p/6307171.html" target="_blank" rel="noopener">重装MAC系统 “安装器有效负载签名检查失败” 解决方法</a></li>
<li>忘记密码和用户：<a href="http://jingyan.baidu.com/article/c33e3f4886f830ea15cbb58b.html" target="_blank" rel="noopener">在安全模式下用命令重新配置系统</a></li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="http://www.jianshu.com/p/2ff576583361" target="_blank" rel="noopener">OS X Capitan 和 macOS Sierra U盘安装</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>使用优盘安装苹果系统</title>
    <url>/2021/11/16/install-mac/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/11/16/install-mac/0.jpeg" alt="header"><br><a id="more"></a></p>
<h1 id="使用优盘安装苹果系统"><a href="#使用优盘安装苹果系统" class="headerlink" title="使用优盘安装苹果系统"></a>使用优盘安装苹果系统</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>同事新领取的 MacBook Pro，需要格式化重新安装新系统，让我帮忙处理下。之前查过资料，为了做个记录，于是有了本文。本文以 <strong>MacOS Catalina</strong> 版本为例。</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li>MacBook 或者 Mac mini或 IMac 机器一台</li>
<li>16G 优盘一个</li>
</ul>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li>下载系统<ul>
<li>打开 <a href="https://apps.apple.com/cn/app/macos-catalina/id1466841314?mt=12" target="_blank" rel="noopener">MacOS Catalina</a>在 APP Store 中下载。这些内容会作为名为“安装 MacOS [版本名称]”的 App 下载到您的“应用程序”文件夹。</li>
</ul>
</li>
<li>制作引导盘<ul>
<li>格式化 U 盘<ul>
<li>插入你的  U 盘，然后在「应用程序」-&gt;「实用工具」里面找到并打开「磁盘工具」，或者直接用 Spotlight  搜索 “磁盘工具” 打开，如下图。</li>
<li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/11/16/install-mac/format-usb-flash-drive.jpeg" alt="format-usb-flash-drive"></li>
<li>右边顶部选择 2 -「分区」，然后在 3 -「分区布局」选择「1个分区」</li>
<li>在分区信息中的 4 -「名称」输入「Sierra」 (由于后面的命令中会用到此名称，如果你要修改成其他(英文)，请务必对应修改后面的命令)</li>
<li>在「格式」中选择 5 -「Mac OS 扩展 (日志式)」</li>
<li>这时，先别急着点“应用”，还要先在 6 -「选项」里面，如下图</li>
<li>选择「GUID 分区表」，然后点击「好」</li>
<li>最后再点「应用」开始对 U 盘进行格式化 </li>
</ul>
</li>
<li>打开终端执行<ul>
<li><code>sudo /Applications/Install\ macOS\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</code> </li>
<li>这些命令假设安装器位于您的“应用程序”文件夹中，并且“MyVolume”是您所使用的 USB 闪存驱动器或其他宗卷的名称。如果不是这个名称，请将这些命令中的 MyVolume 替换为您的宗卷名称。</li>
<li>注意替换 <code>MyVolume</code> 我这里就是  <code>/Volumes/Catalina</code> 这个名字是你上面优盘格式化的时候起的名字</li>
<li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/11/16/install-mac/iterm2.png" alt="iterm2"></li>
</ul>
</li>
</ul>
</li>
<li>安装系统<ul>
<li>需要安装的机器上 插上优盘</li>
<li>将 Mac 开机或重新启动后，立即按住 Option (Alt) ⌥ 键。</li>
<li>当您看到显示可引导宗卷的黑屏时，松开 Option 键。</li>
<li>选择包含可引导安装器的宗卷。然后点按向上箭头或按下 Return 键。 </li>
<li>根据提示选取您的语言。</li>
<li>从“实用工具”窗口中选择“安装 macOS”（或“安装 OS X”），然后点按“继续”，并按照屏幕上的说明进行操作。</li>
</ul>
</li>
</ol>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>在安装过程中出现：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装macOS Catalina 应用程序副本已损坏，不能用来安装macOS</span><br></pre></td></tr></table></figure></p>
<p><strong>原因是：</strong><br>这个镜像的“安装有效期”过期了</p>
<p><strong>解决办法如下：</strong></p>
<ol>
<li>在安装macOS界面中，断开wifi和拔掉网线，如果没有网络就不用这一步。</li>
<li>点击顶部菜单栏的实用工具—-终端，输入：date 101112132019，然后敲下回车。注意date后面有个空格。</li>
<li>点击【终端】—【退出终端】</li>
<li>重新点击【安装macOS】就可以了</li>
</ol>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>如果下载其他的版本的Mac 系统，方法一样只是命令不一致，具体的 相关命令可在官网中找到。</p>
<p><a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="noopener">如何创建可引导的 MacOS 安装器
</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写完以后发现自己以前写过一篇类似的文章，这里做个关联吧！<br><a href="https://ruicky.github.io/2017/03/29/install-mac-os/">U盘 安装 MacOS Sierra</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="noopener">如何创建可引导的 MacOS 安装器</a><br><a href="https://blog.51cto.com/hackedu/3407508" target="_blank" rel="noopener">制作 MacOS Sierra U盘USB启动安装盘方法教程 (亲测)</a><br><a href="https://www.jianshu.com/p/66eb43dfcbef" target="_blank" rel="noopener">MacOS 10.15 Catalina安装提示程序副本损坏，黑苹果教程</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>使用iTerm2 实现 SSH 快联</title>
    <url>/2017/11/16/iterm2-ssh/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/11/16/iterm2-ssh/0.gif" alt="0"></p>
<a id="more"></a>
<h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><blockquote>
<p>iTerm 2 is a terminal emulator for Mac OS X that does amazing things.</p>
</blockquote>
<p>iTerm2 是一个终端模拟器，官方网站：<a href="http://www.iterm2.com/" target="_blank" rel="noopener">http://www.iterm2.com/</a></p>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p>Oh My Zsh 用来管理 Zsh 配置的，自带了好用的基本配置，基本都是 Zsh 的标配了，你不用再一步步重新配置 Zsh ，节约你的宝贵时间</p>
<p>项目主页：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>
<h2 id="配置-SSH-快链"><a href="#配置-SSH-快链" class="headerlink" title="配置 SSH 快链"></a>配置 SSH 快链</h2><p>原理：<br>一般情况下 都是 使用<code>ssh -p &lt;端口号&gt; &lt;用户名&gt;@&lt;ip地址&gt;</code>这种格式登录进行操作。 </p>
<p>这里借助 <strong>sshpass</strong> 来记住密码</p>
<h3 id="1-安装-sshpass"><a href="#1-安装-sshpass" class="headerlink" title="1. 安装 sshpass"></a>1. 安装 sshpass</h3><blockquote>
<p>具体可参考 <a href="https://gist.github.com/arunoda/7790979" target="_blank" rel="noopener">Installing SSHPASS</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb</span><br></pre></td></tr></table></figure>
<h3 id="2-使用密码"><a href="#2-使用密码" class="headerlink" title="2. 使用密码"></a>2. 使用密码</h3><ul>
<li><p>创建一个目录 并建立要存储的密码。</p>
<ul>
<li><code>mkdir ~/sshpass &amp;&amp; cd ~/sshpass</code></li>
<li><code>vim password-1</code></li>
<li>在<code>password-1</code>文件中填写密码</li>
</ul>
</li>
<li><p>打开<code>iTerm2</code>,<code>Profiles---&gt;Open Profiles...---&gt;Edit Profiles...</code></p>
</li>
<li>输入的Command命令示例:<code>/usr/local/bin/sshpass -f ~/sshpass/comweb05 ssh -p22 r root@192.0.1.80</code></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/11/16/iterm2-ssh/1.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/11/16/iterm2-ssh/2.png" alt="2"></p>
<h3 id="2-使用秘钥文件"><a href="#2-使用秘钥文件" class="headerlink" title="2. 使用秘钥文件"></a>2. 使用秘钥文件</h3><p>其他步骤一样 只需要修改命令为一下的那种即可</p>
<ul>
<li>输入的命令格式为 <code>ssh root@192.0.1.80 -i ~/.ssh/id_rsa</code></li>
</ul>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>Q: mov 文件 转 gif</p>
<p>A: <code>ffmpeg-79303-g0ffa9e6/ffmpeg -i demo.mov  -pix_fmt rgb24 -r 10 -f gif demo.gif</code></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://latlonworld.com/article/create-animated-screencast-gif-on-mac.html" target="_blank" rel="noopener">在Mac上录制屏幕并制作gif</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>CentOS 7 安装jara7.3.3 破解+汉化 一篇就够了(By-Ruicky)</title>
    <url>/2017/04/26/jara-install/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/0.jpeg" alt="1"></p>
<a id="more"></a>
<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><h2 id="1-安装JAVA环境"><a href="#1-安装JAVA环境" class="headerlink" title="1. 安装JAVA环境"></a>1. 安装JAVA环境</h2><ul>
<li>去<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">官网</a>选择对应的版本，这里选择 <code>jdk-8u131-linux-x64.tar.gz</code><ul>
<li>下载的时候在服务器使用wget命令下载 在tar解压的时候报错，原因是，下载的是一个html网页而不是一个文件包，最好本地下载好后上传上去。</li>
</ul>
</li>
<li>本地下载地址为: <a href="https://pan.baidu.com/s/1dE4YeDb" target="_blank" rel="noopener">百度云</a> gxdp  </li>
<li>官网地址为：<a href="http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz" target="_blank" rel="noopener">jdk-8u131-linux-x64.tar.gz</a><ul>
<li>可用wget 这样下载 <code>wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz</code></li>
</ul>
</li>
</ul>
<ul>
<li><p>移动文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u131-linux-x64.tar.gz</span><br><span class="line">mkdir /usr/java</span><br><span class="line">mv  jdk1.8.0_131/ /usr/java/</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置java环境变量<br>-</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_131</span><br><span class="line">export JRE_HOME=/usr/java/jdk1.8.0_131/jre</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/jt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-创建MySQL数据库"><a href="#2-创建MySQL数据库" class="headerlink" title="2. 创建MySQL数据库"></a>2. 创建MySQL数据库</h2><ul>
<li>由于是使用的 阿里云数据库 步骤省略</li>
<li>放上创建本地jia数据库sql语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database jira default character set utf8 collate utf8_bin;</span><br><span class="line"></span><br><span class="line">grant all on `jira`.* to &apos;haijupai&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br></pre></td></tr></table></figure>
<h1 id="安装jira7-3-3"><a href="#安装jira7-3-3" class="headerlink" title="安装jira7.3.3"></a>安装jira7.3.3</h1><h2 id="1-下载源码包，官网"><a href="#1-下载源码包，官网" class="headerlink" title="1. 下载源码包，官网"></a>1. 下载源码包，<a href="https://www.atlassian.com/software/jira/download" target="_blank" rel="noopener">官网</a></h2><ul>
<li>本地下载地址为:<a href="https://pan.baidu.com/s/1c22858W" target="_blank" rel="noopener">百度云</a> xmzv</li>
<li>官网地址为：<a href="https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-7.3.3-x64.bin" target="_blank" rel="noopener">atlassian-jira-software-7.3.3-x64.bin</a></li>
</ul>
<h2 id="2-安装jira"><a href="#2-安装jira" class="headerlink" title="2. 安装jira"></a>2. 安装jira</h2><ul>
<li><code>chmod 755 atlassian-jira-software-7.3.3-x64.bin</code></li>
<li>执行安装 <code>./atlassian-jira-software-7.3.3-x64.bin</code></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/17.png" alt="1"></p>
<h2 id="3-破解-MySQL驱动"><a href="#3-破解-MySQL驱动" class="headerlink" title="3.破解+MySQL驱动"></a>3.破解+MySQL驱动</h2><ul>
<li>下载破解包：<a href="https://pan.baidu.com/s/1pL2RYB5" target="_blank" rel="noopener">百度云</a> 6cca</li>
<li>下载MySQL驱动包: <a href="https://pan.baidu.com/s/1qYmAZmc" target="_blank" rel="noopener">百度云</a> 8d6p</li>
<li>上传文件包到 <code>/opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</code>目录下。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/1.png" alt="1"></li>
<li><del>修改默认端口8080</del>(有错误，待确认)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> cd  /opt/atlassian/jira/conf</span><br><span class="line">vim server.xml</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/2.png" alt="1"></p>
<h2 id="4-配置jara"><a href="#4-配置jara" class="headerlink" title="4. 配置jara"></a>4. 配置jara</h2><ul>
<li><p>启动jira</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> cd /opt/atlassian/jira/bin/</span><br><span class="line">./start-jira.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>启动后发现，mysql驱动没加载。<code>/opt/atlassian/jira/bin/shutdown.sh</code> 然后 <code>/opt/atlassian/jira/bin/startup.sh</code> 就ok了</li>
</ul>
</li>
<li>配置<ul>
<li>在浏览器中打开<code>http://主机ip:8080</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/3.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/4.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/5.png" alt="1"></li>
</ul>
</li>
</ul>
<p>数据库初始化需要一点时间，稍等即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/6.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/7.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/8.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/9.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/10.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/11.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/12.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/13.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/14.png" alt="1"></p>
<h2 id="5-汉化"><a href="#5-汉化" class="headerlink" title="5.汉化"></a>5.汉化</h2><ul>
<li>下载汉化包（注意版本）<ul>
<li>官网下载地址: <a href="https://translations.atlassian.com/dashboard/download?lang=zh_CN#/JIRA Core/7.3.3" target="_blank" rel="noopener">官网</a></li>
<li>本地下载地址为：<a href="https://pan.baidu.com/s/1jIt8LBC" target="_blank" rel="noopener">百度云</a> 6n9v</li>
</ul>
</li>
<li><p>上传汉化包<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/15.png" alt="1"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/16.png" alt="1">    </p>
</li>
<li><p>配置，生效<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/21.png" alt="1"></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/22.png" alt="1">   </p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/04/26/jara-install/23.png" alt="1">  </p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="http://www.jianshu.com/p/116774f923bf" target="_blank" rel="noopener">centos7 安装及破解 jira 7.3.3</a></p>
<p><a href="http://www.ilanni.com/?p=12119" target="_blank" rel="noopener">烂泥：jira7.2安装、中文及破解</a></p>
<p><a href="http://yijiebuyi.com/blog/21a0f478acfa11d427f64f3360c625b3.html" target="_blank" rel="noopener">CentOS6.3 64位系统安装破解版 jira6.3.3</a></p>
<p><a href="https://tecadmin.net/install-java-8-on-centos-rhel-and-fedora/" target="_blank" rel="noopener">How to Install JAVA 8 (JDK/JRE 8u121) on CentOS/RHEL and Fedora</a></p>
<p><a href="http://www.cnblogs.com/Xiao-Bing/p/6744719.html" target="_blank" rel="noopener">CentOS7 安装 JIRA 7.2.x 教程：下载、安装、汉化、破解</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>jara</tag>
      </tags>
  </entry>
  <entry>
    <title>获取京东 cookie 的正确姿势</title>
    <url>/2020/07/18/jd-cookie/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/0.png" alt="0"><br><a id="more"></a></p>
<h1 id="获取京东-cookie-的正确姿势"><a href="#获取京东-cookie-的正确姿势" class="headerlink" title="获取京东 cookie 的正确姿势"></a>获取京东 cookie 的正确姿势</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前写过一篇文章<a href="https://ruicky.me/2020/06/05/jd-sign/" target="_blank" rel="noopener">京东定时签到-GitHub 实现</a>，比较有多的小伙伴进行安装，实验，反馈很高。其中获取 cookie，这个比较过程，当时写的比较仓储，所以现在单开一篇文章来说明，想要自动化京东签到的可以参考那篇文章。每天四五十豆豆哦，另外，记得给我的GitHub 项目记得给个 star 哦~~</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>chrome 浏览器(谷歌浏览器)</li>
</ul>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li>打开 Chrome 浏览器(以下皆简称 Chrome)。</li>
<li>打开开发者模式，快捷键 Windows 系统为 F12(Mac 为 command+option+i)，或者对当前页面右键，选择其中的“检查”。</li>
<li>选择手机模式。在打开后点击手机图标的小 icon 进入手机模式,同时勾选’Preserve log’选项。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/手机模式.png" alt="手机模式"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/preserve.png" alt="preserve"></li>
<li>选择手机型号<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/手机型号.png" alt="手机型号"></li>
<li>浏览器中输入地址 <code>https://plogin.m.jd.com/login/login</code></li>
<li>输入相关的账号密码信息，<strong>建议手机号，验证码登录</strong></li>
<li>登录完成后，会跳转到首页，清空 Network 下的请求。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/清空请求.png" alt="清空请求"></li>
<li>在请求搜索框搜索 <code>QueryUserInfoM</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/搜索.png" alt="搜索"></li>
<li>打开该请求，找到 <code>Request Headers</code> 节点下面，复制完成的 cookie<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/18/jd-cookie/复制cookie.png" alt="复制cookie"></li>
</ol>
<p><strong>注意：</strong></p>
<ol>
<li>必须勾选 <code>Preserve log</code>记录所以日志否则搜索不到</li>
<li>选择节点为 <code>Request Headers</code>下的 cookie</li>
<li>复制的时候只需复制 cookie 里的内容。不要复制过多的<strong>其他节点</strong>或者连带 <strong>cookie 本身</strong>。</li>
<li>复制完后可以粘贴到其他编辑器中进行查看一般都是一行，如果你是多行的话，可能有问题。（PS：小白同学，由于 cookie 本身内容很多，如果你的编辑器设置的自动换行，请注意行号，不要认为换了就是多行哈。）</li>
<li>如果在过程中发现有的东西没配置，但是已经登录完了，没办法在复现了，咋整？少年，你听说过 Chrome 的无痕模式吗？它可以帮助你。</li>
</ol>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>经过上面的折腾，相信你肯定会获取到自己心仪的 cookie。有人就要问了，整着麻烦，有必要吗？其实吧，有很多软件或者可一个给你做个 GUI，但是作为爱折腾的人，你要明白怎么来的，才能更好的自己扩展，不是吗？</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>京东</tag>
        <tag>签到</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>京东定时签到-GitHub 实现</title>
    <url>/2020/06/05/jd-sign/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/0.png" alt="header"></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>各位大佬好，最近趁着 618 年中的购物活动，很多针对淘宝的喵币和京东的叠蛋糕的脚本，层出不穷。本教程只是针对 <a href="https://github.com/NobyDa/Script" target="_blank" rel="noopener">NobyDa</a>的签到脚本和 GitHub 的 Actions 来做一个托管的签到。以下有部分内容，比较偏向小白，明白的原理的可直接自己部署。</p>
<p>大体思路：</p>
<ol>
<li>自动下载 NobyDa 大佬的最新脚本</li>
<li>修改脚本中的参数值</li>
<li>基于 GitHub Actions 自动执行脚本</li>
</ol>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol>
<li>GitHub 账户</li>
<li>京东账户</li>
<li>计算机基础知识</li>
<li>Server 酱[可选，主要用来推送签到结果]</li>
</ol>
<h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p>通过此教程，你将每天凌晨<strong>定时签到</strong>，<strong>无需服务器</strong>，也不需要很多的开发，只需要简单的部署即可。另外因为京东 cookie 的原因，如果失效了只需要更改 GitHub 中 secret 中的 JD_COOKIE 即可，可以算是非常的简捷方便。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/result.jpg" alt="result"></p>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p><strong>你的 cookie 存储在 GitHub 的 secrets 中所以，本人还有其他人是看不到，也无法使用的。敬请放心。</strong></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="GitHub-注册"><a href="#GitHub-注册" class="headerlink" title="GitHub 注册"></a>GitHub 注册</h3><ol>
<li>首先打开官网 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></li>
<li>注册页面填入信息<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/github.jpg" alt="github"></li>
</ol>
<ul>
<li>Username: 你的用户名，GitHub 全网唯一，它会自动检测是否有注册，最好英文</li>
<li>Email：你自己的邮箱</li>
<li>Password：密码</li>
</ul>
<ol start="3">
<li>输入上述信息后，点击 <code>Sign up for GitHub</code> 按钮，会给你发送一封确认邮件，确认即可。</li>
</ol>
<h3 id="Server-酱配置-【可选】"><a href="#Server-酱配置-【可选】" class="headerlink" title="Server 酱配置 【可选】"></a>Server 酱配置 【可选】</h3><p>「Server酱」，英文名「ServerChan」，是一款「程序员」和「服务器」之间的通信软件。</p>
<p>使用 Server酱 前提是已有了 GitHub 账号，登录获取到 key 值，并绑定微信即可。然后会把每日签到的消息给你推送到微信中。</p>
<ol>
<li>打开 server 酱的官网[<a href="http://sc.ftqq.com/3.version]" target="_blank" rel="noopener">http://sc.ftqq.com/3.version]</a></li>
<li>点击右上角的 <code>登入</code> 链接<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/server-1.jpg" alt="server-1"></li>
<li>会跳入 GitHub 授权页，在该页面填入你在上方注册的 GitHub 账户即可<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/server-2.jpg" alt="server-2.jpg"></li>
<li>点击上方的 <code>微信推送</code> 链接， 然后点击页面中的 <code>开始绑定</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/server-3.jpg" alt="server-3"></li>
<li>掏出手机，打开微信，扫描屏幕上的二维码，如果未关注，先关注，然后在绑定即可。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/server-4.jpg" alt="server-4"></li>
<li>绑定后，点击上方的 <code>发送消息</code> 链接，就可以看到你自己的 key 值，保存下来，下面会用到。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/server-5.jpg" alt="server-5"></li>
</ol>
<h3 id="获取京东-cookie"><a href="#获取京东-cookie" class="headerlink" title="获取京东 cookie"></a>获取京东 cookie</h3><p>描述，所有的操作都是基于京东的账户的 cookie 操作的，所以这一步很重要。大概率使用<strong>手机号验证码登录的</strong>京东的 cookie 有效期大概一个月(没有实际论证过，存疑)。</p>
<ol>
<li>电脑上打开 Chrome 浏览器，按 F12 打开开发者工具，并点击工具栏的左上角选择手机模式。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/chrome-1.png" alt="chrome-1"></li>
<li>然后选中一个设备<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/chrome-2.png" alt="chrome-2"></li>
<li>输入地址 <code>https://plogin.m.jd.com/login/login</code> 并打开网页，输入手机号验证码，点击登录。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/chrome-3.jpg" alt="chrome-3"></li>
<li>选择右侧工具栏中的 <code>console</code> 然后在下放输入 <code>copy(document.cookie)</code> 它会拷贝当前的 cookie， 然后在一个文本编辑器中或其他可编辑的窗口中复制出内容，并保存好，下方要用。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/chrome-4.jpg" alt="chrome-4"></li>
</ol>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="Fork-代码"><a href="#Fork-代码" class="headerlink" title="Fork 代码"></a>Fork 代码</h3><p>相关的基础程序都已经写好，放在了，大家可以直接 fork 代码到自己的项目中。</p>
<ul>
<li>打开 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，登录自己的 GitHub 账户。</li>
<li>浏览器访问 <a href="https://github.com/ruicky/jd_sign_bot" target="_blank" rel="noopener">ruicky/jd_sign_bot</a><ul>
<li>点击 右上角的 Star 按钮。</li>
<li>点击 右上角的 Fork 按钮。</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/fork.jpg" alt="fork"></p>
<h3 id="GitHub-配置"><a href="#GitHub-配置" class="headerlink" title="GitHub 配置"></a>GitHub 配置</h3><ul>
<li>点击页面的 <code>Settings</code> 操作按钮<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/settings.jpg" alt="settings"></li>
<li>点击左侧的 <code>Secrets</code> 选项卡<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/secrets.jpg" alt="secrets"></li>
<li>点击页面右上角的 <code>New secret</code> 按钮<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/new-secret.jpg" alt="new-secret"></li>
<li>填写 京东 cookie 的 secret  信息<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/add-secret.jpg" alt="add-secret"><ul>
<li>Name: JD_COOKIE</li>
<li>Value: 你自己的 京东 cookie 值</li>
<li>填写完成后 点击 <code>Add secret</code> 按钮</li>
</ul>
</li>
</ul>
<p>下面的内容会配置通知微信推送的 <code>Server 酱</code>，属于可选操作。</p>
<ul>
<li>再次点击页面右上角的 <code>New secret</code> 按钮<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/new-secret.jpg" alt="new-secret"></li>
<li>填写 server 酱 key 的  secret  信息[<em>可选</em>]<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/add-secret-push.jpg" alt="add-secret-push"><ul>
<li>Name: PUSH_KEY</li>
<li>Value: 你自己的 server key 值</li>
<li>填写完成后 点击 <code>Add secret</code> 按钮</li>
</ul>
</li>
<li>启动 <code>GitHub Actions</code><ul>
<li>点击功能栏中的 <code>Actions</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/actions.jpg" alt="actions"></li>
<li>点击绿色按钮，启用 <code>Actions</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/enable-actions.jpg" alt="enable-actions"></li>
</ul>
</li>
</ul>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>  先说原理，目前的 <code>GitHub Actions</code> 配置的执行触发有 2 个：</p>
<ol>
<li>定时执行</li>
<li><p>推送更新代码执行</p>
<p>大家可以根据第二点的特性来进行测试。例如编辑 README.md 文档，增加个回车，然后提交，来进行触发。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/edit-file.jpg" alt="edit-file"><br>然后查看 <code>Actions</code> 的日志看是否成功。</p>
<ul>
<li>成功的日志<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/success-log.jpg" alt="success-log"></li>
<li>错误的日志<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/05/jd-sign/faile-log.jpg" alt="faile-log"></li>
</ul>
</li>
</ol>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q: Actions 日志里面显示 Key 报错，怎么处理？<br>A: 那可能是你的 Cookie 的问题，查看是否粘贴错误，例如多粘其他参数什么的。（小技巧：可以把 key 复制出来在电脑的编辑器上看是否是 1 行）</p>
<p>Q：按照配置，没有看到 Actions 执行，也没收到提示？<br>A：首先查看你的 Actions 中是否启用。默认 Fork 的分支，是关闭的。然后在查看你的日志，看对应的错误是什么。再次看是否自己的代码跟我的最新的是否一致。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>注意：</strong> 京东 <code>Cookie</code> 的有效期如果使用扫码登录的 1 天，使用手机验证码登录的 1 个月。建议使用手机验证码登录。<br>每过一个月 <code>Cookie</code> 会过期，所以要定时去记得更新你的 <code>Secrets</code> 中的 <code>JD_COOKIE</code>, 否则，程序不能正常运行。<br>整个流程比较简单，相关操作过程也已经写明，如果还有不明白的地方可在下方留言。如果给我的相关项目给个 <code>Star</code> 会更好哦~</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>京东</tag>
        <tag>签到</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins 使用过程中出现的错误及解决方法(By-Ruicky)</title>
    <url>/2017/05/24/jenkins-error/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/jenkins-error/0.jpg" alt="img"></p>
<a id="more"></a>
<h1 id="jenkins-使用过程中出现的错误及解决方法-By-Ruicky"><a href="#jenkins-使用过程中出现的错误及解决方法-By-Ruicky" class="headerlink" title="jenkins 使用过程中出现的错误及解决方法(By-Ruicky)"></a>jenkins 使用过程中出现的错误及解决方法(By-Ruicky)</h1><p>这里是记录在使用jenkins过程中出现的问题，以及解决思路跟方法。</p>
<ol>
<li><code>java.io.IOException: No space left on device</code></li>
</ol>
<ul>
<li>猜想：这个肯定是服务器没有存储空间了。</li>
<li>先去服务器中查看超过800M的文件有哪些.<ul>
<li><code>find . -type f -size +800M  -print0 | xargs -0 du -h | sort -nr</code></li>
<li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/jenkins-error/1.png" alt="img"></li>
<li>也就是这个jenkins日志文件太大了。</li>
</ul>
</li>
</ul>
<p><strong>解决方法：</strong></p>
<ul>
<li>在服务器移除那个超大的日志  <ul>
<li><code>rm -f ./var/log/jenkins/jenkins.log</code></li>
</ul>
</li>
<li>配置日志级别<ul>
<li>系统管理 —&gt; System Log —&gt; 日志级别(在左侧)  </li>
<li>增加 <code>Name: javax.jmdns  Level: off</code>  </li>
</ul>
</li>
<li>重启jenkins<ul>
<li><code>http://your-server-name/restart</code>  </li>
</ul>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="https://stackoverflow.com/questions/31719756/how-to-stop-jenkins-log-from-becoming-huge" target="_blank" rel="noopener">How to stop Jenkins log from becoming huge?</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建 IntelliJ IDEA license server 服务器</title>
    <url>/2018/07/13/jetbrains-license-server/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/07/13/jetbrains-license-server/0.png" alt="img"><br><a id="more"></a></p>
<h1 id="搭建-IntelliJ-IDEA-license-server-服务器"><a href="#搭建-IntelliJ-IDEA-license-server-服务器" class="headerlink" title="搭建 IntelliJ IDEA license server 服务器"></a>搭建 IntelliJ IDEA license server 服务器</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote>
<ol>
<li>idea license server包: <a href="http://blog.lanyus.com/archives/228.html" target="_blank" rel="noopener">http://blog.lanyus.com/archives/228.html</a></li>
<li>Linux 独立IP的服务器 </li>
<li>nginx</li>
<li>域名</li>
</ol>
</blockquote>
<p>PS: 本教程使用的是V1.6版本的。链接: <a href="https://pan.baidu.com/s/1dFS9DaL" target="_blank" rel="noopener">https://pan.baidu.com/s/1dFS9DaL</a> 密码: xxc2</p>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><ol>
<li><p>编写可执行文件</p>
<ul>
<li><code>vim /root/software/IntelliJIDEALicenseServer/start.sh</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line">sudo /root/software/IntelliJIDEALicenseServer/start.sh &amp; bg</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>设置执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod a+x /root/software/IntelliJIDEALicenseServer/start.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行程序</p>
<ul>
<li><code>sh /root/software/IntelliJIDEALicenseServer/start.sh</code></li>
</ul>
</li>
<li><p>开机启动</p>
<ul>
<li><code>vim /etc/rc.d/rc.local</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">/root/software/IntelliJIDEALicenseServer/start.sh</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>配置nginx</p>
<ul>
<li><code>cd /etc/nginx/conf.d</code></li>
<li><p><code>vim jetbrains.xxx.com.conf</code> 其中xxx更换为你的域名</p>
<pre><code>server {
listen 80;
server_name jetbrains.xxx.com;

location / {
   proxy_pass http://127.0.0.1:1027;
   proxy_redirect off;
   proxy_set_header Host $host;
   proxy_set_header X-Real-IP $remote_addr;

   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
}
access_log /tmp/jetbrains.log; #access_log end
error_log /tmp/jetbrains_error.log; #error_log end
}
</code></pre></li>
</ul>
</li>
<li>配置域名解析<ul>
<li>打开自己的域名官网</li>
<li>增加一条A记录解析到服务器中</li>
</ul>
</li>
</ol>
<h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><blockquote>
<ol>
<li><a href="https://www.jianshu.com/p/caef0148c834" target="_blank" rel="noopener">IntelliJ IDEA license server服务器搭建</a></li>
<li><a href="http://blog.lanyus.com/archives/326.html" target="_blank" rel="noopener">ilanyu’s Blog</a>   </li>
<li><a href="https://www.exuan.org/2018/03/06/jetbrains-license-server/" target="_blank" rel="noopener">centos 搭建 jetbrains-license-server</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>jetbrains</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 下 抓包调试工具</title>
    <url>/2017/09/28/mac-capture/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/09/28/mac-capture/0.jpg" alt="img"><br><a id="more"></a></p>
<h1 id="Mac-下-抓包调试工具"><a href="#Mac-下-抓包调试工具" class="headerlink" title="Mac 下 抓包调试工具"></a>Mac 下 抓包调试工具</h1><h2 id="1-whistle"><a href="#1-whistle" class="headerlink" title="1. whistle"></a>1. whistle</h2><ul>
<li>开源地址： <code>https://github.com/avwo/whistle</code></li>
<li>安装 <code>sudo npm install -g whistle</code></li>
<li>快速开始： <ul>
<li>启动whistle: <code>w2 start</code> </li>
<li>停止whistle: <code>w2 stop</code></li>
</ul>
</li>
<li>特点：基于Node实现的跨平台web调试代理工具  </li>
</ul>
<h2 id="2-spy-debugger"><a href="#2-spy-debugger" class="headerlink" title="2. spy-debugger"></a>2. spy-debugger</h2><ul>
<li>开源地址： <code>https://github.com/wuchangming/spy-debugger</code></li>
<li>安装 <code>sudo npm install spy-debugger -g</code></li>
<li>快速开始：<ul>
<li>启动: <code>spy-debugge</code></li>
<li>停止： 命令行中 ctrl + c</li>
</ul>
</li>
<li>特点： 一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybirdApp等）。支持HTTP/HTTPS，无需USB连接设备。  </li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>MAC</tag>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC 中 Parallels Desktop安装 windows 10 系统</title>
    <url>/2018/03/09/mac-install-win/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/0.png" alt="1.png"><br><a id="more"></a></p>
<h1 id="MAC-中-Parallels-Desktop安装-windows-10-系统"><a href="#MAC-中-Parallels-Desktop安装-windows-10-系统" class="headerlink" title="MAC 中 Parallels Desktop安装 windows 10 系统"></a>MAC 中 Parallels Desktop安装 windows 10 系统</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Paralles Desktop 是mac 上运行效率最高的虚拟机之一，在图形方面parallel Desktop 效率非常高，其融合模式就好像windows 和Mac os 合二为一了</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li><a href="http://www.parallels.com/cn/" target="_blank" rel="noopener">Parallels Desktop 13</a></li>
<li><a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO" target="_blank" rel="noopener">windows 10 官方系统 （建议下载64位Windows 10）</a></li>
<li><a href="http://mac.xunlei.com/" target="_blank" rel="noopener">Mac 版迅雷</a></li>
</ol>
<p>PS: 推荐一个下载镜像更快的地方<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">ItTellYou</a> enjoy it!</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>下载下载好 <code>Parallels Desktop</code>。使用迅雷下载好<code>Windows10</code>的镜像</li>
<li>打开 <code>Parallels Desktop</code><ul>
<li>选择 “新建虚拟机”<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/1.png" alt="1.png">  </li>
<li>选择 “镜像文件”<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/2.png" alt="2.png">  </li>
<li>勾选“快速安装”，取消勾选“该版本需要提供产品密匙”<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/3.png" alt="3.png">    </li>
<li>选择Windows工作场景，根据需求按说明选一个即可<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/4.png" alt="4.png">      </li>
<li>勾选“在 Mac 桌面上创建别名”和“在安装前设定”<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/5.png" alt="5.png">        </li>
<li>设置Windows的硬件配置和选项，主要是内存设置，根据你的Mac配置来选择内存大小，4G机型建议分配2G内存，8G及以上机型建议分配4G或以上内存给Windows<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/6.png" alt="6.png"></li>
<li>都设置好后点击继续就会开始安装Windows 10了，Windows 10的安装设置非常简单<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/7.png" alt="7.png"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/8.png" alt="8.png"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/9.png" alt="9.png"></li>
<li>等待片刻即可安装完成，进入Windows 10后会提示是否启用共享的应用程序，建议选择“否”<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/10.png" alt="10.png"><br>+到这来Windows 10就已经安装完成了，下面只要激活Windows了<ul>
<li>下载 Windows 10激活工具：</li>
<li>链接: <a href="https://pan.baidu.com/s/1ae30dL48x4tXshG64C0ziA" target="_blank" rel="noopener">https://pan.baidu.com/s/1ae30dL48x4tXshG64C0ziA</a> 密码: 2che</li>
<li>打开 KMS10.exe，Windows的用户帐户控制会提示“你想允许来自位置发布者的此应用对你的电脑进行更改吗？”，点击“是”，然后点击“永久体验Windows和Office正版”即可激活Windows 10<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/11.png" alt="11.png"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/12.png" alt="12.png">  </li>
</ul>
</li>
<li>Windows 10全屏模式和窗口模式切换，点击窗口左上角第三个绿色的按钮就能切换至全屏模式了，要切换回Mac，只需在触摸板上四个手指同时接触触摸板然后往右移动即可会到Mac系统，反之即可会到Windows 10系统<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/13.png" alt="13.png">      </li>
<li>优盘移动硬盘灯外接设备如何接入Windows 10系统：插上USB外接设备后Parallels Desktop会提示要接入到哪个系统，选择你想接入的系统即可，在Windows 10全屏模式下也可以将鼠标移至窗口顶部，会显示Parallels Desktop菜单，点击“设备→外部设备→选择你的USB”即可接入到Windows，再点一次就可将USB设备接入至Mac系统<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/14.png" alt="14.png"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/15.png" alt="15.png"></li>
<li>调出桌面图标比如“我的电脑（Windows 10 改为此电脑）”等<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/16.png" alt="16.png"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/17.png" alt="17.png"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/mac-install-win/18.png" alt="18.png">  </li>
</ul>
</li>
</ol>
<p>Parallels Desktop 安装 Windows 10 就全部完成了，接下来其他的 Windows 10 安装软件和使用就和一般的电脑一样了，你学会了吗？</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p><a href="https://www.macappstore.net/tips/parallels-desktop-setup-win10/" target="_blank" rel="noopener">一步一步教你用Parallels Desktop安装Windows 10</a></p>
</blockquote>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>MAC</tag>
        <tag>Windows</tag>
        <tag>Parallels Desktop</tag>
      </tags>
  </entry>
  <entry>
    <title>新 MAC，如何快速上手？</title>
    <url>/2018/09/21/mac-new/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/21/mac-new/0.jpg" alt="img"><br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  最近收到新的 mac 电脑，说要配置一下环境，感觉猛的一下不知道，该如何入手。于是有了这篇文章，主要是帮大家，快速的搭建起属于自己的 MAC 环境。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>相信大家都已经开机，并已经完成基础的配置了，接下来就是一些大家常用的软件整理。</p>
<h3 id="1-更新系统"><a href="#1-更新系统" class="headerlink" title="1. 更新系统"></a>1. 更新系统</h3><ul>
<li>打开 <code>APP STORE</code> </li>
<li>在上面标签中选择 <code>更新</code></li>
<li>找到 <code>软件更新</code> 点击 <code>更新</code> 按钮<blockquote>
<p>PS:估计得1到2个小时，看网速。</p>
</blockquote>
</li>
</ul>
<h3 id="2-安装-沟通工具"><a href="#2-安装-沟通工具" class="headerlink" title="2. 安装 沟通工具"></a>2. 安装 <strong>沟通工具</strong></h3><ul>
<li>微信 <ul>
<li><a href="http://weixin.qq.com/cgi-bin/readtemplate?t=mac&amp;lang=zh_CN" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
<li><a href="https://github.com/TKkk-iOSer/WeChatPlugin-MacOS" target="_blank" rel="noopener">macOS 版微信小助手 </a>(PS:可防撤回，自动回复，多微信，免认证登录等)</li>
</ul>
</li>
<li>QQ<ul>
<li><a href="http://im.qq.com/macqq/" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
<li>钉钉<ul>
<li><a href="https://tms.dingtalk.com/markets/dingtalk/download" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
</ul>
<h3 id="3-安装-ShadowsocksX-NG"><a href="#3-安装-ShadowsocksX-NG" class="headerlink" title="3. 安装 ShadowsocksX-NG"></a>3. 安装 <strong>ShadowsocksX-NG</strong></h3><ul>
<li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">下载地址，点击跳转</a>   </li>
<li>说明：翻墙必备。</li>
</ul>
<h3 id="4-安装-编程工具，非战斗人员可跳过。"><a href="#4-安装-编程工具，非战斗人员可跳过。" class="headerlink" title="4. 安装 编程工具，非战斗人员可跳过。"></a>4. 安装 <strong>编程工具</strong>，非<em>战斗人员</em>可跳过。</h3><ul>
<li><strong>Chrome</strong>：浏览器<ul>
<li>说明：基于你已经翻墙。</li>
<li><a href="https://www.google.com/chrome/" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
<li><strong>DataGrip</strong>：数据库<ul>
<li>说明：万能的一款数据库连接工具</li>
<li><a href="https://www.jetbrains.com/datagrip/" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
<li><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">激活</a></li>
</ul>
</li>
<li><strong>Visual Studio Code</strong>：编辑器<ul>
<li><a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
<li><strong>Xcode</strong>：开发工具<ul>
<li>在 <code>App Store</code> 下载</li>
</ul>
</li>
<li><strong>Postman</strong>：接口调试工具<ul>
<li>说明：该工具是个基于谷歌浏览器的插件，所以请先科学上网，并安装了 Chrome</li>
<li><a href="https://www.getpostman.com/apps" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
<li><strong>Docker</strong>：容器<ul>
<li>说明：该网站貌似也被墙了，所以你懂得。</li>
<li><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
<li><strong>Sourcetree</strong>：git图形化工具<ul>
<li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
<li><strong>Microsoft Remote Desktop</strong>：MAC 远程连接 Windows <ul>
<li><a href="https://rink.hockeyapp.net/apps/5e0c144289a51fca2d3bfa39ce7f2b06/" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
<li><strong>iTerm2</strong>：命令行工具 <ul>
<li><a href="https://iterm2.com/downloads/stable/latest" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">安装oh-my-zsh</a></li>
</ul>
</li>
<li><strong>Transmit</strong>：功能齐全的 FTP 客户端<ul>
<li><a href="http://xclient.info/s/transmit.html?t=a5394ba268ffbedd3c9bb0d9446eb6226ee067a6" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
<li><strong>Sketch</strong>：轻量易用的矢量设计工具    <ul>
<li><a href="http://xclient.info/s/sketch.html?t=a5394ba268ffbedd3c9bb0d9446eb6226ee067a6" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
</ul>
<h3 id="5-办公软件"><a href="#5-办公软件" class="headerlink" title="5. 办公软件"></a>5. 办公软件</h3><ul>
<li><strong>Office 2016 for MAC</strong><ul>
<li>给出种子地址，请用迅雷下载。</li>
<li><code>ed2k://|file|mu_office_home_and_business_2016_for_mac_mac_dvd_7027756.iso|1214924800|D6FA02597D30709949C4FEA6AA0F9D6B|/</code></li>
</ul>
</li>
</ul>
<h3 id="6-Dr-Cleaner-Pro-系统管家，优化助理，重复文件查找，软件深度卸载"><a href="#6-Dr-Cleaner-Pro-系统管家，优化助理，重复文件查找，软件深度卸载" class="headerlink" title="6. Dr. Cleaner Pro 系统管家，优化助理，重复文件查找，软件深度卸载"></a>6. <strong>Dr. Cleaner Pro</strong> 系统管家，优化助理，重复文件查找，软件深度卸载</h3><ul>
<li><a href="http://xclient.info/s/dr-cleaner-pro.html?t=a5394ba268ffbedd3c9bb0d9446eb6226ee067a" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
<h3 id="7-Parallels-Desktop-最佳Mac虚拟机解决方案"><a href="#7-Parallels-Desktop-最佳Mac虚拟机解决方案" class="headerlink" title="7. Parallels Desktop 最佳Mac虚拟机解决方案"></a>7. <strong>Parallels Desktop</strong> 最佳Mac虚拟机解决方案</h3><ul>
<li><a href="http://xclient.info/s/parallels-desktop.html?t=a5394ba268ffbedd3c9bb0d9446eb6226ee067a6" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
<h3 id="8-下载工具"><a href="#8-下载工具" class="headerlink" title="8. 下载工具"></a>8. 下载工具</h3><ul>
<li><strong>迅雷</strong> <ul>
<li><a href="http://mac.xunlei.com/" target="_blank" rel="noopener">下载地址，点击跳转</a> </li>
<li><a href="https://zhuanlan.zhihu.com/p/26882055" target="_blank" rel="noopener">精简你的 MAC 迅雷，去广告，去除多余插件</a></li>
</ul>
</li>
<li><strong>百度网盘</strong><ul>
<li><a href="http://pan.baidu.com/download#pan" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
<li><a href="https://github.com/CodeTips/BaiduNetdiskPlugin-macOS" target="_blank" rel="noopener">百度网盘 破解SVIP、下载速度限制</a></li>
</ul>
</li>
</ul>
<h3 id="9-休闲工具"><a href="#9-休闲工具" class="headerlink" title="9. 休闲工具"></a>9. 休闲工具</h3><ul>
<li><strong>网易云音乐</strong><ul>
<li><a href="https://music.163.com/#/download" target="_blank" rel="noopener">下载地址，点击跳转</a></li>
</ul>
</li>
</ul>
<p>以上的安装包已经上传到百度云，想获取所有文件的朋友关注公众号【趣友】，在后台回复<strong>「mac上手」</strong>获取链接。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/21/mac-new/1.jpg" alt="mac上手"></p>
<p>​                    <strong>↓↓↓↓↓↓↓↓↓↓↓↓↓↓  扫码关注一下  ↓↓↓↓↓↓↓↓↓↓↓↓↓↓</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/21/mac-new/2.jpg" alt="公众号"></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>MAC</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS 修改短密码</title>
    <url>/2021/09/22/mac-password/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/22/mac-password/0.png" alt="img"><br><a id="more"></a></p>
<h1 id="Mac-OS-修改短密码"><a href="#Mac-OS-修改短密码" class="headerlink" title="Mac OS 修改短密码"></a>Mac OS 修改短密码</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从 Mac OS 10.14 以后，系统强制默认最低 4 位密码，如果想修改一个短密码，通过正常的操作界面，无法进行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your password did not meet the requirements specified by your server administrator. You may need to use different characters, numbers, or symbols in your password. If you’re not sure how you should change your password, contact your system administrator before trying again.</span><br></pre></td></tr></table></figure>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li>打开系统自带的终端</li>
<li>在终端中输入  <code>pwpolicy -clearaccountpolicies</code><br>意思是 允许设置任意密码</li>
<li>修改密码<ul>
<li>在 Mac 上，“系统偏好设置”，然后点按“用户与群组”</li>
<li>点按“更改密码”。</li>
<li>在“旧密码”栏输入您的当前密码。</li>
<li>在“新密码”栏中输入新密码，然后在“验证”栏中再次输入该密码。</li>
<li>输入能帮助您记忆密码的提示。</li>
<li>点按“更改密码”。</li>
</ul>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有的时候是很简单的事，但是做过一遍以后仅仅有个印象，不如笔记下来，方便之后查询。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p><a href="https://www.cnblogs.com/Summer6/p/12658140.html" target="_blank" rel="noopener">Mac os 10.14以上 取消4位数密码限制 设置成无密码或者任意位数（Mac os 10.15.4）</a><br><a href="https://support.apple.com/zh-cn/guide/mac-help/mchlp1550/mac" target="_blank" rel="noopener">在 Mac 上更改登录密码</a></p>
</blockquote>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>MAC</tag>
        <tag>教程</tag>
        <tag>密码</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 软件推荐 [2020-06]</title>
    <url>/2020/06/28/mac-software/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/06/28/mac-software/0.jpg" alt="0.jpg"><br><a id="more"></a></p>
<h1 id="Mac-软件推荐"><a href="#Mac-软件推荐" class="headerlink" title="Mac 软件推荐"></a>Mac 软件推荐</h1><p>时间：2020-06-10</p>
<h2 id="通讯类"><a href="#通讯类" class="headerlink" title="通讯类"></a>通讯类</h2><ul>
<li><a href="https://im.qq.com/download/" target="_blank" rel="noopener">QQ</a></li>
<li><a href="https://mac.weixin.qq.com/" target="_blank" rel="noopener">微信</a><ul>
<li>防撤退插件<a href="https://github.com/MustangYM/WeChatExtension-ForMac" target="_blank" rel="noopener">(WeChatExtension-ForMac)</a></li>
</ul>
</li>
<li><a href="https://page.dingtalk.com/wow/dingtalk/act/download" target="_blank" rel="noopener">钉钉</a></li>
<li>Telegram</li>
</ul>
<h2 id="影音播放"><a href="#影音播放" class="headerlink" title="影音播放"></a>影音播放</h2><ul>
<li><a href="https://iina.io/" target="_blank" rel="noopener">IINA</a></li>
<li><a href="https://music.163.com/#/download" target="_blank" rel="noopener">网易云音乐</a></li>
</ul>
<h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><ul>
<li><a href="https://dl.xunlei.com/#mod02" target="_blank" rel="noopener">迅雷</a></li>
<li><a href="https://macwk.com/soft/downie" target="_blank" rel="noopener">Downie 4</a></li>
<li><a href="https://macwk.com/soft/transmission" target="_blank" rel="noopener">Transmission</a></li>
</ul>
<h2 id="办公类"><a href="#办公类" class="headerlink" title="办公类"></a>办公类</h2><ul>
<li><a href="https://macwk.com/soft/office" target="_blank" rel="noopener">Microsoft Office 2019</a></li>
</ul>
<h2 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a>编程类</h2><ul>
<li><a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a></li>
<li><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">Visual Studio Code</a></li>
<li><a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">Chrome</a><ul>
<li><a href="https://www.postman.com/downloads/" target="_blank" rel="noopener">Postman</a></li>
</ul>
</li>
<li>DataGrip</li>
<li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a></li>
<li><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">Docker</a></li>
<li><a href="https://macwk.com/soft/sketch" target="_blank" rel="noopener">Sketch</a></li>
<li><a href="https://macwk.com/soft/xmind-8-pro" target="_blank" rel="noopener">XMind</a></li>
<li><a href="https://macwk.com/soft/adobe-photoshop-cc" target="_blank" rel="noopener">Photoshop</a></li>
<li><a href="https://macwk.com/soft/transmit" target="_blank" rel="noopener">Transmit</a></li>
</ul>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ul>
<li><a href="https://macwk.com/soft/paper" target="_blank" rel="noopener">pap.er</a></li>
<li><a href="https://macwk.com/soft/perpetual-calendar" target="_blank" rel="noopener">万年历</a></li>
<li><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a></li>
<li><a href="https://mac.softpedia.com/get/Utilities/Microsoft-Remote-Desktop-Connection.shtml" target="_blank" rel="noopener">Microsoft Remote Desktop</a></li>
<li><a href="https://www.yinxiang.com/download/" target="_blank" rel="noopener">印象笔记</a></li>
<li><a href="https://macwk.com/soft/parallels-desktop" target="_blank" rel="noopener">Parallels Desktop</a></li>
<li><a href="https://macwk.com/soft/balenaetcher" target="_blank" rel="noopener">balenaEtcher</a></li>
<li><a href="https://macwk.com/soft/reeder" target="_blank" rel="noopener">Reeder</a></li>
<li><a href="https://www.markeditor.com/free_download?app=text2image&amp;version=0.0.6" target="_blank" rel="noopener">Text2Image</a></li>
<li><a href="https://www.theunarchiver.com/" target="_blank" rel="noopener">The unarchiver</a></li>
<li><a href="https://www.notion.so/desktop" target="_blank" rel="noopener">Notion</a></li>
<li><a href="https://github.com/meowtec/Imagine" target="_blank" rel="noopener">Imagine</a></li>
<li><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">Picgo</a></li>
<li><a href="https://github.com/Cenmrev/V2RayX/releases" target="_blank" rel="noopener">V2RayX</a></li>
<li><a href="https://macwk.com/soft/atext" target="_blank" rel="noopener">aText</a></li>
<li><a href="https://macwk.com/soft/mos" target="_blank" rel="noopener">Mos</a></li>
<li><a href="https://www.u.tools/download.html" target="_blank" rel="noopener">uTools</a></li>
<li><a href="https://macwk.com/soft/paste" target="_blank" rel="noopener">Paste</a></li>
<li><a href="https://macwk.com/soft/ccleaner-pro" target="_blank" rel="noopener">CCleaner</a></li>
</ul>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><ul>
<li><a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="noopener">Python 3</a></li>
<li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js 10+</a></li>
</ul>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><ul>
<li><a href="https://brew.sh/" target="_blank" rel="noopener">brew</a></li>
<li><a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a></li>
<li><a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">youtube-dl</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>打造智能魔镜-序言</title>
    <url>/2017/10/14/mirror-0/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-0/0.jpg" alt="img"><br><a id="more"></a></p>
<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>有一天，在刷文章，突然看到一篇说树莓派打造魔镜的，整个后觉得特别酷，特别有范儿，然后我就想能不能自己也正一个呢，查资料后，发现已经有些文章了，但是整体做完后，发现有些地方不是写的很详细，就自己把制作过程中的东西给记录下来，就有了这一系列的文章。</p>
<p>附上一个,外国大神的视频，有条件的，<a href="https://www.youtube.com/watch?v=fkVBAcvbrjU" target="_blank" rel="noopener">可直接看</a>：</p>
<video width="480" height="320" controls><br><source src="0.mp4"><br></video>

<h2 id="这是一个使用树莓派，打造智能魔镜的教程。-展示结果如下"><a href="#这是一个使用树莓派，打造智能魔镜的教程。-展示结果如下" class="headerlink" title="这是一个使用树莓派，打造智能魔镜的教程。 展示结果如下"></a>这是一个使用树莓派，打造智能魔镜的教程。 展示结果如下</h2><video width="480" height="320" controls><br><source src="1.mp4"><br></video>

<h1 id="目录大纲"><a href="#目录大纲" class="headerlink" title="目录大纲"></a>目录大纲</h1><p>目录大纲<br><a href="https://ruicky.github.io/2017/10/14/mirror-0/">打造智能魔镜-序言</a><br><a href="https://ruicky.github.io/2017/10/14/mirror-1/">打造智能魔镜-1 基础准备篇</a><br><a href="https://ruicky.github.io/2017/10/14/mirror-2/">打造智能魔镜-2 魔镜配置篇</a><br><a href="https://ruicky.github.io/2017/10/14/mirror-3/">打造智能魔镜-3 智能配置篇</a><br><a href="https://ruicky.github.io/2017/10/14/mirror-other/">打造智能魔镜-4 其他</a></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>魔镜</tag>
      </tags>
  </entry>
  <entry>
    <title>打造智能魔镜-1 基础准备篇</title>
    <url>/2017/10/14/mirror-1/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-1/0.jpg" alt="img"><br><a id="more"></a></p>
<h1 id="打造智能魔镜-1-基础准备篇"><a href="#打造智能魔镜-1-基础准备篇" class="headerlink" title="打造智能魔镜-1 基础准备篇"></a>打造智能魔镜-1 基础准备篇</h1><p>目录大纲<br><a href="https://ruicky.github.io/2017/10/14/mirror-0/">打造智能魔镜-序言</a><br><a href="https://ruicky.github.io/2017/10/14/mirror-1/">打造智能魔镜-1 基础准备篇</a><br><a href="https://ruicky.github.io/2017/10/14/mirror-2/">打造智能魔镜-2 魔镜配置篇</a><br><a href="https://ruicky.github.io/2017/10/14/mirror-3/">打造智能魔镜-3 智能配置篇</a><br><a href="https://ruicky.github.io/2017/10/14/mirror-other/">打造智能魔镜-4 其他</a></p>
<p>工欲善其事必先利其器，首先打造这么一款东西，需要以下的硬件，大多淘宝都可以买到。废话不多讲，上干货。</p>
<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ol>
<li><strong>树莓派3b</strong>： 包含：主板，外壳，散热片，散热风扇，电源，HDMI线，读卡器，16G存储卡。这些有些店家可成套购买。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-1/1.png" alt="1"></li>
<li><strong>USB麦克风</strong>： 我入手的是PS3摄像头。因为，后面用到智能AI部分需要，所以选了这个4mic的摄像头，麦克风一体的。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-1/2.png" alt="2"></li>
<li><strong>显示屏</strong>：在淘宝买了一个14寸的LED完美屏。如果有废弃的笔记本，可以拆下来使用。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-1/3.png" alt="3"></li>
<li><strong>驱动板</strong>：驱动板的话要注意区分LCD及LED屏幕，前者需要加配高压条。一般来说近几年的屏幕都是LED了，但还是要具体问题具体分析。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-1/4.png" alt="4"></li>
<li><strong>单向透视镜</strong>：俗称原子镜，这个在晚上咨询过价格，都不美丽。所以周末的时候去建材城，找卖玻璃的，30块搞定。</li>
<li><strong>镜框</strong>：最简单就是四个框条组合而成，家里头装修有残料的可以自己动手DIY，没有的话也没关系量好尺寸找淘宝，想要各种框条样式的也可以尽情发挥。<img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-1/5.png" alt="5"></li>
<li><strong>辅助</strong>：外接显示器，USB鼠标，USB键盘，美工刀。</li>
</ol>
<h2 id="价格花费"><a href="#价格花费" class="headerlink" title="价格花费"></a>价格花费</h2><p>如果一个DIY，花费的金钱已经超过一个成品的，或者说一个 心里承受价，我觉得这样的DIY，是不值得的。 好的制作，除了让我们感觉到亲手制作的乐趣外，还要具有性价比。好了，鸡汤完毕，让我们看下这些硬件的花费吧，大都给出概数，方便参考。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>价格</th>
<th>备注  </th>
</tr>
</thead>
<tbody>
<tr>
<td>树莓派3B套装</td>
<td>￥：320左右</td>
<td>可选买，不是套装里的都要买  </td>
</tr>
<tr>
<td>PS3麦克风</td>
<td>￥：25</td>
<td></td>
</tr>
<tr>
<td>14寸LED显示屏</td>
<td>￥：170左右</td>
<td></td>
</tr>
<tr>
<td>驱动板</td>
<td>￥：90左右</td>
<td></td>
</tr>
<tr>
<td>原子镜</td>
<td>￥：30左右</td>
<td>淘宝贵，走建材市场</td>
</tr>
<tr>
<td>镜框</td>
<td>￥：15左右</td>
<td>注意尺寸，量好。</td>
</tr>
</tbody>
</table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://post.smzdm.com/p/579311/" target="_blank" rel="noopener">“魔镜魔镜告诉我谁是最美的女人” — 自制树莓派魔镜</a></p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>魔镜</tag>
      </tags>
  </entry>
  <entry>
    <title>打造智能魔镜-2 魔镜配置篇</title>
    <url>/2017/10/14/mirror-2/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-2/0.jpg" alt="img"><br><a id="more"></a></p>
<h1 id="打造智能魔镜-2-魔镜配置篇"><a href="#打造智能魔镜-2-魔镜配置篇" class="headerlink" title="打造智能魔镜-2 魔镜配置篇"></a>打造智能魔镜-2 魔镜配置篇</h1><p>目录大纲<br><a href="https://ruicky.me/2017/10/14/mirror-0/" target="_blank" rel="noopener">打造智能魔镜-序言</a><br><a href="https://ruicky.me/2017/10/14/mirror-1/" target="_blank" rel="noopener">打造智能魔镜-1 基础准备篇</a><br><a href="https://ruicky.me/2017/10/14/mirror-2/" target="_blank" rel="noopener">打造智能魔镜-2 魔镜配置篇</a><br><a href="https://ruicky.me/2017/10/14/mirror-3/" target="_blank" rel="noopener">打造智能魔镜-3 智能配置篇</a><br><a href="https://ruicky.me/2017/10/14/mirror-other/" target="_blank" rel="noopener">打造智能魔镜-4 其他</a></p>
<p>  上一部分，我们讲了，把所有硬件都准备好了以后，下来就开始讲解，配置软件部分。首先，我们先配置魔镜的面子，就是魔镜的显示。<br>  这里我们使用GitHub，开源的 一个<a href="https://github.com/MichMich/MagicMirror" target="_blank" rel="noopener">MagicMirror</a>的项目，但是其中有一些不太适合国内，顾针对这个我进行了魔改<a href="https://github.com/ruicky/MagicMirror4China" target="_blank" rel="noopener">MagicMirror4China</a>。具体的修改内容可去GitHub上查看。<br>  接下来，不太适合小白用户，更多针对程序员。有些东西，如果没看懂，留言，我可以进行补充。</p>
<h2 id="软件-魔镜"><a href="#软件-魔镜" class="headerlink" title="软件-魔镜"></a>软件-魔镜</h2><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><ol>
<li>将SD卡插入读卡器中，连接电脑，格式化成 FAT 格式。<img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-2/1.png" alt="1"></li>
<li>下载系统。由于为了更好集成“叮当”智能ai，所以我直接用的是它提供的镜像。<a href="https://github.com/wzpan/dingdang-robot/wiki/changelog" target="_blank" rel="noopener">下载地址</a></li>
<li>使用 <a href="https://etcher.io/" target="_blank" rel="noopener">Etcher</a> 把下载好的系统刷入 SD 卡。 <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-2/2.png" alt="2"></li>
<li>然后将SD卡放入树莓派中，点亮，开机。</li>
</ol>
<h3 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h3><ol>
<li>更改树莓派键盘设置[可选]，<a href="http://www.jianshu.com/p/8c474339a238" target="_blank" rel="noopener">详情参考这里</a></li>
<li>修改密码。<ul>
<li>a. 在命令行中输入<code>sudo raspi-config</code></li>
<li>b. 选择 <code>1 Change User Password</code></li>
<li>c. 输入新的密码。</li>
</ul>
</li>
<li>在树莓派的操作界面中链接WiFi，方便下载。</li>
<li>安装Nodejs。因为该项目是使用Node环境的，所以需要安装。<ul>
<li>如果机器预装过(可使用<code>node -v</code>查看)，但是版本太低，可使用<code>sudo apt remove nodejs</code> 卸载旧版本。</li>
<li>执行 <code>curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</code></li>
<li>执行 <code>sudo apt install nodejs</code></li>
<li>查看安装是否成功：<code>node -v</code> 如果显示<code>v8.7.0</code>字样，就是成功了。</li>
<li>安装<code>cnpm</code>，因为墙的原因下载node相关包的时候比较慢，推荐使用cpnm. <code>sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
</ul>
</li>
<li>安装魔镜项目<ul>
<li>快速安装<code></code></li>
<li>下载项目: <code>git clone https://github.com/ruicky/MagicMirror4China.git</code> </li>
<li>安装依赖性：<code>cd MagicMirror4China &amp;&amp; cnpm install</code></li>
<li>安装进程管理工具pm2：<ul>
<li><code>sudo npm install -g pm2</code></li>
<li><code>pm2 startup</code></li>
<li><code>pm2 start /home/pi/MagicMirror4China/installers/pm2_MagicMirror.json</code></li>
</ul>
</li>
</ul>
</li>
<li><p>配置系统，适配魔镜。</p>
<ul>
<li><p>旋转屏幕，使得竖版显示</p>
<ul>
<li><code>sudo vim /boot/config.txt</code></li>
<li>在最后添加 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display_rotate=1</span><br><span class="line">avoid_warnings=1</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>＃display_rotate = 0正常＃display_rotate = 1 90度＃display_rotate = 2 180度＃注意：您可以通过输入lcd_rotate = 2旋转图像和触摸界面180º＃＃display_rotate = 3 270度</p>
<ul>
<li>重启 <code>sudo reboot</code></li>
</ul>
</blockquote>
</li>
<li><p>禁用屏幕保护程序</p>
<ul>
<li><code>sudo vim ~/.config/lxsession/LXDE-pi/autostart</code></li>
<li><p>添加以下行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@xset s noblank</span><br><span class="line">@xset s off</span><br><span class="line">@xset -dpms</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑/etc/lightdm/lightdm.conf:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/lightdm/lightdm.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加以下行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xserver-command=X -s 0 -dpms</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启 <code>sudo reboo</code></p>
</li>
</ul>
</li>
</ul>
</li>
<li>自定义配置，详情参看 <a href="https://github.com/MichMich/MagicMirror/wiki/MagicMirror%C2%B2-Modules" target="_blank" rel="noopener">文档</a></li>
</ol>
<p>以上 就能把魔镜的主干给配置完，并漂亮的跑起来，现在离 万里长征已经走了一半了，加油哦~</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>魔镜</tag>
      </tags>
  </entry>
  <entry>
    <title>打造智能魔镜-3 智能配置篇</title>
    <url>/2017/10/14/mirror-3/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-3/0.jpg" alt="img"><br><a id="more"></a></p>
<h1 id="打造智能魔镜-3-智能配置篇"><a href="#打造智能魔镜-3-智能配置篇" class="headerlink" title="打造智能魔镜-3 智能配置篇"></a>打造智能魔镜-3 智能配置篇</h1><p>目录大纲<br><a href="https://ruicky.me/2017/10/14/mirror-0/" target="_blank" rel="noopener">打造智能魔镜-序言</a><br><a href="https://ruicky.me/2017/10/14/mirror-1/" target="_blank" rel="noopener">打造智能魔镜-1 基础准备篇</a><br><a href="https://ruicky.me/2017/10/14/mirror-2/" target="_blank" rel="noopener">打造智能魔镜-2 魔镜配置篇</a><br><a href="https://ruicky.me/2017/10/14/mirror-3/" target="_blank" rel="noopener">打造智能魔镜-3 智能配置篇</a><br><a href="https://ruicky.me/2017/10/14/mirror-other/" target="_blank" rel="noopener">打造智能魔镜-4 其他</a></p>
<p>我们这部分使用的也是GitHub开源的一个python写的<a href="https://github.com/wzpan/dingdang-robot" target="_blank" rel="noopener">叮当</a></p>
<blockquote>
<p>叮当是一款可以工作在 Raspberry Pi 上的开源中文语音对话机器人/智能音箱项目，目的是让中国的Hacker们也能快速打造个性化的智能音箱。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>最新的安装 可看 <a href="https://github.com/wzpan/dingdang-robot#%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">官方文档</a></p>
<p>由于咱们镜像使用的就是叮当，所以这部分很简单。可以过了。</p>
<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><ol>
<li>升级主程序：<code>cd /home/pi/dingdang &amp;&amp; git pull</code></li>
<li>升级三方包：<code>cd /home/pi/.dingdang/contrib &amp;&amp; git pull</code></li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改主要配置文件,可参考<a href="https://github.com/wzpan/dingdang-robot/wiki/configuration" target="_blank" rel="noopener">官网文档</a></p>
<p>这里主要说明一下USB麦克风的配置问题<br>TODO：</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>魔镜</tag>
      </tags>
  </entry>
  <entry>
    <title>打造智能魔镜-4 其他</title>
    <url>/2017/10/14/mirror-other/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/10/14/mirror-other/0.jpg" alt="img"><br><a id="more"></a></p>
<h1 id="打造智能魔镜-4-其他"><a href="#打造智能魔镜-4-其他" class="headerlink" title="打造智能魔镜-4 其他"></a>打造智能魔镜-4 其他</h1><p>目录大纲<br><a href="https://ruicky.me/2017/10/14/mirror-0/" target="_blank" rel="noopener">打造智能魔镜-序言</a><br><a href="https://ruicky.me/2017/10/14/mirror-1/" target="_blank" rel="noopener">打造智能魔镜-1 基础准备篇</a><br><a href="https://ruicky.me/2017/10/14/mirror-2/" target="_blank" rel="noopener">打造智能魔镜-2 魔镜配置篇</a><br><a href="https://ruicky.me/2017/10/14/mirror-3/" target="_blank" rel="noopener">打造智能魔镜-3 智能配置篇</a><br><a href="https://ruicky.me/2017/10/14/mirror-other/" target="_blank" rel="noopener">打造智能魔镜-4 其他</a></p>
<h2 id="常用树莓派命令"><a href="#常用树莓派命令" class="headerlink" title="常用树莓派命令"></a>常用树莓派命令</h2><ol>
<li>关机：<code>sudo shutdown -h now</code></li>
<li>重启： <code>sudo reboot</code></li>
<li>常规配置：<code>sudo raspi-config</code></li>
<li>列出跟python相关的后台进程：<code>ps aux | grep python</code></li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>魔镜</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年北京海淀驾校摩托增驾指南</title>
    <url>/2019/03/22/motor-car/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/0.png" alt="img"><br><a id="more"></a></p>
<h1 id="2019年北京海淀驾校摩托增驾指南"><a href="#2019年北京海淀驾校摩托增驾指南" class="headerlink" title="2019年北京海淀驾校摩托增驾指南"></a>2019年北京海淀驾校摩托增驾指南</h1><h1 id="启"><a href="#启" class="headerlink" title="启"></a>启</h1><blockquote>
<p>四轮承载肉体 两轮承载灵魂     –网友</p>
</blockquote>
<p>  “你为什么学摩托？”<br>  “我想要做个追风少年。”<br>  “说真话！”<br>  “我想上班不堵车…”</p>
<p>  是的，学习摩托需要理由么？每个人都有一份自己的答案。而我的很简单，就是在这座拥堵的城市中代步而已。<br>  扯了那么多，说下我自己的情况，28岁，年初的时候买了车，但是从19年开始政策的制定，外地车牌将会限制办理进京证的次数，所以，为了维护机动车驾驶员最后的尊严，走着，学摩托。<br>  以下文章产生于 <code>2019-03-22</code> 所以只有参考价值，具体的跟政策相关。（PS：据说以后的摩托驾照会越来越难考）</p>
<h1 id="壹：报名"><a href="#壹：报名" class="headerlink" title="壹：报名"></a>壹：报名</h1><p>  北京的驾校很多，所以选择最近的就好，由于车本也是海驾的，所以就直接报这个了。驾校有很多报名点，地图搜索离你最近的就好。<br>  去了报名点，需要携带 <code>居住证</code> <code>身份证原件</code>  <code>驾驶证原件</code>(不是增驾的话不需要) <code>1寸白底照片2张</code>（如果没带的话也可现场让工作人员帮忙照，但是需要给20元） <code>人民币</code><br>  携带这些资料去报名，当时的价格是三轮（D照）1600元，两轮（E照）1200元。体检20元。<br>  他们是每周开一个班，所以如果你想赶早的话，周一报名的话，周六就能安排上科目一的法培课了。当然我是周六去报名的，所以就只能是下周六去的。<br>  报完名，会给你班车卡，收据等，如果想开发票到时候学完车，拿完本拿着收据去驾校开。</p>
<h1 id="贰：学习"><a href="#贰：学习" class="headerlink" title="贰：学习"></a>贰：学习</h1><p>  总的来说，总共是3个过程。科目一文化学习，科目二实操，科目三文化学习。</p>
<h2 id="科目一"><a href="#科目一" class="headerlink" title="科目一"></a>科目一</h2><p>  安排的是周六下午12:30的法培课，需要本人去上课，老师会在课上给你讲整个学习过程，以及一些常错的题，另外还会<strong>点名</strong>。如果当时你的居住证在驾校，这个时间会把你的资料返还给你。而且这个时候会做指纹，为了考试使用。只有点过名的才能考试，所以少年，乖乖去上学吧。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/科目一.jpeg" alt="科目一"><br>  一般的考试会在接下来的周一或者周二，具体的以老师的通知为准。<br>  考试当天携带身份证，去指定的教室里等着老师点名，点了的拿着一张准考证，去1楼的考试教室进行考试，现在的考试比以前的要严格的多，手机以及包之类的都是不能带进去的。所以自己开车的就直接放车上就好。没车的只能存放到三楼六教室的存包处了。<br>  一般都是当时考完当时出成绩，考完试出门拿着成绩单，在电子屏幕上签完字，然后把资料在交还给工作人员。然后返回教室。找三轮的教练分上下午学习。就是你上去去训练还是下午去训练。<br>  在教练那里签完字后，就能开开心心等班车回家了。注意班车的时间是4:15准时发，不要迟到了。</p>
<h2 id="科目二-科目三"><a href="#科目二-科目三" class="headerlink" title="科目二 + 科目三"></a>科目二 + 科目三</h2><p>  一般科目一考试都在周二下午左右，那么你周三，周四，周五都可以去练车的。<br>  训练场地在8号楼。之前有看到说是摩托训练场在老后面，结果白跑那么远，就在8号楼，在2018年的时候，进行搬迁了。同学们注意，不要跑远了。去了之后再公告栏里，找到自己的名字看是几组的，然后找对应的教练去签到。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/8号楼.jpeg" alt="8号教学楼"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/地点.png" alt="地点"><br>  科目二的考试内容：起步，定点停车，坡起，单边桥，绕桩。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/两轮摩托.jpeg" alt="两轮摩托"><br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/三轮摩托.jpeg" alt="三轮摩托"><br>  具体的训练到时候教练会告诉你们的。主要练好绕桩就可以了，不是很难。<br>  科目二是考试训练，科目三则是跟科目一一样做题。在周六的时候上午会安排科目四的培训课，同样的也是需要点名的。上午上完课，下午可以8号楼去练车。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/培训中心.jpeg" alt="培训中心"><br>  周日的时候我进行的约考，约得周三的，教练让周二下午来练一次。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/公示牌.jpeg" alt="公示牌"></p>
<h1 id="叁：考试"><a href="#叁：考试" class="headerlink" title="叁：考试"></a>叁：考试</h1><p>  当你去过两到三次左右，才能够找教练去跟你一起约考。注意，这里的考试不是你自己能约的，得需要教练跟你一起，去8号楼里，拿着身份证给你预约考试。只有教练觉得你能过了才给你约。<br>  我是去过三次，跟教练预约后，就一直练。<br>  说下考试，科目二考试肯定是在某一天的早上（周一，二，三），早上带着 <code>身份证原件</code> <code>驾驶本原件</code> <code>3张1寸白底照片</code> 去10号楼，刷身份证，进大厅等着。<br>  当时三轮跟两轮在一起考的。车上会穿一个带有号码牌的大坎肩，两轮的是蓝色数字，三轮的是黄色的数字。然后等着工作人员点名，10人一组，由工作人员带着进入考场，进行考试。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/衣服号码.jpeg" alt="衣服号码"><br>  考过了，拿着资料返回10号楼签个字就可以走了，去12号楼约下午的科目三考试。<br>  没考过，也返回到10号楼等待第二次的补考机会。考过了，等同上面，没考过，就只能去预约下一次10天后的考试。</p>
<p>  下午一点进行科目三考试，也是点名，这个时候没有准考证，直接带着身份证去一楼刷卡进去考试，考完试，带着你的那些资料去二楼的制证室排队交材料。这里有人需要2张照片，有人需要3张，我也不知道为什么。所以说如果有多的，多带一点。<br>  我就交了一张照片，需要把驾驶证2页全部从皮包里抽出来，上交。<br>  然后在教室等着就好，会挨个发给你。<br>  到这里，你的增加之旅就结束了，等着班车，开开心心回家吧！</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>  总的来说花费了半个月的时间，把摩托车的考完了。来我们算算花费了多长时间吧。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/时间.png" alt="时间"><br>  对于我来说请了2次假，打了2次车，总的来说成本不低，所以要学习的还是考虑清楚。<br>  <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/03/22/motor-car/驾照.jpeg" alt="驾照"><br>  最后，希望大家都能增驾成功，出行平安。</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>海淀驾校</tag>
        <tag>摩托车</tag>
        <tag>增驾</tag>
        <tag>2019</tag>
      </tags>
  </entry>
  <entry>
    <title>【Life】批量下载网易云音乐歌单</title>
    <url>/2021/10/19/music-down/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/10/19/music-down/0.png" alt="img"><br><a id="more"></a></p>
<h1 id="【Life】批量下载网易云音乐歌单"><a href="#【Life】批量下载网易云音乐歌单" class="headerlink" title="【Life】批量下载网易云音乐歌单"></a>【Life】批量下载网易云音乐歌单</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在刷网页的时候，找到了一个好网易云音乐的歌单，想放在车上听，就得下载下来，用官网自带的播放器还得下载播放器，所以就找找看有没有哪个小伙伴分析好的下载脚本。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><ul>
<li>Python3 (必须)</li>
<li>Mac(我本身是 mac机器，win 的不知道有什么不可知问题，这里只是阐述我的硬件)</li>
<li>iTerm2 (也可以是系统自带的终端)</li>
</ul>
<h4 id="开整"><a href="#开整" class="headerlink" title="开整"></a>开整</h4><p>主要找到的是这位大佬的脚本， <a href="https://github.com/codezjx/netease-cloud-music-dl" target="_blank" rel="noopener">网易云音乐下载器</a>。使用方法也很简单：</p>
<ol>
<li><p>首先下载源码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/codezjx/netease-cloud-music-dl.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入根目录，然后执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd netease-cloud-music-dl &amp;&amp; python3 setup.py install</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ncm -h</span><br><span class="line">usage: ncm [-h] [-s song_id] [-ss song_ids [song_ids ...]] [-hot artist_id]</span><br><span class="line">           [-a album_id] [-p playlist_id]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -s song_id            Download a song by song_id</span><br><span class="line">  -ss song_ids [song_ids ...]</span><br><span class="line">                        Download a song list, song_id split by space</span><br><span class="line">  -hot artist_id        Download an artist hot 50 songs by artist_id</span><br><span class="line">  -a album_id           Download an album all songs by album_id</span><br><span class="line">  -p playlist_id        Download a playlist all songs by playlist_id</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>例如，我要下载这个歌单  <a href="https://music.163.com/#/playlist?id=7023343185" target="_blank" rel="noopener">https://music.163.com/#/playlist?id=7023343185</a> ，只需要<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ncm -p 7023343185</span><br></pre></td></tr></table></figure></p>
<p>下载存放的目录在 <code>/Users/yourUserName/.ncm/download</code> 其中<strong>yourUserName</strong>是你的用户名，如我的就在<code>/Users/ruicky/.ncm/download</code>。<br>这个是可以配置的，配置文件在 <code>/Users/ruicky/.ncm/ncm.ini</code></p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/10/19/music-down/1.png" alt="result"><br>下载的音乐有专辑封面，记录歌手名、音乐标题、专辑名等元数据，自动写入了metadata容器。非常的 nice。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本来，很简单的东西，不想花时间篇幅写下来，但是有些东西，我觉得如果能帮到大家，就尽量积累下来。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://github.com/codezjx/netease-cloud-music-dl" target="_blank" rel="noopener">网易云音乐下载器</a></p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>网易云</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs 中 http-proxy 使用</title>
    <url>/2020/08/30/node-http-proxy/</url>
    <content><![CDATA[<p><img src="https://source.unsplash.com/random/1400x500" alt="0"><br><a id="more"></a></p>
<h1 id="NodeJs-中-http-proxy-使用"><a href="#NodeJs-中-http-proxy-使用" class="headerlink" title="NodeJs 中 http-proxy 使用"></a>NodeJs 中 http-proxy 使用</h1><h3 id="http-proxy"><a href="#http-proxy" class="headerlink" title="http-proxy"></a>http-proxy</h3><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p><a href="https://github.com/http-party/node-http-proxy" target="_blank" rel="noopener">官网-GitHub</a><br><code>node-http-proxy</code>是一个 HTTP 可编程的，支持 websockets 的代理库。它适合于实现诸如反向代理和负载平衡器之类的组件。</p>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>一般使用在前端静态页，后端是启动一个服务，挂载那个静态页。还有一个提供 api 的服务端。通过 NodeJs 这一层的粘合层来做一点的事，同时需要调用 api 的真实服务，就可以使用代理。</p>
<p>简而言之就是前端发起请求，NodeJS 层使用代理进行转发，后端服务层处理返回。</p>
<h5 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h5><p>以 ExpressJs 为例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> httpProxy = <span class="built_in">require</span>(<span class="string">'http-proxy'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> proxy = httpProxy.createProxyServer(&#123;</span><br><span class="line">    target: <span class="string">'http://localhost:5000'</span> + <span class="string">'/api'</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    proxyTimeout: <span class="number">30</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">&#125;);</span><br><span class="line">proxy.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.code !== <span class="string">'ECONNRESET'</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.error(<span class="string">'proxy error'</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="string">'/api'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.set(<span class="string">'Content-Type'</span>, <span class="string">'application/json; charset=UTF-8'</span>);</span><br><span class="line">    proxy.web(req, res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(app)</span><br><span class="line">server.listen(<span class="number">4000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listen:4000, view http://localhost:4000'</span>)</span><br></pre></td></tr></table></figure>
<h5 id="高阶"><a href="#高阶" class="headerlink" title="高阶"></a>高阶</h5><p><strong>修改请求</strong><br>在请求接口层之前，追加 headers 。<br>这里有个坑，就是我在 express 中间件中需要获取 body 的值就 需要使用 <code>app.use(express.json())</code>来解析，但是 <code>http-proxy</code>转发代理的时候，解析后的 body 转发不过去，只能在转换回去。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modifyProxyReq</span> (<span class="params">proxyReq, req, res</span>) </span>&#123;</span><br><span class="line">  proxyReq.setHeader(<span class="string">'Content-Type'</span>, req.get(<span class="string">'Content-Type'</span>) || <span class="string">'application/json; charset=UTF-8'</span>);</span><br><span class="line">  <span class="keyword">if</span> (!req.body || <span class="built_in">Object</span>.keys(req.body).length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> contentType = proxyReq.getHeader(<span class="string">'Content-Type'</span>);</span><br><span class="line">  <span class="keyword">var</span> bodyData;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (contentType.indexOf(<span class="string">'application/json'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    bodyData = <span class="built_in">JSON</span>.stringify(req.body);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (contentType.indexOf(<span class="string">'application/x-www-form-urlencoded'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    bodyData = querystring.stringify(req.body);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bodyData) &#123;</span><br><span class="line">    proxyReq.setHeader(<span class="string">'Content-Length'</span>, Buffer.byteLength(bodyData));</span><br><span class="line">    proxyReq.write(bodyData);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">proxy.on(<span class="string">'proxyReq'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">proxyReq, req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// modify reqquest body to string</span></span><br><span class="line">  modifyProxyReq(proxyReq, req, res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>修改返回结果</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">proxy.on(<span class="string">'proxyRes'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes,req,res</span>) </span>&#123;</span><br><span class="line">    express.json()(proxyRes, req, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> body = proxyRes.body;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'response body is --&gt;'</span>, body);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>总结</p>
<p>该组件简单使用来说非常方便，如果有定制需求的话，需要配合监听请求使用。其中遇到 http—&gt;https 代理来说，会报证书错误之类的，配置选项追加 <code>changeOrigin: true</code>来解决问题。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>http-proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js跟Jenkins持续集成配置(By-Ruicky)</title>
    <url>/2017/05/24/nodejs-jenkins/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/0.jpg" alt="0"></p>
<a id="more"></a>
<h1 id="Node-js跟Jenkins持续集成配置"><a href="#Node-js跟Jenkins持续集成配置" class="headerlink" title="Node.js跟Jenkins持续集成配置"></a>Node.js跟Jenkins持续集成配置</h1><h2 id="Step-1-插件安装"><a href="#Step-1-插件安装" class="headerlink" title="Step 1: 插件安装"></a>Step 1: 插件安装</h2><p>如果在安装jenkins的时候没有安装相关插件，可以按照如下方式安装（已经安装，则不需要）</p>
<ol>
<li>安装<code>BitBucket Plugin</code>,直接在<code>系统管理</code>&gt;<code>插件管理</code>中搜索<code>BitBucket</code>相关插件安装即可。</li>
<li>安装<code>ssh</code>插件，还是刚才的位置，搜索<code>SSH plugin</code>，选择安装即可。</li>
</ol>
<h2 id="Step-2-Jenkins密钥配置。"><a href="#Step-2-Jenkins密钥配置。" class="headerlink" title="Step 2: Jenkins密钥配置。"></a>Step 2: Jenkins密钥配置。</h2><h3 id="Q-为什么需要生成密钥"><a href="#Q-为什么需要生成密钥" class="headerlink" title="Q:为什么需要生成密钥?"></a>Q:为什么需要生成密钥?</h3><p>A:因为在Jenkins在拉取代码以及ssh使用key登录的时候需要用到。密钥被用来在多个节点中进行免密访问。</p>
<ol>
<li>Jenkins生成密钥对<ul>
<li>使用root用户登录远程服务器</li>
<li>切换到<code>jenkins</code>用户<ul>
<li><code>sudo su -s /bin/bash jenkins</code></li>
</ul>
</li>
<li>生成密钥对<ul>
<li><code>ssh-keygen -t rsa</code></li>
<li><code>cat .ssh/id_rsa.pub</code></li>
</ul>
</li>
</ul>
</li>
<li>将公钥添加到Bitbucket服务器中，用来clone代码<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/1.png" alt><br>添加完以后在服务器端，用<strong><code>jenkins</code></strong>用户登录clone一下代码，这样就会在.ssh/known_hosts添加bitbucket服务器记录，否则，直接用jenkins第一次构建会报错。</li>
<li>将公钥添加到要发布的服务器中，用来执行部署脚本<ul>
<li>切换jenkins用户<ul>
<li><code>sudo su -s /bin/bash jenkins</code></li>
</ul>
</li>
<li>拷贝当前用户的公钥到要发布的服务器中  <ul>
<li><code>scp id_rsa_vps.pub root@123.456.789.113:~/.ssh/</code></li>
</ul>
</li>
<li>在远程服务器上将公钥内容追加到 ~/.ssh/authorized_keys 文件中<ul>
<li><code>cat id_rsa.pub &gt;&gt; authorized_keys</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="Step-3-jenkins触发式构建"><a href="#Step-3-jenkins触发式构建" class="headerlink" title="Step 3: jenkins触发式构建"></a>Step 3: jenkins触发式构建</h2><ol>
<li>准备一个测试脚本，看开发如何提交代码就执行这个构建操作。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# cat /shell/deploy/test/jenkins_trigger.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;部署脚本被执行&quot;</span><br><span class="line">[root@node1 ~]# chmod +x /shell/deploy/test/jenkins_trigger.sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>注意：如果是生产配置，直接把这个脚本换成对应项目的上线脚本即可，jenkins配置无须修改。</p>
<ol start="2">
<li>创建一个触发构建的项目，选择自由软件风格即可<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/2.png" alt="img"></li>
<li>源码管理选择git，然后只需要在repository url中输入git仓库地址即可。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/3.png" alt="img"></li>
<li>构建，选择execute shell，执行部署脚本即可<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/4.png" alt="img"></li>
<li>触发器配置：即bitbucket有提交操作，则自动部署.<br>在bitbucket中，项目–&gt;设置—&gt;webhooks—&gt;Add webhook<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/5.png" alt="img"><br>在jenkins中，“构建触发器”–&gt;”Build when a change is pushed to BitBucket”<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/6.png" alt="img"></li>
</ol>
<h2 id="Step-4-jenkins参数化构建"><a href="#Step-4-jenkins参数化构建" class="headerlink" title="Step 4: jenkins参数化构建"></a>Step 4: jenkins参数化构建</h2><ol>
<li><p>准备一个测试的脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git_pro()&#123;</span><br><span class="line">  echo &quot;拉取$1代码&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">git_pro $1</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个参数化构建的项目<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/7.png" alt="img"></p>
</li>
<li>选择构建的参数：这里设置一个tag参数，就是每次执行job之前都需要传入这个tag<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/8.png" alt="img"></li>
<li>设置执行部署的脚本<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/9.png" alt="img"></li>
<li>选择创建的job执行构建<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/10.png" alt="img"></li>
</ol>
<h2 id="Step-5-jenkins定时构建"><a href="#Step-5-jenkins定时构建" class="headerlink" title="Step 5: jenkins定时构建"></a>Step 5: jenkins定时构建</h2><p>定时构建一般用在安卓,ios打包，每天凌晨会拉取安卓,ios进行编译打包，并自动推送到共享。</p>
<p>示例：在上面的参数化构建示例上添加如下触发器，就是每天凌晨1:30分自动执行安卓或ios打包脚本，上面的参数化构建默认值是master就是每天从代码仓库的master分支拉取最新的代码打包。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/11.png" alt="img"></p>
<h2 id="Step-6-Jenkins用户权限设置"><a href="#Step-6-Jenkins用户权限设置" class="headerlink" title="Step 6: Jenkins用户权限设置"></a>Step 6: Jenkins用户权限设置</h2><p>  现在各种job已经设置好了，但是如果开发测试人员需要部署一个tag到服务器进行测试，那么就需要登录jenkins，这个时候就需要给开发和测试人员创建一个可以执行job的用户，方法如下。</p>
<ol>
<li>新创建一个用户<br>系统管理–&gt;用户管理–&gt;新建用户，按照提示填入信息即可<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/24/nodejs-jenkins/12.png" alt="img"></li>
<li>用户权限设置<br>系统管理–&gt;Configure Global Security–&gt; 给develop用户授权，主要给job build，cancel，read权限。用户登录jenkins就可以构建我们创建的job了。</li>
</ol>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote>
<p><a href="http://www.fblinux.com/?p=705" target="_blank" rel="noopener">jenkins介绍部署及三种构建方式配置</a><br><a href="https://stackoverflow.com/questions/18068358/cant-su-to-user-jenkins-after-installing-jenkins" target="_blank" rel="noopener">Can’t su to user jenkins after installing Jenkins</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>用 now.sh 免费部署 oneindex</title>
    <url>/2018/11/07/oneindex/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/0.png" alt="head"><br><a id="more"></a></p>
<h1 id="用-now-sh-免费部署-oneindex"><a href="#用-now-sh-免费部署-oneindex" class="headerlink" title="用 now.sh 免费部署 oneindex"></a>用 now.sh 免费部署 oneindex</h1><p>oneindex 是将微软的 onedrive 打造成分享网盘的程序。使用 now.sh 提供的 Docker 部署环境免费搭建个人分享网盘。</p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p><a href="http://aliyun.oneindex.cc/" target="_blank" rel="noopener">http://aliyun.oneindex.cc/</a><br><a href="https://oneindex.now.sh/" target="_blank" rel="noopener">https://oneindex.now.sh/</a><br><a href="https://one.chainwon.com/" target="_blank" rel="noopener">https://one.chainwon.com/</a><br><a href="https://od.lezi.tk/" target="_blank" rel="noopener">https://od.lezi.tk/</a></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>免费</li>
<li>不用服务器空间</li>
<li>不走服务器流量</li>
</ol>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>注册 now 账号。注册地址 <a href="https://zeit.co/" target="_blank" rel="noopener">https://zeit.co/</a></li>
<li>注册 onedrive 账号。可以申请 5T 容量的网盘更好。</li>
</ol>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p><a href="now.sh">now.sh</a> 的命令行客户端是基于 nodejs 的，所以首先安装 nodejs 环境。<br>nodejs 下载安装即可。下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p>
<p>安装 now.sh 客户端。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g now</span><br></pre></td></tr></table></figure></p>
<p>然后登陆 now 账号，它会提示输入邮箱，并通过邮箱登陆验证即可。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/1.jpg" alt="1.jpg"></p>
<p>从官方仓库拉取最新的 oneindex 代码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/songouyang/oneindex</span><br></pre></td></tr></table></figure>
<p>进入 oneindex 文件夹中，开始部署项目。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/2.jpg" alt="2.jpg"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd oneindex/ </span><br><span class="line">now</span><br></pre></td></tr></table></figure>
<p>上图中可以看到部署的地址为：<a href="https://oneindex-mgwvgeqone.now.sh" target="_blank" rel="noopener">https://oneindex-mgwvgeqone.now.sh</a></p>
<p>部署完成后，容器默认会隔一段时间重启，为了不让容器重启，执行下面的命令。如果不执行，会发现隔一会又要重新配置 onedrive 了。记得把下面的地址改成自己的 now.sh 的地址。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">now scale oneindex-mgwvgeqone.now.sh 1</span><br></pre></td></tr></table></figure>
<p>为了方便访问，可以把前缀设置一个别名。取一个不重复且方便记忆的即可。这里我使用 oneindex，每个人取不同的别名。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">now alias oneindex-mgwvgeqone.now.sh wangpan</span><br></pre></td></tr></table></figure>
<p>至此，就可以打开 <a href="https://wangpan.now.sh" target="_blank" rel="noopener">https://wangpan.now.sh</a> 开始配置了。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/demo.gif" alt="demo"></p>
<p>如果部署没有问题，那么打开上面部署得到的网址就可以看到如下界面。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/3.jpg" alt="3.jpg"><br>开始配置 onedrive。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/4.jpg" alt="4.jpg"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/5.jpg" alt="5.jpg"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/6.jpg" alt="6.jpg"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/7.jpg" alt="7.jpg"></p>
<p>绑定账号。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/8.jpg" alt="8.jpg"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/9.jpg" alt="9.jpg"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/10.jpg" alt="10.jpg"></p>
<p>记得修改默认密码。<br>最后就可以得到 oneindex 的地址：<a href="https://wangpan.now.sh" target="_blank" rel="noopener">https://wangpan.now.sh</a><br>管理后台地址就是：<a href="https://wangpan.now.sh/admin" target="_blank" rel="noopener">https://wangpan.now.sh/admin</a></p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>now.sh 提供自己的域名绑定的！下面演示，我将<code>pan.ruicky.me</code>域名绑定上去！</p>
<ol>
<li>首先执行命令！会提示有错误！需要验证域名的所有权！（注意这个命令需要<strong>执行三次</strong>，下面提到的执行命令就是这个命令）<br>一定要将下面的   <code>wangpan.now.sh</code>  <strong>换成你自己的域名！！</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">now alias wangpan.now.sh pan.ruicky.me</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/11.png" alt="11.png"></p>
<ol start="2">
<li><p>去域名解析的地方输入TXT解析，输入的值，上方命令行有打印出来<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/12.png" alt="12.png"></p>
</li>
<li><p>再次输入 <code>now alias wangpan.now.sh pan.ruicky.me</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/13.png" alt="13.png"><br>这是需要添加一个CNAME的记录</p>
</li>
<li>在域名解析的地方输入 CNAME 解析<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/14.png" alt="14.png"></li>
<li>再次输入<code>now alias wangpan.now.sh pan.ruicky.me</code> ，显示成功<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/11/07/oneindex/15.png" alt="15.png"></li>
</ol>
<p>总结：<br>域名绑定就是在域名解析的地方，首先让now.sh验证域名的所有权，所以要加TXT的记录，然后真正做跳转的是CNAME，故要加CANME的记录。</p>
<h3 id="小福利"><a href="#小福利" class="headerlink" title="小福利"></a>小福利</h3><p>百度搜索“index of / – OneIndex”就能找到网友们搭建的网盘。</p>
<p>网盘存放的东西比较多，有好多小视频，美图，等等等！</p>
<p>搜索福利用百度，搜索学术有谷歌！！</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><a href="https://51.ruyo.net/10272.html" target="_blank" rel="noopener">利用Heroku免费服务部署OneIndex教程</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://51.ruyo.net/9946.html#8" target="_blank" rel="noopener">OneIndex部署教程，利用OneDrive打造专属分享型网盘</a><br><a href="https://www.ouyangsong.com/posts/43735/" target="_blank" rel="noopener">now.sh 免费部署 oneindex</a><br><a href="https://51.ruyo.net/9976.html" target="_blank" rel="noopener">利用Now.sh免费套餐来部署OneIndex教程</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>now.sh</tag>
        <tag>oneindex</tag>
        <tag>网盘</tag>
      </tags>
  </entry>
  <entry>
    <title>异地(北京)办理护照指南</title>
    <url>/2017/09/26/passport/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/09/26/passport/0.jpg" alt="0"><br><a id="more"></a></p>
<h1 id="异地-北京-办理护照指南"><a href="#异地-北京-办理护照指南" class="headerlink" title="异地(北京)办理护照指南"></a>异地(北京)办理护照指南</h1><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>在北京工作，由于没有时间回老家，只能在北京办理护照。以下，是办理的过程，一是做个备忘，二是给有需要的人。<br>注：以下经验是在2017年9月份产生的，如有最新的，请参考其他的。</p>
<h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ol>
<li>身份证</li>
<li>居住证</li>
</ol>
<h3 id="办理居住证"><a href="#办理居住证" class="headerlink" title="办理居住证"></a>办理居住证</h3><p>可以直接就近到派出所现场办理或者网上申请，建议大家网上申请，因为会省去现场办理的一些繁琐的手续。<br>地址：<a href="https://www.bjjzzpt.com/" target="_blank" rel="noopener">北京市居住证服务平台</a><br>申请流程以及需要的材料都有详细的说明 —-&gt;<a href="https://www.bjjzzpt.com/fwxt/html/wsjzz/2016/10/21/502.html" target="_blank" rel="noopener">办事指南</a><br>注意事项：</p>
<ol>
<li>纳税证明就近到税务所自助打印；</li>
<li>社保证明到<a href="http://www.bjrbj.gov.cn/csibiz/indinfo/login.jsp" target="_blank" rel="noopener">北京市社会保险网上服务平台</a> 登录后，左侧- 个人权益记录-参保人员缴费信息定制业务，提交业务申请，半天到一天出结果，下载PDF文档打印。最好上午10点之前申请，因为每天名额有限。</li>
<li>证明居住条件的，有房产证最好，没有的话 住房合同也是可以的。</li>
</ol>
<h3 id="办理护照"><a href="#办理护照" class="headerlink" title="办理护照"></a>办理护照</h3><ul>
<li>网上预约<br>不预约不给办！<strong>预约</strong>地址是：<a href="http://www.bjgaj.gov.cn/idn/" target="_blank" rel="noopener">北京市公安局出入境管理网上办事大厅</a>,选择左侧，“非京籍人员证件办理”—&gt;”预申请受理” 一步步填写资料即可。</li>
</ul>
<ul>
<li>注意事项</li>
</ul>
<ol>
<li>申请的每一步都有一个<strong>结果查询密码或者条形码之类</strong>的，这个保存好，后面你焦急的等待、一遍遍查看结果的时候能用到。各个步骤的申请基本第二天就有结果，很快。</li>
<li><strong>护照160块钱，现金</strong>，自备零钱，不能刷卡，不能微信支付宝QQ财付通银联钱包京东金融，统统不行，paypal更不行。</li>
<li>申请表可以不用自己打印，现场警察姐姐会给你打印。</li>
<li>照片。我的这个照片 现场照的，不需要自己带。</li>
<li><strong>深色上衣</strong>，制服最帅！别穿白，米白乳白象牙白，都不行。</li>
<li>去办理的时候带上<strong>居住证</strong>，<strong>身份证</strong>就可以了。<br>因为预约的时候，周末一般都要两个星期之后的时间点才有名额，所以可以按照自己居住证的办理情况提前预约。</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>护照</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Adobe Acrobat 去除 PDF 水印--MAC版</title>
    <url>/2018/03/09/pdf-watermark/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/pdf-watermark/0.png" alt="0"><br><a id="more"></a></p>
<h1 id="使用Adobe-Acrobat-去除-PDF-水印–MAC版"><a href="#使用Adobe-Acrobat-去除-PDF-水印–MAC版" class="headerlink" title="使用Adobe Acrobat 去除 PDF 水印–MAC版"></a>使用Adobe Acrobat 去除 PDF 水印–MAC版</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有的时候 下载的pdf，有很多特别烦人的水印，如这个<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/pdf-watermark/1.jpeg" alt="1.jpeg"><br>怎么才能去除呢，我有妙招</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>Adobe Acrobat Pro DC 2015.010.20056<ul>
<li>强大的PDF编辑软件</li>
<li><a href="https://pan.baidu.com/s/1nu1muKD" target="_blank" rel="noopener">百度网盘</a> 密码:ahss</li>
</ul>
</li>
<li>CORE Patcher<ul>
<li>解决<code>xf-acrodc2015</code>破解失效问题</li>
<li><a href="https://pan.baidu.com/s/1sQAg8TMQiWDS2fO87XYJ5A" target="_blank" rel="noopener">百度网盘</a> 密码: u74i</li>
</ul>
</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>开始安装前，断开网络。检查 hosts中是否存在以下内容,有的话，删掉(host位置为<code>/private/etc</code>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 lmlicenses.wip4.adobe.com</span><br><span class="line">127.0.0.1 lm.licenses.adobe.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开DMG中的 Acrobat_DC_Web_WWMUI.dmg ，运行 Acrobat DC 中的 Acrobat DC Installer.pkg 安装 试用版。按照操作一步一步执行到安装结束</p>
</li>
<li>打开DMG中Update中的 AcrobatDCUpd1501020056.dmg 。运行 .pkg 更新程序。按照操作执行安装</li>
<li>运行软件，会弹出登录界面，若果没有，点击右上角登陆，弹出登录框，别关掉。</li>
<li>打开xf-acrodc2015.dmg中的xf-acrodc2015<ul>
<li>拷贝 <code>xf-acrodc2015</code> 这个app到桌面上，并重命名为 <code>CORE Keygen.app</code></li>
<li>打开准备时候的<code>CORE Patcher</code>,选择上述的那个app，然后会提示SUCCESS</li>
<li>然后点击 桌面的 <code>CORE Keygen.app</code> 就可以打开了。</li>
<li>点击左下角 Gen.serial 复制第一行中生成的 序号，别关闭该算号器，后面还要用</li>
</ul>
</li>
<li>切换回软件，点击现在登录，会提示网络出错，这个时候关闭软件，重新打开。登录界面会多出一个“以后登录”，点击“以后登录”－“对此软件进行许可”－“请输入序列号”。粘贴入上一步复制好的序列号，然后点击 “下一步”。然后点击 “以后登录”</li>
<li>关闭软件，再打开，多试几遍，每次打开后点击右上角 登录或点击菜单栏 帮助－登录/注销，等待弹出界面，在弹出的界面中查看是否有 “链接Internet时是否出现问题？”。有的话，点击。然后点击 “脱机激活”－“生成请求代码”。复制界面中的 请求代码。切换到xf-acrodc2015，将复制好的 请求代码 粘贴入 第二个输入框。点击 下方第二个按钮 Gen.activation 。复制第三个输入框中会生成的序号。切换回 软件 脱机激活界面，粘贴入 响应代码 输入框，点击右下角“激活”按钮。提示 脱机激活 成功。</li>
<li>编辑 hosts文件，加入如下内容<pre><code>127.0.0.1 lmlicenses.wip4.adobe.com
127.0.0.1 lm.licenses.adobe.com
127.0.0.1 na1r.services.adobe.com
127.0.0.1 hlrcv.stage.adobe.com
127.0.0.1 practivate.adobe.com
127.0.0.1 activate.adobe.com
</code></pre></li>
<li>打开网络。重新打开软件，安装成功。</li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>MAC</tag>
        <tag>pdf</tag>
        <tag>水印</tag>
      </tags>
  </entry>
  <entry>
    <title>配置使用抓包工具whistle</title>
    <url>/2018/01/02/proxy/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/0.png" alt="heder"><br><a id="more"></a></p>
<h1 id="配置使用抓包工具whistle"><a href="#配置使用抓包工具whistle" class="headerlink" title="配置使用抓包工具whistle"></a>配置使用抓包工具whistle</h1><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>说明： 本文使用的是whistle抓包工具，该工具是基于NodeJs的，故你的机器首先要有NodeJs的环境。<br><strong>具体详情参考<a href="https://avwo.github.io/whistle/install.html" target="_blank" rel="noopener">安装启动</a></strong></p>
<ul>
<li>快速安装 <code>npm install -g whistle</code></li>
</ul>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>  Commands:</p>
<pre><code>run       Start a front service
start     Start a background service
stop      Stop current background service
restart   Restart current background service
help      Display help information   
</code></pre><p>拦截https，<strong>需要电脑端和客户端同时安装证书！才可以抓包https</strong>    </p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="电脑端配置"><a href="#电脑端配置" class="headerlink" title="电脑端配置"></a>电脑端配置</h2><ul>
<li>终端中运行whistle <code>w2 start</code></li>
<li>浏览器访问:<code>http://xxx:8899</code> [xxx为IP，可从终端中看到]<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/1.png" alt="运行程序"></li>
<li>安装证书<ul>
<li>在网页中下载证书<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/2.png" alt="下载证书"></li>
<li>双击下载的证书，选择’添加’<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/3.png" alt="安装证书">  </li>
<li>把证书添加到信任<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/4.png" alt="证书列表"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/5.png" alt="信任"><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/6.png" alt="输入密码"> </li>
</ul>
</li>
</ul>
<h2 id="手机端配置"><a href="#手机端配置" class="headerlink" title="手机端配置"></a>手机端配置</h2><ul>
<li>代理配置<ul>
<li>设置 &gt; 无线局域网 &gt; 配置代理 &gt; 手动 &gt; IP：电脑 ip，端口： 8899<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/7.png" alt="设置手机ip"></li>
</ul>
</li>
<li>证书配置<ul>
<li>使用Safari访问<code>http://rootca.pro</code>安装证书<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/8.png" alt="证书安装"></li>
<li>选择“安装”<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/9.png" alt="安装"> </li>
<li>输入密码<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/10.png" alt="输入密码">    </li>
<li>点击“安装”<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/11.png" alt="安装">    </li>
</ul>
</li>
<li>打开 证书信任设置<ul>
<li>设置—&gt;关于本机—&gt;证书信任设置<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/01/02/proxy/12.png" alt="证书信任设置">  </li>
</ul>
</li>
</ul>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote>
<p><a href="https://github.com/avwo/whistle" target="_blank" rel="noopener">whistle的github</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>抓包</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>优雅的识别微信的僵尸用户</title>
    <url>/2018/09/07/python-clear-wechat/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/07/python-clear-wechat/0.png" alt="0"><br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小白：“菜菜，有办法把我微信上的僵尸用户识别出来吗？而且，不用他们知道。”<br>菜菜：“干嘛呀？人家加你也是缘分，balabala…”<br>小白：“别嘚嘚，就说有木有办法？我可不想用加群的土办法。”<br>菜菜：“瞧你说的，我可是万能的程序员哎 ，有啥能难倒我的”</p>
<p>所以，真的有办法么？牛皮都吹出去了，只能硬着头皮找了，还别说还真找到这么一篇文章<a href="https://mp.weixin.qq.com/s/wof36v_9Lk_PeQOGCskGzw" target="_blank" rel="noopener">如何不失礼貌的偷偷清理微信好友？</a></p>
<p>那接下来就好办了，开整。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>MAC电脑（废话）</li>
<li>Python3 环境 </li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ol>
<li>打开终端(Terminal)，如下图<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/07/python-clear-wechat/1.png" alt="termial"></li>
<li><p>安装依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip3 install wxpy</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载本程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~/Downloads &amp;&amp; curl -fsSL https://raw.githubusercontent.com/ruicky/python-awsome/master/wechat_clear/wechat_clear.py -o wechat_clear.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 wechat_clear.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>扫码(在终端中会显示一个二维码，使用手机微信扫码即可)</p>
</li>
<li>扫描进行时，程序会给你的联系人发送一段代码，放心，别人看不到，很安全。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/07/python-clear-wechat/2.png" alt="scan"></li>
<li>扫描结束，在手机微信中可以看到。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/07/python-clear-wechat/3.png" alt="end"></li>
<li>手动清理，把你拉黑，删除的好友吧！</li>
</ol>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>  代码还是很简单的，重要的是思路上。 另外，牛皮不要乱吹。<br>  实践时间：<code>2018-09-07 11:41:21</code> 不保证微信不会修复这个漏洞。</p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次 Python 脚本爬虫实录</title>
    <url>/2020/07/17/python-down-video/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/07/17/python-down-video/0.png" alt="header"><br><a id="more"></a></p>
<h1 id="记录一次-Python-脚本爬虫实录"><a href="#记录一次-Python-脚本爬虫实录" class="headerlink" title="记录一次 Python 脚本爬虫实录"></a>记录一次 Python 脚本爬虫实录</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前(2018年)，看到人民日报上面有一个特别好的国庆专题，是讲得国内各个省份的一分钟视频跟介绍的，就把那个公账号的地址给记录下来，并整理成了文章–<a href="https://ruicky.me/2019/05/29/china-map/" target="_blank" rel="noopener">这里是中国</a>。最近，因为要用到其中一分钟系列的视频作为素材，想着就用脚本下载下来。<br>刚开始准备用 Chrome 的 snippte 来做的，但是发现，由于有 很多页面跳来跳去的，所以导致很多数据得不到跟获取失败。没办法，只能上大杀器—-爬虫鼻祖 <strong>Python</strong>。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>软件条件：</p>
<ul>
<li><a href="https://www.python.org/" target="_blank" rel="noopener">Python3</a></li>
<li>[you-get][<a href="https://github.com/soimort/you-get]" target="_blank" rel="noopener">https://github.com/soimort/you-get]</a></li>
<li>[requests][<a href="https://requests.readthedocs.io/en/master/]" target="_blank" rel="noopener">https://requests.readthedocs.io/en/master/]</a></li>
</ul>
<p>数据条件:</p>
<ul>
<li>之前保存的公众号文章地址</li>
</ul>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="分析页面"><a href="#分析页面" class="headerlink" title="分析页面"></a>分析页面</h3><p>首先分析页面数据，例如打开’<a href="https://mp.weixin.qq.com/s/3JnEJKr9UlgWGdstYsv3hg‘" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/3JnEJKr9UlgWGdstYsv3hg‘</a> 公众号地址。发现其中嵌套了一个 iframe ，里面有个腾讯视频的播放器。点击页面的腾讯视频图标，外跳到腾讯视频中来播放该视频，该视频的真是播放地址为<code>https://v.qq.com/x/page/d0725d6whiw.html</code>。可以看出整个地址的变量应该就是后面的<code>d0725d6whiw</code>.<br>大概思路整理如下：</p>
<ol>
<li>使用 Python 脚本打开公众号页面，拿到视频地址</li>
<li>抓取视频地址并保存</li>
<li>使用 you-get 工具下载视频</li>
</ol>
<h3 id="爬取视频地址"><a href="#爬取视频地址" class="headerlink" title="爬取视频地址"></a>爬取视频地址</h3><p>由于之前已经有获取到每个公众号的地址了，现在这里只需要，通过 <code>requests</code> 包获取到网页内容，记得配置 headers 否则打不开公众号地址，然后通过正则匹配到视频地址的关键串，之后在进行拼接，把所得的结果写入一个文件中。整个流程就完成。</p>
<p>主要代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def save_file (content):</span><br><span class="line">    with open(&apos;video.txt&apos;, &apos;a&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class="line">        f.write(content+ &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">def get_html (url):</span><br><span class="line">    # url = &apos;https://mp.weixin.qq.com/s/3JnEJKr9UlgWGdstYsv3hg&apos;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &apos;cookie&apos;: &apos;pgv_pvi=6411978752; pgv_pvid=5128749576; RK=RaiYKbaTXh; ptcz=923c6704cdc78e647be2740a43d8264a3dfba2c46c015a188bbca4c1156c4b33; _ga=GA1.2.1273698204.1594176548; rewardsn=; wxtokenkey=777; tvfe_boss_uuid=017df832425d807d; pgv_info=ssid=s1234604434; pgv_si=s9151318016&apos;,</span><br><span class="line">        &apos;user-agent&apos;:&apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    result = requests.get(url,headers=headers)</span><br><span class="line">    return result.text</span><br><span class="line"></span><br><span class="line">def parse_result(html):</span><br><span class="line">    pattern = re.compile(</span><br><span class="line">        &apos;vid=(\w&#123;11&#125;)&apos;,</span><br><span class="line">        re.S)</span><br><span class="line">    # items = re.findall(pattern, html)</span><br><span class="line">    data = re.search(pattern,html)</span><br><span class="line">    print(data.group(1))</span><br><span class="line">    return data.group(1)</span><br><span class="line"></span><br><span class="line">def conect_url (id):</span><br><span class="line">    # https://v.qq.com/x/page/e07415ouyl2.html</span><br><span class="line">    return &apos;https://v.qq.com/x/page/&apos;+ str(id) +&apos;.html&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main ():</span><br><span class="line">    array = [&apos;https://mp.weixin.qq.com/s/3JnEJKr9UlgWGdstYsv3hg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/Tba_AsVUDlh9pwqssugxLA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/fDJWWLc5hNC7TUozqYNNRQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/FXTuwDmPTndO_ispQmwFUA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/QN5sp-6c_t5Voa9Na4hJUg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/ZLJO429hi9A2nBjqKoSDXw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/fsGiEUvWlLG5hTuIXxu9Ew&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/wcnz_v49I9Uu4ZcpOnTywQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/W5CtrpAtlyMMZcdMaUx3yA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/u1j4nIDPZQxieKFGioxQUg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/1H-WTJNrz_ydLgH3n_JatQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/bH5Ip-7aAMscnjm6yJuROw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/vEiAhSggFaqCxkYqCCRdFw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/ZGwvIBFhgW6P4fOAjb4z9g&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/MEJzCmkK7fcCu5wixwrDGA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/2SJvvkpC1S8U__WfpCS1nw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/MJUU6VttxhrRo5WjZtYqJw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/mpCx-FnqJZP8hvBHbbCBpg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/CturocUYQtCf_Q_yOHM3eQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/O2KMaluN7Xg1vRReL9TJFg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/9_yrOUTmpD68qlmpapiSYA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/gCFxale2551ETk9IegBhSQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/LNkXVUJFCNUICdXzbEIbfQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/-uOAT-AQN1cGEmyBrh0BSg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/x6MyukTK0eDt_5CdLJhmcw&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/GOSjnUj3smQsXuunKPJ_ww&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/rl5eg1Rds2FA2bGBX5ImSg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/jyYWMAlcqChjiO2z8zUllQ&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/aKW8ZaPpFi3MAleaJVkzFg&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/7oMvbY4oEu1d0OTWW8VcmA&apos;,</span><br><span class="line">        &apos;https://mp.weixin.qq.com/s/5E4qHPkxld_acANwYctZNw&apos;]</span><br><span class="line">    for item in array:</span><br><span class="line">        html = get_html(item)</span><br><span class="line">        id = parse_result(html)</span><br><span class="line">        video_url = conect_url(id)</span><br><span class="line">        print(&apos;video_url--&gt;&apos; + str(video_url))</span><br><span class="line">        save_file(video_url)</span><br><span class="line">        # time.sleep(3)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>
<h3 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h3><h5 id="you-get"><a href="#you-get" class="headerlink" title="you-get"></a>you-get</h5><p><a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a> 是一个 Python 写的下载工具，国内主流的网站都可以下载。不能破解 vip 视频哦，当然你要有 cookie 的话就可以下载，理论上，你看到什么就能下载什么。<br>安装方式： <code>$ pip3 install you-get</code><br>更新方式： <code>$ pip3 install --upgrade you-get</code></p>
<h5 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h5><p>本文的获取 cookie 是使用的 Chrome 的插件 – <a href="https://chrome.google.com/webstore/detail/cookiestxt/njabckikapfpffapmjgojcnbfjonfjfg?hl=zh" target="_blank" rel="noopener">cookies.txt</a>。它可以导出 cookie 给其他程序使用。</p>
<p>下载命令：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> you-get -o /Users/ruicky/Downloads/中国一分钟 -I /Users/ruicky/Downloads/video.txt --cookies /Users/ruicky/Downloads/cookies.txt</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过简单的 Python 脚本就可以实现重复的劳动，果然强大如斯。但是也有一个问题需要考虑，通过 you-get 下载的视频即使携带了 cookie 了能够下载高清的视频，但是也是有水印的，这个怎么破呢？其实也有方法，那就是使用 Mac 下的一个好用方便的下载工具 <code>Downie 4</code>，自己亲测使用抓包的地址下载没有水印，完美解决问题，但是不能实行自动化 比较可惜。</p>
]]></content>
      <categories>
        <category>程序</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>脚本</tag>
        <tag>下载</tag>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title>新的域名 - ruicky.me</title>
    <url>/2018/09/13/ruicky-domain/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/13/ruicky-domain/0.png" alt="0"><br><a id="more"></a></p>
<h1 id="ruicky-me"><a href="#ruicky-me" class="headerlink" title="ruicky.me"></a><a href="https://ruicky.me" target="_blank" rel="noopener">ruicky.me</a></h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>小白：“你都有<a href="www.wangruirui.cn">域名</a>了为啥 还有在买<a href="ruicky.me">一个</a>”<br>菜菜：”怎么说呢，那个域名是我的名字的缩写，个人品牌打造来说不错，但是吧，这个<strong>ruicky.me</strong>的域名，只能说这个更适合我。”</p>
</blockquote>
<blockquote>
<p>小白：“此话怎讲？”<br>菜菜：“你去搜一下 ruicky 关键字就知道了。”</p>
</blockquote>
<h2 id="重新起航"><a href="#重新起航" class="headerlink" title="重新起航"></a>重新起航</h2><p>之前的域名还没过期，顾也更新，但接下来，Ruicky，就是我的主要活动区域了。</p>
<ol>
<li>在 <a href="https://www.godaddy.com/" target="_blank" rel="noopener">godaddy</a> 购买域名</li>
<li>用 <a href="https://hexo.io" target="_blank" rel="noopener">hexo</a> 生成静态页</li>
<li>在 <a href="https://www.github.com" target="_blank" rel="noopener">github</a> 上创建仓库，保存页面</li>
<li>在 <a href="https://www.netlify.com/" target="_blank" rel="noopener">netlify</a> 托管静态页</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://jaeger.itscoder.com/web/2017/08/30/github-page-https.html" target="_blank" rel="noopener">GitHub Page 博客自定义域名添加 HTTPS 支持</a></p>
</blockquote>
]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>ruicky.me</tag>
      </tags>
  </entry>
  <entry>
    <title>博客今日起航，附带说明</title>
    <url>/2017/03/24/set-sail/</url>
    <content><![CDATA[<p><img src="https://drscdn.500px.org/photo/62164963/q%3D80_m%3D1000/76abbeb99f041af4664c73b9dac022a0" alt="起航"><br><a id="more"></a></p>
<h2 id="起航"><a href="#起航" class="headerlink" title="起航"></a>起航</h2><p>  搭建博客很长时间的计划了，懒癌患者，直到今天才开始重新捡起以前搭建一半的博客。</p>
<h2 id="网站说明"><a href="#网站说明" class="headerlink" title="网站说明"></a>网站说明</h2><p>域名：<a href="https://ruicky.me" target="_blank" rel="noopener">https://ruicky.me</a><br>框架：<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a> + <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a><br>主题：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next</a><br>SEO优化：<br>备份：<a href="http://zhujiegao.com/2015/12/06/automatic-backup/" target="_blank" rel="noopener">自动备份Hexo博客源文件</a><br>评论+打赏+RSS：<a href="http://www.jianshu.com/p/5973c05d7100" target="_blank" rel="noopener">【干货】2个小时教你hexo博客添加评论、打赏、RSS等功能</a></p>
<blockquote>
<p>PS:其实先看到这篇文章的，官网也有对应的配置，还是参考<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">官网(nexg)</a>为准</p>
</blockquote>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>小记：修整小米手环2点不亮问题</title>
    <url>/2018/03/09/shouhuan2/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/shouhuan2/0.png" alt="0"><br><a id="more"></a></p>
<h1 id="小记：修整小米手环2点不亮问题"><a href="#小记：修整小米手环2点不亮问题" class="headerlink" title="小记：修整小米手环2点不亮问题"></a>小记：修整小米手环2点不亮问题</h1><p>大家吼，好久木有更新文章了，以前都是技术文章，今天来点生活上的干活。<br>  话说，前两天，出去跑步，想起自己还有个小米手环，这不是正好派上用场么。当我满心欢喜从抽屉里翻出来后，点了半天，木有反应<img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/shouhuan2/1.gif" alt="1.gif"><br>  难道是我太冷落它了，自己给我闹革命？<br>  不行，手环你不能这么轻易的狗带，说好的陪我走过春夏秋冬呢，这才不到半年，你就这么离我而去么？！！<br>  结果，我不懈劝说下，丫的一点反应木有，得嘞，我还是去网络上找找去，看有没有小伙伴跟我一样的结果。<br>  还真被我找到了。接下来，是重点，搬好小板凳，那出本子，做好小笔记哦~</p>
<blockquote>
<p>如果你手环点了半天没反应，多半是没电了，对，你没听错，就是这么简单的原因。<br>想要解决充电充不进去的问题，需要按照以下步骤逐一排查</p>
<ol>
<li>首先请多插拔几次手环主体或者稍微摆动下手环主体。</li>
<li>其次请确保USB接口（PC或其它供电设备）正常供电的情况下，更换小米手环USB充电线试试。</li>
<li>再次请在小米手环APP中“我的手环”界面是否有正在充电的提示。</li>
<li>若您较长时间未给小米手环充电过，可以用手或小刀轻轻刮一下充电口的两个金属触点，因为可能触点被氧化物覆盖。</li>
</ol>
</blockquote>
<p>按照上面提示，最后拿着小刀刀，在米粒的金属片上划了划，插上电源，哎呦喂，奇迹般的，显示开始充电。<br> <img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/03/09/shouhuan2/2.gif" alt="2.gif"></p>
<p> 看来是平常洗手不摘手环，上面有氧化物了，o(╯□╰)o</p>
<p>以上就是让我手环复活的过程，希望对观众大老爷们，有用~</p>
<p>PS:<strong>若以上方法无法解决您的问题，建议您联系售后人员将手环重新检测一下，切不可，强撸啊，少年！！</strong></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>小米手环2</tag>
      </tags>
  </entry>
  <entry>
    <title>拯救被墙的IP，CDN + v2ray</title>
    <url>/2019/06/12/solve-ban-ip/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/0.png" alt="solve"><br><a id="more"></a></p>
<h1 id="拯救被墙的IP，CDN-v2ray"><a href="#拯救被墙的IP，CDN-v2ray" class="headerlink" title="拯救被墙的IP，CDN + v2ray"></a>拯救被墙的IP，CDN + v2ray</h1><h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>  相信大家都有ban IP 的经历，不管怎么加密，混淆都有可能被ban IP的可能，目前没有任何一个工具保证永远不会出问题。</p>
<p>  遇到问题，上网搜索，发现一个好玩的就是 CDN + v2ray的组合,简而言之就是 下载乃服务器上用v2ray伪装成一个网站，再用cdn中转。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/pc-firewall-cdn-vps.png" alt="网络流量传递"><br>  这样的话，防火墙只知道你喝CDN之间的联系，不知道VPS实际的地址，这样就有效的防止你的IP被ban，并且CDN会有很多ip地址，防火墙也不会随意去 ban 他们的 IP，毕竟也有很多正规的网站在使用，所以基本上可以确保你的 IP 的安全。<br>  优缺点<br>CDN 也不是万能的，否则大家就都用这个了，其中的优劣如下：</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>有效防止 IP 被 ban</li>
<li>已经被 ban 的 IP 也能通过这个方式继续使用</li>
<li>对于网络很糟糕的线路可以起到加速的效果<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4></li>
<li>延迟可能会增大</li>
<li>对于原本很好的线路会起到减速的效果</li>
<li>配置比较繁琐</li>
<li>需要拥有一个域名，不过域名价格便宜，也不完全算是缺点，便宜的域名一年的费用还没有 vps 一个月的价格高。<h4 id="适合的人群"><a href="#适合的人群" class="headerlink" title="适合的人群"></a>适合的人群</h4></li>
<li>担心将来 IP 被 ban</li>
<li>IP 已经被 ban 但是由于各种原因不想或不能换 IP</li>
<li>经常为 ban IP 而烦恼</li>
<li>对速度要求不高只想安安稳稳的用</li>
</ul>
<h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>  可通过各种渠道购买域名，捡便宜的买就好，主要做个域名映射而已。推荐用<a href="https://sg.godaddy.com/zh" target="_blank" rel="noopener">godaddy</a>购买，可用支付宝，而且没有备案之类的东西。<br>  购买过程就省略了很简单</p>
<h4 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h4><p>  本文的前提是你已经有VPS独立的IP了。如果没有可通过其他渠道购买。</p>
<h2 id="三、使用-CloundFlare-CDN"><a href="#三、使用-CloundFlare-CDN" class="headerlink" title="三、使用 CloundFlare CDN"></a>三、使用 CloundFlare CDN</h2><p>  CloudFlare 是一家全球知名的 CDN 服务商，并且提供了免费的 CDN 套餐，还不限流量，所以我们完全不需要花一分钱就能使用它的 CDN 服务，接下来我就说明如何注册并使用 CloudFlare。</p>
<h4 id="注册CloundFlare"><a href="#注册CloundFlare" class="headerlink" title="注册CloundFlare"></a>注册CloundFlare</h4><p>首先打开 <a href="https://blog.sprov.xyz/go/cloudflare" target="_blank" rel="noopener">CloudFlare</a> 官网，注册一个账号，注册流程很简单，只需要邮箱就行了，这里不再阐述。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/register-cf.png" alt="注册 CloundFlare CDN 账户"></p>
<h4 id="使用-CloudFlare-管理域名"><a href="#使用-CloudFlare-管理域名" class="headerlink" title="使用 CloudFlare 管理域名"></a>使用 CloudFlare 管理域名</h4><ol>
<li>添加网站</li>
<li>修改域名服务器的解析地址</li>
</ol>
<h4 id="使用-CloudFlare-CDN"><a href="#使用-CloudFlare-CDN" class="headerlink" title="使用 CloudFlare CDN"></a>使用 CloudFlare CDN</h4><p>  我们选择 【DNS】，这里就是管理域名的解析记录的地方，我这里还没有添加解析记录，下方红框可以用来添加一条解析记录，要填入的信息分别是：解析记录类型、解析名称、解析记录、TTL值。橘色云朵代表该解析记录使用 CDN，灰色云朵代表该解析记录不使用 CDN，点击云朵可以进行切换</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/dns.png" alt="DNS管理"></p>
<p>我们先添加一条解析记录，类型选择 A，名称填入 www，再填上你的 vps 的 IP 地址，TTL 默认选择 Automatic，橘色云朵，填好之后点击 Add Record，这样，一条解析记录就添加完成了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/dns-jiexi.png" alt="添加解析记录"></p>
<p>假设你的域名为 haha.xyz，这条解析记录的意思就是：将 <a href="http://www.haha.xyz" target="_blank" rel="noopener">www.haha.xyz</a> 解析到 IP 地址 123.123.123.123 上。因为开启了橘色云朵，所以实际上的解析记录是 CloudFlare 提供的 CDN 节点的 IP，并由 CDN 节点来访问实际的 IP 地址。</p>
<p>添加完这条解析记录就不用管 CDN 了，接下来就是配置 v2ray。</p>
<h2 id="四、Veray-安装及配置"><a href="#四、Veray-安装及配置" class="headerlink" title="四、Veray 安装及配置"></a>四、Veray 安装及配置</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="1-安装-curl-，-vim-和-wget"><a href="#1-安装-curl-，-vim-和-wget" class="headerlink" title="1. 安装 curl  ， vim 和 wget"></a>1. 安装 curl  ， vim 和 wget</h5><p><strong> RedHat系列：Redhat、Centos、Fedora等 </strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install curl vim wget -y</span><br></pre></td></tr></table></figure>
<p><strong> Debian系列：Debian、Ubuntu等 </strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install curl vim wget -y</span><br></pre></td></tr></table></figure></p>
<h5 id="2-安装-v2ray"><a href="#2-安装-v2ray" class="headerlink" title="2. 安装 v2ray"></a>2. 安装 v2ray</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure>
<h5 id="3-启动v2ray"><a href="#3-启动v2ray" class="headerlink" title="3. 启动v2ray"></a>3. 启动v2ray</h5><p>使用以下命令启动v2ray。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start v2ray</span><br></pre></td></tr></table></figure></p>
<p>再使用以下命令检测是否启动成功，如果出现active (running)字样就说明启动成功了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status v2ray</span><br></pre></td></tr></table></figure></p>
<p>如果上面的命令报错的话，可以尝试以下命令启动，并检测是否启动成功。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service v2ray start</span><br><span class="line">service v2ray status</span><br></pre></td></tr></table></figure></p>
<h5 id="4-关闭linux防火墙"><a href="#4-关闭linux防火墙" class="headerlink" title="4. 关闭linux防火墙"></a>4. 关闭linux防火墙</h5><p>因为Linux防火墙可能会阻挡我们去连接v2ray，所以需要关闭它。使用以下三组命令关闭防火墙，你只需要选择其中的一组来执行即可，如果报错，才需要去执行下一组的命令。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"> </span><br><span class="line">servcie iptables stop</span><br><span class="line">chkconfig iptables off</span><br><span class="line"> </span><br><span class="line">ufw disable</span><br></pre></td></tr></table></figure></p>
<h5 id="5-安装bbr加速tcp"><a href="#5-安装bbr加速tcp" class="headerlink" title="5. 安装bbr加速tcp"></a>5. 安装bbr加速tcp</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/sprov065/blog/raw/master/bbr.sh &amp;&amp; bash bbr.sh</span><br></pre></td></tr></table></figure>
<p>安装完成，提示是否重启系统，输入y，并回车，重启系统，如果不重启的话bbr是不会生效的。<br>使用下面的命令查看是否启用了bbr<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure></p>
<p>如果返回的结果出现了tcp_bbr字样那说明已经启用了，可以用了。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="1-服务器端配置"><a href="#1-服务器端配置" class="headerlink" title="1. 服务器端配置"></a>1. 服务器端配置</h5><p>调用 <code>usr/bin/v2ray/v2ctl uui</code>d 命令随机生成一个 id ，下面填写要用</p>
<p>编辑config文件, <code>vim /etc/v2ray/config.json</code>，在 <strong>inbounds</strong> 节点下增加一个对象。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>:&#123;</span><br><span class="line">    <span class="attr">"clients"</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>:<span class="string">"这里填写生成的id"</span>,</span><br><span class="line">        <span class="attr">"alterId"</span>:<span class="number">64</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"protocol"</span>:<span class="string">"vmess"</span>,</span><br><span class="line">  <span class="attr">"port"</span>:<span class="number">80</span>,</span><br><span class="line">  <span class="attr">"streamSettings"</span>:&#123;</span><br><span class="line">    <span class="attr">"wsSettings"</span>:&#123;</span><br><span class="line">      <span class="attr">"path"</span>:<span class="string">"/"</span>,</span><br><span class="line">      <span class="attr">"headers"</span>:&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"network"</span>:<span class="string">"ws"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完如下图<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/config.jpg" alt="config"></p>
<p>重启v2ray<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart v2ray</span><br></pre></td></tr></table></figure></p>
<p>查看状态<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status v2ray</span><br></pre></td></tr></table></figure></p>
<p>如果其中有filed提示，仔细检查config文件是否配置正确。</p>
<h5 id="2-客户端配置"><a href="#2-客户端配置" class="headerlink" title="2. 客户端配置"></a>2. 客户端配置</h5><p><strong> 客户端下载 </strong><br>V2RayW(windows):<a href="https://github.com/Cenmrev/V2RayW/releases" target="_blank" rel="noopener">github</a><br>V2RayX(macos):<a href="https://github.com/Cenmrev/V2RayX/releases" target="_blank" rel="noopener">github</a></p>
<p><strong> 客户端配置 </strong><br>众多的客户端我就不一一演示了，基本上大同小异，这里就以 Windows 客户端 v2rayN 来说明一下配置要点：</p>
<ul>
<li>地址一定要填域名，并且这个域名要解析到 v2ray 服务器的 IP，开启橘色云朵</li>
<li>传输协议选择 ws，有些客户端叫做 WebSocket，是一样的</li>
<li>路径一定要和服务端的一模一样，错了就连不上</li>
<li>其余的都是常规配置，这里不再说明<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/client.jpg" alt="client"></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/client-2.png" alt="client-2"></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>选择pac模式，load core。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/12/solve-ban-ip/client-3.png" alt="client-3"></p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>以上就是使用 CDN + v2ray 的代理方式的全部教程了，内容比较多，对于新手来说可能会比较复杂，如果你遇到了难以解决的问题，可以在评论区留言，我会尽量给出解决方案，祝你搭建成功</p>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><blockquote>
<p><a href="https://blog.sprov.xyz/2019/03/11/cdn-v2ray-safe-proxy/#CDN" target="_blank" rel="noopener">拯救被墙的IP，CDN + v2ray，安全的科学上网方法</a><br><a href="https://www.v2ray.com/" target="_blank" rel="noopener">v2ray官网</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>CDN</tag>
        <tag>v2ray</tag>
        <tag>CloundFlare</tag>
        <tag>CloundFlare CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH远程登录服务器(By-Ruicky)</title>
    <url>/2017/05/15/ssh-tools/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/05/15/ssh-tools/1.png" alt="1"><br><a id="more"></a></p>
<p>#SSH远程登录服务器</p>
<p>最近搭建了一个远程 Linux 服务器，在使用过程中每次SSH登录都需要输入密码，很不方便。所以想配置一下 SSH Key 实现 SSH 免密登录。同时，还要保证配置的过程中不能覆盖当前配置好的 SSH Key，比如 Github使用到的SSH。</p>
<p>所以现在有两个问题需要解决：</p>
<p>问题1： 登录时不用输入密码进行验证。<br>问题2： 多 SSH Key 管理。保证本地电脑上为Github配置的 SSH Key不会被覆盖。<br>下面我们来解决这两个问题</p>
<h2 id="1-免密码登录"><a href="#1-免密码登录" class="headerlink" title="1. 免密码登录"></a>1. 免密码登录</h2><p>在本地电脑上生成 SSH公钥和私钥。下面的命令是生成 SSh 公钥和私钥到指定目录下。</p>
<p>其中的路径和邮箱地址请更换为你自己的。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -f /Users/user/.ssh/rsa_vps/id_rsa_remote -C &quot;user@domain.com&quot;</span><br></pre></td></tr></table></figure></p>
<p>将公钥上传到服务器<code>.ssh</code>目录下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scp id_rsa_vps.pub root@123.456.789.123:~/.ssh/</span><br></pre></td></tr></table></figure></p>
<p>最后在远程服务器上将公钥内容追加到 <code>~/.ssh/authorized_keys</code> 文件中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure></p>
<h2 id="2-多SSH管理"><a href="#2-多SSH管理" class="headerlink" title="2. 多SSH管理"></a>2. 多SSH管理</h2><p>如果要管理多个 SSH，需要在用户主目录下的 <code>.ssh</code>文件夹下新建并配置<code>config</code>文件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br></pre></td></tr></table></figure></p>
<p>在<code>config</code>文件里按照如下格式进行填写<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    User test</span><br><span class="line"></span><br><span class="line">Host 123.456.789.123</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_romote/id_rsa_remote</span><br><span class="line">    User root</span><br></pre></td></tr></table></figure></p>
<p>每个参数具体的含义如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host 别名</span><br><span class="line">    HostName  主机名</span><br><span class="line">    Port      端口</span><br><span class="line">    User      用户名</span><br><span class="line">    IdentityFile 密钥文件的路径</span><br></pre></td></tr></table></figure></p>
<p>配置好了之后，我们快去测试一下吧。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 测试GitHub</span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi test! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line"># 测试远程服务器</span><br><span class="line">$ ssh root@123.456.789.123</span><br><span class="line">Welcome to Ubuntu 16.10 (GNU/Linux 4.8.0-39-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">  Get cloud support with Ubuntu Advantage Cloud Guest:</span><br><span class="line">    http://www.ubuntu.com/business/services/cloud</span><br><span class="line"></span><br><span class="line">14 packages can be updated.</span><br><span class="line">0 updates are security updates.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** System restart required ***</span><br><span class="line">root@Ubuntu:~#</span><br></pre></td></tr></table></figure></p>
<p>ok,搞定收工。<br>补充如下：<br>如果服务器没有<code>.ssh</code>目录则需要自己手动创建<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -C &quot;example@domain.com&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><blockquote>
<p><a href="http://www.jianshu.com/p/e427125b1c72" target="_blank" rel="noopener">SSH远程登录服务器</a><br><a href="https://www.chenyudong.com/archives/ssh-using-private-public-key-no-password.html" target="_blank" rel="noopener">ssh非交互式密码授权(三)：使用密钥进行认证</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 解锁网易云音乐变灰</title>
    <url>/2019/07/31/unblock-music/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/0.jpg" alt="header"><br><a id="more"></a></p>
<h1 id="Mac-解锁网易云音乐变灰"><a href="#Mac-解锁网易云音乐变灰" class="headerlink" title="Mac 解锁网易云音乐变灰"></a>Mac 解锁网易云音乐变灰</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>有天，朋友推荐了一首周杰伦的《告白气球》，说很好听，让我听下。打开网易云音乐客户端，搜索框输入’告白气球‘，额，一顿操作猛如虎，一看歌单全是灰。</p>
<p>好吧，原来由于版权问题，网易音乐把很多没有版权的音乐给下架了。但是资料还可以查到，就是不能播放了。</p>
<p>好吧，对于习惯使用网易音乐的朋友，每天听听歌，看看评论也是蛮有意思的。这下不能听了咋整，网上搜索一番，找到如下方法解决。 </p>
<p>以下，偏向有一定编程基础的人。</p>
<h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>使用/ QQ / 虾米 / 百度 / 酷狗 音源替换变灰歌曲链接。</p>
<h2 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a>开始前准备</h2><p>软件环境:</p>
<ul>
<li>mac(macOs 10.14.4)</li>
<li>网易云音乐[v2.1.1(790]</li>
<li>node (v10.13.0)</li>
<li>pm2 <ul>
<li>node进程管理工具</li>
</ul>
</li>
<li>Proxifier (v2.22)<ul>
<li>代理工具</li>
<li><a href="https://xclient.info/s/proxifier.html" target="_blank" rel="noopener">下载地址</a></li>
</ul>
</li>
</ul>
<p>需提前获取 <code>music.163.com</code> 的 实际IP。 可通过 <code>ping music.163.com</code> 获取。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/ping-ip.png" alt="ping-ip"></p>
<p>如我的就是 <code>59.111.160.197</code>，在项目启动的时候 就要用这个了。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol>
<li>代码<ul>
<li>下载代码 <ul>
<li><code>git clone https://github.com/nondanee/UnblockNeteaseMusic.git</code></li>
</ul>
</li>
<li>安装依赖 <ul>
<li><code>cd UnblockNeteaseMusic</code></li>
</ul>
</li>
<li>使用进程管理<ul>
<li><code>pm2 start app.js --name unblockMusic -- -f 59.111.160.197 -p 63455:8081</code></li>
<li>说明： <code>-f</code> 为上方你自己本地的 ping 出来的 ip 替换成自己的即可.</li>
<li><code>-p</code> 中 63455 为 https 的端口， 8081 为http 的端口</li>
</ul>
</li>
</ul>
</li>
<li><p>配置代理</p>
<ul>
<li>打开 <code>Proxifier</code> 软件</li>
<li>配置 <code>Proxies</code> 如下<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/p-1.jpg" alt="p-1"></li>
<li>配置 <code>Rules</code> 如下<ul>
<li>Applications 为 <code>NeteaseMusic;com.apple.WebKit.Networking</code></li>
<li>Target Hosts 为 <code>*.music.163.com;*.music.126.net;mam.netease.com;api.iplay.163.com</code></li>
<li>选择 Action 为刚才创建的即可<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/p-2.jpg" alt="p-2"></li>
</ul>
</li>
<li>配置 <code>DNS</code> 如下<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/p-3.jpg" alt="p-3"></li>
</ul>
</li>
<li><p>测试<br>打开网易云音乐，搜索 <code>周杰伦</code>，看到歌曲不为灰色 就算成功了！<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/07/31/unblock-music/r-1.jpg" alt="r-1"></p>
</li>
<li><p>补充<br>服务器部署 <code>pm2 start app.js --name unblockMusic -- -f 59.111.160.197 -p 80:443</code><br>Proxifier 代理 <code>https ip</code> 说明：启动的时候假如是 63255:9300 其实对应的是http:https 但是这个软件不一样需要对应的是 63255 http 代理</p>
</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/22" target="_blank" rel="noopener">UnblockNeteaseMusic</a></p>
<p><a href="https://www.sheyilin.com/2019/06/unblockneteasemusic/" target="_blank" rel="noopener">解锁网易云音乐变灰歌曲</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>网易云音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 vsCode 终端命令不能使用问题</title>
    <url>/2019/06/19/vscode-nvm-error/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/19/vscode-nvm-error/error.png" alt="error"><br><a id="more"></a></p>
<h1 id="解决-vsCode-终端命令不能使用问题"><a href="#解决-vsCode-终端命令不能使用问题" class="headerlink" title="解决 vsCode 终端命令不能使用问题"></a>解决 vsCode 终端命令不能使用问题</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>系统：MACOS<br>说明：在使用vsCode的终端，使用 <code>npm i</code> 报错 <code>Cannot find module &#39;node-gyp/bin/node-gyp&#39;</code> 但在别的终端 如 iTerm2 上面 就可以正常使用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/19/vscode-nvm-error/error.png" alt="error"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先排除 <code>node-gyp</code> 没有全局安装的问题，因为可以在其他的终端正常使用。<br>其次，看了下两边的版本 <code>node -v</code> 都是 v10.13.0<br>然后，突然想起，自己先使用官方的安装包(dmg)方式安装，后来为了兼容老项目，安装过 <code>nvm</code> ，会不会是它搞得鬼。使用<code>nvm list</code>，发现果然不一样。</p>
<p>↓↓↓ iTerm2显示结果  ↓↓↓<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/19/vscode-nvm-error/terimal.png" alt="iTerm2显示结果"></p>
<p>↓↓↓ vsCode终端显示结果  ↓↓↓<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2019/06/19/vscode-nvm-error/vscode.png" alt="vsCode终端显示结果"></p>
<p>那么显而易见 就是这个原因了。vsCode 中的终端 使用的是我前面dmg安装的系统的变量以及node_pacage包，而 iTerm2 则使用的是 nvm的变量及包。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>知道了原因就对症下药。</p>
<h5 id="临时解决方案："><a href="#临时解决方案：" class="headerlink" title="临时解决方案："></a>临时解决方案：</h5><p>在vsCode的终端也使用跟 iTerm2 中一样的 nvm 版本。</p>
<p>即 在 vsCode 终端中 执行 <code>nvm use v10.13.0</code>， 也能够正常的使用。</p>
<p>为什么说临时呢，因为当你关闭编辑器，再次打开的时候，还得设置。</p>
<h5 id="最终解决方案："><a href="#最终解决方案：" class="headerlink" title="最终解决方案："></a>最终解决方案：</h5><p>在 Google 了一圈在这个 github 的 <a href>issues</a>发现解决问题</p>
<p>即 在 vsCode 的 <code>settings.json</code>  文件中增加 <code>&quot;terminal.integrated.shellArgs.osx&quot;: []</code></p>
<p>PS：每个系统的 <code>settings.json</code> 存放位置不一样，可借鉴下面。</p>
<ul>
<li><strong>Windows</strong> <code>%APPDATA%\Code\User\settings.json</code></li>
<li><strong>macOS</strong> <code>$HOME/Library/Application Support/Code/User/settings.json</code></li>
<li><strong>Linux</strong> <code>$HOME/.config/Code/User/settings.json</code></li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="https://code.visualstudio.com/docs/getstarted/settings" target="_blank" rel="noopener">User and Workspace Settings</a><br><a href="https://github.com/Microsoft/vscode/issues/36987" target="_blank" rel="noopener">Terminal seems to set <code>npm config prefix</code> and it breaks <code>nvm</code></a></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
        <category>解决</category>
      </categories>
      <tags>
        <tag>vsCode</tag>
        <tag>nvm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>让你在群聊中更闪亮✨</title>
    <url>/2018/09/28/wechat-egg/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/28/wechat-egg/0.png" alt="head"><br><a id="more"></a></p>
<h1 id="让你在群聊中更闪亮✨"><a href="#让你在群聊中更闪亮✨" class="headerlink" title="让你在群聊中更闪亮✨"></a>让你在群聊中更闪亮✨</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这纯属一个小玩意，主要是比较有意思，分享给大家。话不多说上效果。</p>
<video src="./demo.mp4" controls="controls" style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;"><br>your browser does not support the video tag<br></video>

<!-- 不想点开视频的小伙伴，可以看GIF图。

![demo](./1.gif) -->
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>有人就说了，你这标题党，进来了，你给我看这个？客官先别着急走啊。虽然不是你想象中的闪亮，但是也bulingbuling了不是。也算是响应标题啦。</p>
<p>首先选择你要选择你要修改的群，然后选择右上角的三个点，然后往下滑，找到“我在本群的昵称”，如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/28/wechat-egg/2.png" alt="1"></p>
<p>然后输入你想要的名字加上<code>คิดถึง</code> ，如 <code>ruickyคิดถึง</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/28/wechat-egg/3.png" alt="1"></p>
<p>然后别人艾特你的时候，屏幕就会飘下小星星啦~</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>爱思考的小伙伴，肯定会说，什么嘛，不就是关键字的特效。然后别人在艾特你的时候 触发表情掉落嘛。<code>จุ๊บ</code>就是泰语吻的意思，<code>คิดถึง</code>就是泰语想念的意思。所以你看很有意思吧。其他的外语我还没有试，大家可以自己去在线翻译摸索摸索。</p>
<p>这里是我整理的一些小彩蛋供大家玩耍：</p>
<p>​    <code>จุ๊บ</code> ： 满屏飞吻</p>
<p>​    <code>ฉันคิดถึง</code> ： 满屏星星</p>
<p>​    <code>สุขสันต์วันเกิด</code> ： 满屏蛋糕</p>
<p>那么问题来了，你有什么好玩的微信彩蛋呢？可以在留言区留言。 </p>
<p>更多好玩有趣的，请关注微信公众号。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/28/wechat-egg/4.jpg" alt="wechat"></p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>彩蛋</tag>
      </tags>
  </entry>
  <entry>
    <title>导出你苹果的微信聊天记录</title>
    <url>/2018/02/23/wechat-explorer/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/23/wechat-explorer/0.png" alt="0"><br><a id="more"></a></p>
<h1 id="导出你苹果的微信聊天记录"><a href="#导出你苹果的微信聊天记录" class="headerlink" title="导出你苹果的微信聊天记录"></a>导出你苹果的微信聊天记录</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>设想这么个场景，你在微信上跟个美眉聊天聊得很愉快，然后，感觉其中你们的部分聊天记录 很有收藏价值，截图吧，累死，而且很多的截不全。这个时候怎么办？<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/23/wechat-explorer/1.gif" alt="1.jpeg"></p>
<p>没有什么事能难倒程序员。下面一步步教你从微信中导出聊天记录。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote>
<p>由于 iOS 本身的限制，是拿不到任何数据的。我们只能从 iTunes 的备份中，导出微信 App 的数据，然后通过分析数据，实现一系列的功能（比如导出聊天记录，数据计算等等）。</p>
</blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本教程的成功测试硬件为：</p>
<ol>
<li>ios 10.3.3</li>
<li>微信 6.6.3</li>
</ol>
<p>如果过程中又失败的，请酌情处理。</p>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ol>
<li>准备条件<ul>
<li>windows 10 计算机</li>
<li>iTunes</li>
</ul>
</li>
<li><p>备份你手机</p>
<ul>
<li>打开 iTunes 并将设备连接到电脑。 </li>
<li>如果出现信息询问设备密码或让您“信任此电脑”，请按屏幕上显示的步骤操作。</li>
<li>当您的 iPhone 出现在 iTunes 中时，选择您的设备。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/23/wechat-explorer/2.png" alt="2">  </li>
<li>备份系统（时间因手机内容大小有不同，请<strong>耐心等候</strong>）<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/23/wechat-explorer/3.png" alt="3">        </li>
</ul>
</li>
<li><p>提取微信文件</p>
<ul>
<li>下载 <a href="https://github.com/tiancaihb/WechatExport-iOS/releases/latest" target="_blank" rel="noopener">WechatExport-iOS
</a></li>
<li>解压并打开<code>WechatExport.exe</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/23/wechat-explorer/7.png" alt="7"></li>
<li>提取内容<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/23/wechat-explorer/8.png" alt="8"></li>
<li>成果展示<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/23/wechat-explorer/9.png" alt="9">  </li>
</ul>
</li>
</ol>
<h2 id="扩展延伸"><a href="#扩展延伸" class="headerlink" title="扩展延伸"></a>扩展延伸</h2><ol>
<li><a href="https://www.jianshu.com/p/6b4514fe1549" target="_blank" rel="noopener">聊天词云</a></li>
</ol>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><blockquote>
<p><a href="https://support.apple.com/zh-cn/HT203977" target="_blank" rel="noopener">如何备份您的 iPhone、iPad 和 iPod touch</a><br><a href="http://cn.wondershare.com/iphone/iphone-backup-location.html" target="_blank" rel="noopener">如何找到 iPhone 备份位置和删除备份</a><br><a href="https://zhuanlan.zhihu.com/p/22474033" target="_blank" rel="noopener">iOS 微信的本地存储结构简析</a><br><a href="https://github.com/stomakun/WechatExport-iOS" target="_blank" rel="noopener">WechatExport-iOS</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/02/23/wechat-explorer/10.jpg" alt="10"><br>enjoy it !</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 rsync 同步 Windows 跟 Mac 之间数据</title>
    <url>/2021/06/22/win-rsync-mac/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/0.png" alt="0"><br><a id="more"></a></p>
<h1 id="使用-rsync-同步-Windows-跟-Mac-之间数据"><a href="#使用-rsync-同步-Windows-跟-Mac-之间数据" class="headerlink" title="使用 rsync 同步 Windows 跟 Mac 之间数据"></a>使用 rsync 同步 Windows 跟 Mac 之间数据</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  年初趁活动买了腾讯云的服务器，装的是 Windows Server 系统，平时没事跑跑脚本啥的。前两天整了个 QT 下载，就下一些比较费时间的资源，放到云端下载节省时间跟资源。下载完以后，就需要把资源从云端同步到本地。以此为背景，有了本文的折腾。</p>
<p>环境：</p>
<ul>
<li>服务端：Windows Server 2008 R2</li>
<li>客户端：MacOS 10.15.6</li>
<li>服务端rsync版本：cwRsyncServer_4.1.0_Installer.exe</li>
</ul>
<p>术语说明：<br><code>rsync</code> 是一个常用的 Linux 应用程序，用于文件同步，最大特点是会检查发送方和接收方已有的文件，仅传输有变动的部分。<br><code>cwRsyncServer</code> 是 Windows 下实现 rsync 的方式的服务端。</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>相关文件 我已经放到百度云，共享。先下载文件：</p>
<ul>
<li>链接: <a href="https://pan.baidu.com/s/1LZQPu3J2TDwLLZgmWVyAjQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1LZQPu3J2TDwLLZgmWVyAjQ</a> </li>
<li>提取码: uvxi </li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="创建-Windows-用户"><a href="#创建-Windows-用户" class="headerlink" title="创建 Windows 用户"></a>创建 Windows 用户</h4><h4 id="安装-Server-程序"><a href="#安装-Server-程序" class="headerlink" title="安装 Server 程序"></a>安装 Server 程序</h4><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/1.png" alt="双击安装"></p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/2.png" alt="选择我同意"></p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/3.png" alt="使用默认路径"></p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/4.png" alt="创建用户"></p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/5.png" alt="关闭"></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol>
<li>打开目录 <code>C:\Program Files(x86)\ICW</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/6.png" alt="在文件夹下打开"></li>
<li>找到 rsyncd.conf  修改如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use chroot = false</span><br><span class="line">strict modes = false</span><br><span class="line">uid = 0</span><br><span class="line">gid = 0</span><br><span class="line">log file = rsyncd.log</span><br><span class="line">[movie]</span><br><span class="line">path = /cygdrive/d/data/movie/</span><br><span class="line">ignore errors</span><br><span class="line">read only = false</span><br><span class="line">transfer logging = yes</span><br><span class="line">auth users = ruicky</span><br><span class="line">secrets file = etc/rsync.password</span><br><span class="line">hosts allow = *</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>重要参数说明</p>
<ul>
<li><code>uid = 0</code>: 0代表不限定用户</li>
<li><code>path = /cygdrive/d/data/movie/</code>: 和linux不同的是windows的备份目录前面都要加/cygdrive</li>
<li><code>auth users = ruicky</code>: rsync的虚拟用户,上面创建的用户</li>
<li><code>secrets file = etc/rsync.password</code>: rsync的密码文件路径</li>
<li><code>hosts allow = *</code>:  所有主机均可访问</li>
</ul>
<p><strong>注意：</strong> <code>path</code>路径修改为自己要同步的文件夹地址。</p>
<ol start="3">
<li>在 <code>C:\Program Files(x86)\ICW\etc</code> 目录下创建 <code>rsync.password</code> 文件，内容为：<code>ruicky:A123456a</code>。（说明：该文件存放的认证信息。格式为 用户名:密码）</li>
<li>在 Windows 的用户管理中，将刚创建的用户 <code>ruicky</code>， 设置为管理员角色</li>
<li>在 你将要共享的文件夹中，右键，安全选项卡中，将刚创建的用户 <code>ruicky</code> 增加权限，并修改为“全部控制”。</li>
</ol>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ol>
<li>在 windows 的 <code>控制面版</code> 找到 <code>管理工具</code>，打开后，找到并打开 <code>服务</code>。这一步有困难的可参考<a href="https://jingyan.baidu.com/article/fc07f989a1ead912fee51948.html" target="_blank" rel="noopener">Windows Server如何打开本地服务(services)</a></li>
<li>修改“启动类型”为 “自动”后， 启动服务。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/7.png" alt="服务启动"></li>
<li>检查端口 。打开 Windows 的命令行窗户，输入：<code>netstat -ano | findstr 873</code><br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/06/22/win-rsync-mac/8.png" alt="端口"></li>
<li>[可选] 如果是云服务器，需要在你的云端控制台，将 873 端口放行。</li>
</ol>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p>可以使用 brew 安装依赖包<code>brew install rsync</code></p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在你认为适合的位置创建 <code>rsync.password</code>文件来保存服务端的密码，内容为 <code>Aa123456a</code>(如果上方你修改，这边记得同步修改).</p>
<h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><p>打开命令行，运行<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -avztPr --password-file=/Users/ruicky/Downloads/rsync.password ruicky@11.22.33.44::movie /Users/ruicky/Downloads/movie</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li>rsync 命令<ul>
<li><code>-a</code>：归档模式，表示递归传输并保持文件属性</li>
<li><code>-v</code>：显示rsync过程中详细信息</li>
<li><code>-z</code>：传输时进行压缩提高效率</li>
<li><code>-t</code>：保持mtime属性</li>
<li><code>-P</code>：显示文件传输的进度信息</li>
<li><code>-r</code>：递归到目录中去</li>
<li><code>--password-file</code>：daemon模式时的密码文件，可以从中读取密码实现非交互式</li>
</ul>
</li>
<li>格式<br><code>rsync 用户名@你服务器IP地址::配置文件中的同步节点  本地同步路径</code></li>
</ul>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol>
<li>错误一<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows auth failed on module movie from unknown missing secret for user</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>报错原因：服务端的密码文件 <code>etc/rsync.password</code>权限不对，600改为了644</strong></p>
<ol start="2">
<li>错误二<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">password file must not be other-accessible continuing without password file</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>报错原因：服务端的密码文件 <code>etc/rsync.password</code> 路径是否正确</strong></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://blog.csdn.net/u010637366/article/details/108450143" target="_blank" rel="noopener">rsync实现windows和windows之间的数据同步</a><br><a href="https://blog.csdn.net/yunqishequ1/article/details/73844369" target="_blank" rel="noopener">rsync常见问题及解决办法</a><br><a href="http://www.ruanyifeng.com/blog/2020/08/rsync.html" target="_blank" rel="noopener">rsync 用法教程</a><br><a href="https://www.cnblogs.com/yu15/p/11175144.html" target="_blank" rel="noopener">配置Windows server 用户和组权限实验详解</a><br><a href="https://blog.csdn.net/qq_32706349/article/details/91451053" target="_blank" rel="noopener">rsync(一)：基本命令和用法</a><br><a href="https://bayton.org/2018/07/how-to-update-rsync-on-mac-os-high-sierra/" target="_blank" rel="noopener">How to update Rsync on Mac OS Mojave and High Sierra</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>windows</tag>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 搭建 php 环境</title>
    <url>/2018/09/14/windows-php/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/14/windows-php/0.png" alt="0"><br><a id="more"></a></p>
<h1 id="Windows-install-php"><a href="#Windows-install-php" class="headerlink" title="Windows install php"></a>Windows install php</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  没想到，自己有一天也会安装 php，而且还是在 Windows 上。自己是个懒人，如果只是安装完 php 还得安装 Apache ，有没有全家桶，一键搞定呢，还真有。闲话少叙，开整。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li>下载 <code>XAMPP</code><ul>
<li>地址: <a href="https://www.apachefriends.org/zh_cn/index.html" target="_blank" rel="noopener">https://www.apachefriends.org/zh_cn/index.html</a></li>
<li>安装过程简单，顾省略</li>
<li>安装完后启动即可<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/14/windows-php/1.png" alt="install">    </li>
</ul>
</li>
<li>拷贝程序<ul>
<li>打开目录 <code>C:\xampp\htdocs</code></li>
<li>新建 <code>test.php</code> 并编辑其内容如下</li>
</ul>
</li>
</ol>
<pre><code class="php"><span class="meta">&lt;?php</span>

<span class="keyword">echo</span> phpinfo();
</code></pre>
<ol start="3">
<li>测试<ul>
<li>在浏览器中访问 <code>http://localhost/test.php</code>，页面显示如下（部分截图）：<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2018/09/14/windows-php/2.png" alt="install">    </li>
</ul>
</li>
</ol>
<p>OK，集成环境安装成功, Enjoy it! 如果有疑问，可在下方留言。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://laravelacademy.org/post/2380.html" target="_blank" rel="noopener">在 Windows 下安装部署 PHP 7.0 本地开发环境</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>解决苹果内核加载网页慢的问题</title>
    <url>/2020/11/09/wk-webview/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2020/11/09/wk-webview/0.png" alt="0"><br><a id="more"></a></p>
<h1 id="解决苹果内核加载网页慢的问题"><a href="#解决苹果内核加载网页慢的问题" class="headerlink" title="解决苹果内核加载网页慢的问题"></a>解决苹果内核加载网页慢的问题</h1><h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><p>  一个H5的页面，里面嵌套在 <code>IOS</code> 中，有它的 <code>wkwebview</code> 进行渲染，这是背景。表现出的问题是，由 <code>IOS</code> 发起请求到最终用户看到页面需要等待特别长的时间，大概6秒到15秒之间。需要排查并解决这个显示慢的问题。</p>
<h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><ol>
<li><code>IOS</code> 端往浏览器中写入 <code>Cookie</code>。</li>
<li>浏览器根据 <code>url</code> 地址去请求 <code>Oauth2.0</code> 登录。</li>
<li>浏览器根据返回的 <code>code</code> 跳转 登录。</li>
<li>浏览器端登录后跳转到应用首页。</li>
</ol>
<p>PS: 其中 <strong>浏览器端</strong> 指的是 <code>IOS</code> 中的 <code>wkwebview</code></p>
<h2 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h2><ol>
<li>是否是 <code>IOS</code> 本身的 <code>wkwebview</code> 的问题？</li>
<li>为什么之前使用 <code>IOS</code> 的 <code>uiwebview</code> 没有这个问题？</li>
<li>是否是 <code>Oauth2.0</code> 业务的问题？</li>
<li>是否是应用本身的问题？ </li>
<li>是否是网络问题？</li>
</ol>
<h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><ol>
<li><code>wkwebview</code> 访问其他网页不管是https 或者 http 的都能正常访问 证明不是它本身或者配置问题。</li>
<li>为什么 <code>uiwebview</code> 没有这个问题？<br>经过试验，发现 uiwebview 本身在访问现有业务确实没有这个问题，当时也不清楚为什么它可以正常访问，就让 <code>IOS</code> 开发切换成这个不就好了。结果反馈说用这个不能上架。原来 <code>iOS13</code> 开始苹果将 <code>UIWebview</code> 列为过期 <code>API</code>。<strong>2020年4月起App Store将不再接受使用UIWebView的新App上架、2020年12月起将不再接受使用UIWebView的App更新。</strong></li>
<li>Oauth2.0 业务在安卓端都能正常访问，故排除。</li>
<li>是否是应用本身的问题? 同上。</li>
<li>是否上网络问题？<br>带着这个问题，去网上按照 <code>ios 苹果 wkwebview 超时</code>，发现大多说是 <code>wkwebview</code> 302 的坑以及存储分离 balaba的，按照给出的答案试了试 都没有解决问题。</li>
</ol>
<p>在快要放弃的时候，之前的一个<code>IOS</code>开发大拿说肯定是<code>https</code>的问题你们查查。<br>结果就找到了这篇文章</p>
<ol>
<li><a href="https://blog.csdn.net/lovelyelfpop/article/details/107851489" target="_blank" rel="noopener">ios 访问 Let‘s encrypt 免费证书的 https 很慢</a></li>
<li><a href="https://www.v2ex.com/t/665734" target="_blank" rel="noopener">部署 Let’s Encrypt 的站点国内首次打开很慢？那是因为 OSCP 域名被墙了</a></li>
<li><a href="https://leanote.zzzmh.cn/blog/post/admin/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A6%96%E6%AC%A1%E8%AF%B7%E6%B1%82%E6%85%A2-pending-10%E7%A7%92%EF%BC%8CSafari%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E6%85%A2%E7%AD%89%E9%97%AE%E9%A2%98%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%98%AFHTTPS%E8%AF%81%E4%B9%A6%E7%9A%84%E9%94%85" target="_blank" rel="noopener">微信小程序首次请求慢 Safari浏览器访问慢 pending 10秒 可能是HTTPS证书的锅</a></li>
</ol>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>看到这里，就会发现是苹果内核安全机制导致的，每次都需要去验证 https的证书，如果不巧，你用的免费的证书，那么他的颁发机构在国外，在有段期间，国内访问都会很慢。</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>  找到的原因就解决了，要么更换证书使用国内的颁发的证书，要么在服务器做DNS或者其他优化，来加速访问。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  虽然这次的问题不出在前端应用的本身，而且解决方式非常简洁，但是针对于多端联调以及排查思路有了提高。以后对于网络层次方面的问题也更有经验去定位以及解决问题。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>IOS</tag>
        <tag>wkwebview</tag>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>解决微信 JS-SDK 在 IOS 报错 config: Invalid signature</title>
    <url>/2021/09/30/wx-js-sdk/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/30/wx-js-sdk/0.png" alt="header"><br><a id="more"></a></p>
<h1 id="解决微信-JS-SDK-在-IOS-报错-config-Invalid-signature"><a href="#解决微信-JS-SDK-在-IOS-报错-config-Invalid-signature" class="headerlink" title="解决微信 JS-SDK 在 IOS 报错 config: Invalid signature"></a>解决微信 JS-SDK 在 IOS 报错 config: Invalid signature</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一个 ReactJs 的项目中使用到了，微信 JS-SDK 的一些方法，在IOS 的机型上页面加载的时候报错  <code>config: Invalid signature</code>，但是在安卓上却没有复现。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>先说下我的一些背景条件：</p>
<ul>
<li>引入的 js 文件 url 为：<code>https://res.wx.qq.com/open/js/jweixin-1.4.0.js</code></li>
</ul>
<p>报错发生的地方在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.error(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.errMsg)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>根据官网的第常见错误排查，发现跟我后台生成的签名一致，排除了签名算法的问题。<br><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/30/wx-js-sdk/error-fix.png" alt="error-fix"></p>
<p>经过查找后，发现应该是 spa 页面的缘故，在 IOS 页面中传递给微信端验证的 url 参数是第一次进入的页面，如果过程中你有 push 路由的操作，是不会进行更改的，不知道是微信内核浏览器的问题，还是 JS-SDK 本身的问题了。</p>
<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>解决思路很简单，如果是页面经过多次跳转的，则选择第一次页面加载页面的地方进行 url 存储，然后在最终页加载微信 config 的时候，进行传参。</p>
<p>Page A Load:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.entryUrl === <span class="string">'undefined'</span> || <span class="built_in">window</span>.entryUrl === <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="built_in">window</span>.entryUrl = location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>End Page weixin Config :<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isIOS = <span class="regexp">/iPad|iPhone|iPod/</span>.test(navigator.platform)</span><br><span class="line">|| (navigator.platform === <span class="string">'MacIntel'</span> &amp;&amp; navigator.maxTouchPoints &gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isIOS ? <span class="built_in">window</span>.entryUrl : location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>按照上述方法改造后，发现确实在微信端起作用了，但是同时在企业微信中却不能工作，所以如果你有在企业微信中打开的需要，则需要排除在企业微信中使用自己注入的 url，应该使用当前 url，改造如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isIOS = <span class="regexp">/iPad|iPhone|iPod/</span>.test(navigator.platform)</span><br><span class="line">|| (navigator.platform === <span class="string">'MacIntel'</span> &amp;&amp; navigator.maxTouchPoints &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> isWeCom = <span class="regexp">/wxwork/i</span>.test(<span class="built_in">window</span>.navigator.userAgent); <span class="comment">// 是否企业微信</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isIOS &amp;&amp; !isWeCom ? <span class="built_in">window</span>.entryUrl : location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，在企业微信跟微信中都可以正常工作，希望官方赶紧把这个 bug 修复一下吧，本文写于 <code>2021-09-30 14:04:48</code> 如果后续官方修复，请以官方为主。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p><a href="https://stackoverflow.com/questions/9038625/detect-if-device-is-ios" target="_blank" rel="noopener">Detect if device is iOS</a><br><a href="https://zhuanlan.zhihu.com/p/32227843" target="_blank" rel="noopener">关于微信JSSDK中遇到的“invalid signature”的天坑</a><br><a href="https://work.weixin.qq.com/api/doc/90000/90136/90509" target="_blank" rel="noopener">企业微信 API-常见错误及解决方法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>解决</category>
        <category>工作</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>JS-SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>教程：Chrome如何设置模拟微信和QQ浏览器？</title>
    <url>/2016/03/02/%E6%95%99%E7%A8%8B%EF%BC%9AChrome%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%A8%A1%E6%8B%9F%E5%BE%AE%E4%BF%A1%E5%92%8CQQ%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在wap开发中，有的时候要用到手机模拟器，这个时候Chrome的模拟功能就派上用场了，可是遗憾的是不能模拟微信内置的浏览器，很多功能不能使用，如微信支付，只能在微信环境中显示。故此，才有此文配置Chrome，让它能模拟微信内置的QQ浏览器。</p>
<a id="more"></a>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h2 id="1-打开浏览器，按F12调出调试窗口。"><a href="#1-打开浏览器，按F12调出调试窗口。" class="headerlink" title="1.  打开浏览器，按F12调出调试窗口。"></a>1.  打开浏览器，按F12调出调试窗口。</h2><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2016/03/02/教程：Chrome如何设置模拟微信和QQ浏览器？/1.png" alt="chrome"></p>
<h2 id="2-选择Devices—-gt-Add-custom-device…"><a href="#2-选择Devices—-gt-Add-custom-device…" class="headerlink" title="2.  选择Devices—&gt; Add custom device…"></a>2.  选择Devices—&gt; Add custom device…</h2><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2016/03/02/教程：Chrome如何设置模拟微信和QQ浏览器？/2.png" alt="chrome"></p>
<h2 id="3-填写对应的信息。"><a href="#3-填写对应的信息。" class="headerlink" title="3.  填写对应的信息。"></a>3.  填写对应的信息。</h2><p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2016/03/02/教程：Chrome如何设置模拟微信和QQ浏览器？/3.png" alt="chrome"><br><strong>PS:可以添加多个Devices，记得Save保存哦~</strong></p>
<h2 id="4-配置信息如下"><a href="#4-配置信息如下" class="headerlink" title="4. 配置信息如下"></a>4. 配置信息如下</h2><h3 id="安卓QQ内置浏览器UA"><a href="#安卓QQ内置浏览器UA" class="headerlink" title="安卓QQ内置浏览器UA:"></a>安卓QQ内置浏览器UA:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Linux; Android 5.0; SM-N9100 Build/LRX21V) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile Safari/537.36 V1_AND_SQ_5.3.1_196_YYB_D QQ/5.3.1.2335 NetType/WIFI</span><br></pre></td></tr></table></figure>
<h3 id="安卓微信内置浏览器UA"><a href="#安卓微信内置浏览器UA" class="headerlink" title="安卓微信内置浏览器UA:"></a>安卓微信内置浏览器UA:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Linux; Android 5.0; SM-N9100 Build/LRX21V) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile Safari/537.36 MicroMessenger/6.0.2.56_r958800.520 NetType/WIFI</span><br></pre></td></tr></table></figure>
<h3 id="IOS内置QQ浏览器UA"><a href="#IOS内置QQ浏览器UA" class="headerlink" title="IOS内置QQ浏览器UA:"></a>IOS内置QQ浏览器UA:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 QQ/5.2.1.302 NetType/WIFI Mem/28</span><br></pre></td></tr></table></figure>
<h3 id="IOS微信内置浏览器UA"><a href="#IOS微信内置浏览器UA" class="headerlink" title="IOS微信内置浏览器UA:"></a>IOS微信内置浏览器UA:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 MicroMessenger/6.0.1 NetType/WIFI</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员自画像</title>
    <url>/2016/02/24/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%87%AA%E7%94%BB%E5%83%8F/</url>
    <content><![CDATA[<p><img src="file:///var/folders/63/bcmzrgk502n3__nm70xf1m6r0000gn/T/cn.wiz.wiznoteformac/WizNote/7f9d15f1-0841-4c8a-9400-50022c49f8d2/index_files/111111.JPG" alt></p>
<p>为API生，为框架死，为debug奋斗一辈子，吃符号亏，上大小写的当，最后死在需求上。</p>
<p><img src="file:///var/folders/63/bcmzrgk502n3__nm70xf1m6r0000gn/T/cn.wiz.wiznoteformac/WizNote/7f9d15f1-0841-4c8a-9400-50022c49f8d2/index_files/zgit001.JPG" alt></p>
<h3 id="桃花庵–程序员版"><a href="#桃花庵–程序员版" class="headerlink" title="桃花庵–程序员版"></a>桃花庵–程序员版</h3><p>写字楼里写字间，写字间中程序员； 程序人员写程序，又将程序换酒钱； 酒醒只在屏前坐，酒醉还来屏下眠； 酒醉酒醒日复日，屏前屏下年复年； 但愿老死电脑间，不愿鞠躬老板前； 奔驰宝马贵者趣，公交自行程序员； 别人笑我太疯癫，我笑自己命太贱； 但见满街漂亮妹，哪个归得程序员；</p>
<h3 id="程序员"><a href="#程序员" class="headerlink" title="程序员"></a>程序员</h3><p>程序员，年二十有二，始从文，连考而不中。 遂习武，练武场上发一矢，中鼓吏，逐之出。 改学IT，自撰一函数，用之，堆栈溢出。</p>
<h3 id="我是程序猿，我还活着"><a href="#我是程序猿，我还活着" class="headerlink" title="我是程序猿，我还活着"></a>我是程序猿，我还活着</h3><p>北京，深夜，郊外墓地，三个骷髅在聊天。<br>第一个自我介绍说：“我是咨询师，我是累死的，你们呢？”<br>第二个接着说，“哎，我是销售员，我是饿死的。”<br>第三个不说话，前两个就问他：“喂，兄弟，你是怎么死的？”<br>那个骷髅哭丧着脸说：“我是程序猿，不过，我还活着……”</p>
<blockquote>
<p>我相信有一份好奇，加上一点点努力，我们一定能从“一无所知”走向“知道一点点”，然后是“知道一些”，这样慢慢地积累，说不定有一天突然发现，原来我也可以站着巨人的肩膀上，原来我真的已经站着巨人的肩膀上。到那时，我们一定已经开始新的旅程了，那将是真正具备创造性的工作，到那一天，请不要忘记，一切都是从好奇开始。</p>
</blockquote>
<hr>
<blockquote>
<p>生命太短暂，不要去做一些根本没有人想要的东西。——Ash Maurya，Running Lean</p>
</blockquote>
<hr>
<blockquote>
<p>如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子。——David Leinweber</p>
</blockquote>
<hr>
<blockquote>
<p>软件设计有两种方式：一种方式是，使软件过于简单，明显没有缺陷；另一种方式是，使软件过于复杂，没有明显的缺陷。——C.A.R. Hoare</p>
</blockquote>
<hr>
<blockquote>
<p>其实，我尝试着使Ruby更自然，而不是简单。Ruby看起来很简单，但内部是非常复杂的，就像我们的身体一样。——松本行弘，Ruby之父</p>
</blockquote>
<hr>
<blockquote>
<p>大部分情况下，构建程序的过程本质上是对规范调试的过程。——Fred Brooks，《人月神话》作者</p>
</blockquote>
<hr>
<blockquote>
<p>软件开发往往是这样：最开始的90%代码占用了开始的90%的开发时间；剩下10%代码同样需要90%的开发时间。——Tom Cargill</p>
</blockquote>
<hr>
<blockquote>
<p>当你试图解决一个你不理解的问题时，复杂化就产成了。——Andy Boothe</p>
</blockquote>
<hr>
<blockquote>
<p>用几个小时来制定计划，可以节省几周的编程时间。—— 匿名</p>
</blockquote>
<hr>
<blockquote>
<p>控制复杂性是计算机编程的本质。—— Brian Kernighan</p>
</blockquote>
<hr>
<blockquote>
<p>计算机科学领域的所有问题都可以通过其他方式间接解决。——David Wheeler</p>
</blockquote>
<hr>
<blockquote>
<p>编程是两队人马在竞争：软件工程师努力设计出最大最好的连白痴都会使用的程序；而宇宙在拼命制造最大最好的白痴。到目前为止，宇宙是胜利者。—— Rick Cook</p>
</blockquote>
<hr>
<blockquote>
<p>调试一个初次见到的代码比重写代码要困难两倍。因此，按照定义，如果你写代码非常巧妙，那么没有人足够聪明来调试它。—— Brian W. Kernighan</p>
</blockquote>
<hr>
<blockquote>
<p>我不是一个伟大的程序员，我只是一个具有良好习惯的优秀程序员。― Kent Beck</p>
</blockquote>
<hr>
<blockquote>
<p>你们中大多数人都熟悉程序员的美德，有三种：那就是懒惰、急躁和傲慢。– Larry Wall，Perl語言发明人</p>
</blockquote>
<hr>
<blockquote>
<p>任何一个傻瓜都会写能够让机器理解的代码，只有好的程序员才能写出人类可以理解的代码。——Martin Fowler</p>
</blockquote>
<hr>
<blockquote>
<p>靠代码行数来衡量开发进度，就像是凭重量来衡量飞机制造的进度。——比尔•盖茨</p>
</blockquote>
<hr>
<blockquote>
<p>这不是一个bug，这只是一个未列出来的特性。——匿名</p>
</blockquote>
<hr>
<blockquote>
<p>作为一个程序员，郁闷的事情是，面对一个代码块，却不敢去修改。更糟糕的是，这个代码块还是自己写的。—— Peyton Jones</p>
</blockquote>
<hr>
<blockquote>
<p>它在我的机器上可以很好运行！——大部分程序员</p>
</blockquote>
<hr>
<blockquote>
<p>能说算不上什么，有本事就把你的代码给我看看。——Linus Torvalds，Linux之父</p>
</blockquote>
<hr>
<blockquote>
<p>我认为对象就像是生物学里的细胞，或者网络中的一台计算机，只能够通过消息来通信——Alan Kay，Smalltalk的发明人，面向对象之父</p>
</blockquote>
<hr>
<blockquote>
<p>当你选择了一种语言，意味着你还选择了一组技术、一个社区。——Joshua Bloch</p>
</blockquote>
<hr>
<blockquote>
<p>质量、速度、廉价，选择其中两个。——匿名</p>
</blockquote>
<hr>
<blockquote>
<p>过早的优化是罪恶之源。——Donald Knuth</p>
</blockquote>
<hr>
<blockquote>
<p>没有什么代码的执行速度比空代码更快。——Merb核心原则</p>
</blockquote>
<hr>
<blockquote>
<p>如果你是房间里最聪明的人，那么你走错房间了。——匿名</p>
</blockquote>
<hr>
<blockquote>
<p>如果只需更改一个单一的代码行，你的部门需要花费多长时间？——Mary Poppendieck</p>
</blockquote>
<hr>
<blockquote>
<p>九个人不能让一个孩子在一个月内出生。——Fred Brooks，《人月神话》作者</p>
</blockquote>
<hr>
<blockquote>
<p>好代码本身就是最好的文档。当你需要添加一个注释时，你应该考虑如何修改代码才能不需要注释。——Steve McConnell，Code Complete 作者</p>
</blockquote>
<hr>
<blockquote>
<p>一个人在教会电脑之前，别说他真正理解这个东西了。——Donald Knuth<br>Back to top</p>
</blockquote>
<hr>
<blockquote>
<p>仰望星空 脚踏实地 帮助他人 成就自我</p>
</blockquote>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>React 在 GitLab 中自动化</title>
    <url>/2021/09/28/gitlab-ci/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/0.png" alt="header"><br><a id="more"></a></p>
<h1 id="React-在-GitLab-中自动化"><a href="#React-在-GitLab-中自动化" class="headerlink" title="React 在 GitLab 中自动化"></a>React 在 GitLab 中自动化</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目使用自建的  GitLab 进行托管，该项目为 React 前端项目，想用现有的条件下实现，自动化。包含<strong>构建，部署，版本升级</strong>。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>使用 GitLab CI/CD 实现自动化构建并部署到指定服务器(仅 <code>dev</code> 分支)</li>
<li>master 分支合并代码，实现自动升级版本号以及相关 release 产出跟 生成 CHANGELOG</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>使用 GitLab 的自动化也就是 CI/CD 功能，主要是有个容器(GItLab Runner)去做相关的操作，使用 node 镜像去构建，并用 ssh 的连接服务器方式去 scp 或者 rsync，同步你的代码到目标服务器。</p>
<p>版本升级跟其他相关操作，这里使用了一个 npm 的第三方包 <code>release-it</code>。</p>
<h4 id="release-it"><a href="#release-it" class="headerlink" title="release-it"></a>release-it</h4><p><a href="https://github.com/release-it/release-it" target="_blank" rel="noopener">Release It!</a> 🚀 Automate versioning and package publishing.<br> 直译过来就是”自动化版本控制和包发布“。 我们可以用这个工具来进行版本发布。包括在发布时我们需要做的以下的事，都可以用这个包进行配置。</p>
<ul>
<li>升级版本 (修改 package.json 的 version 字段)</li>
<li>打 tag 标签</li>
<li>生成 changelog 日志</li>
<li>产生 release 文件包</li>
<li>发布到 npm</li>
<li>GitHub 或 GitLab CI/CD 的使用</li>
</ul>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h4 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h4><ul>
<li>测试服务器: centos 7</li>
</ul>
<h4 id="部署-GitLab-Runner"><a href="#部署-GitLab-Runner" class="headerlink" title="部署 GitLab Runner"></a>部署 GitLab Runner</h4><h5 id="1-使用-Docker-安装-GitLab-Runner"><a href="#1-使用-Docker-安装-GitLab-Runner" class="headerlink" title="1. 使用 Docker 安装 GitLab Runner"></a>1. 使用 Docker 安装 GitLab Runner</h5><h6 id="1-1-安装-Docker-已有的可跳过"><a href="#1-1-安装-Docker-已有的可跳过" class="headerlink" title="1.1 安装 Docker,已有的可跳过"></a>1.1 安装 Docker,已有的可跳过</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 使用镜像地址安装</span><br><span class="line"><span class="meta">$</span> sudo yum install -y yum-utils</span><br><span class="line"><span class="meta">$</span> sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">$</span> sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span> 启动服务</span><br><span class="line"><span class="meta">$</span> sudo systemctl start docker</span><br><span class="line"><span class="meta">#</span> 开机自启</span><br><span class="line"><span class="meta">$</span> systemctl enable docker</span><br><span class="line"><span class="meta">#</span> 运行 hello-world 镜像</span><br><span class="line"><span class="meta">$</span> sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<h6 id="1-2-安装-GitLab-Runner-镜像"><a href="#1-2-安装-GitLab-Runner-镜像" class="headerlink" title="1.2 安装 GitLab Runner 镜像"></a>1.2 安装 GitLab Runner 镜像</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -d --name gitlab-runner --restart always \</span><br><span class="line">     -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">     -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">     gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure>
<h6 id="1-3-注册-runner"><a href="#1-3-注册-runner" class="headerlink" title="1.3 注册 runner"></a>1.3 注册 runner</h6><ul>
<li><p>需要在以下路径里面找到你的 runner 的 url 跟 token:</p>
<ul>
<li>找到需要绑定的项目</li>
<li>在项目菜单的左侧 Settings –&gt; CI/CD –&gt; Runners</li>
<li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/gitlab-runner.png" alt="gitlab-runner"></li>
<li>拷贝其中的 url 跟 token 下面要用到</li>
</ul>
</li>
<li><p>运行下面的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> docker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register</span><br></pre></td></tr></table></figure>
<ul>
<li>输入你上面拷贝的地址 eg: <a href="http://gitlab.xxx.com.cn/" target="_blank" rel="noopener">http://gitlab.xxx.com.cn/</a></li>
<li>输入 token eg: xxxxx</li>
<li>输入描述 eg: dev_runner</li>
<li>输入标签 eg: docker_node</li>
<li>选择执行者选择 docker</li>
</ul>
</li>
</ul>
<h4 id="release-it-配置"><a href="#release-it-配置" class="headerlink" title="release-it 配置"></a>release-it 配置</h4><p>在项目的根目录创建文件 <code>.release-it.json</code>。用来配置 release-it 相关。示例文件如下:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"git"</span>: &#123;</span><br><span class="line">    "commit": true, # 开启 git</span><br><span class="line">    "tagName": "v$&#123;version&#125;", # 打 tag 的名称模板</span><br><span class="line">    "commitMessage": "Release $&#123;version&#125;",  # git 提交消息模板</span><br><span class="line">    "pushArgs": ["-o ci.skip", "--follow-tags"], # Git 提交 release 相关的时候不触发 ci 构建</span><br><span class="line">    "requireUpstream": false</span><br><span class="line">  &#125;,</span><br><span class="line">  "hooks": &#123;</span><br><span class="line">    "before:init": "git fetch --prune --prune-tags origin"  # 在之前拉一下最新的 tag</span><br><span class="line">  &#125;,</span><br><span class="line">  "npm": &#123;</span><br><span class="line">    "publish": false # npm 部署关闭</span><br><span class="line">  &#125;,</span><br><span class="line">  "gitlab": &#123;</span><br><span class="line">    "release": true, # GitLab 部署开启</span><br><span class="line">    "tokenHeader": "PRIVATE-TOKEN", # 调用 API 接口 header 中的 toekn 头</span><br><span class="line">    "origin": "http://gitlab.xxx.com", # GitLab 地址</span><br><span class="line">    "assets": ["dist/*.zip"] # 上传 release 页面的文件</span><br><span class="line">  &#125;,</span><br><span class="line">  "plugins": &#123;</span><br><span class="line">    # 由于本项目使用 conventional 风格 git日志，该插件可以生成 changlog 文件</span><br><span class="line">    "@release-it/conventional-changelog": &#123;</span><br><span class="line">      "infile": "CHANGELOG.md",</span><br><span class="line">      "preset": &#123;</span><br><span class="line">        "name": "conventionalcommits",</span><br><span class="line">        "header": "# 📋 更新历史 \n\n",</span><br><span class="line">        "types": [</span><br><span class="line">          &#123; "type": "feat", "section": "✨ Features | 新功能" &#125;,</span><br><span class="line">          &#123; "type": "fix", "section": "🐛 Bug Fixes | Bug 修复" &#125;,</span><br><span class="line">          &#123; "type": "perf", "section": "⚡ Performance Improvements | 性能优化" &#125;,</span><br><span class="line">          &#123; "type": "revert", "section": "⏪ Reverts | 回退" &#125;,</span><br><span class="line">          &#123; "type": "chore", "section": "📦 Chores | 其他更新" &#125;,</span><br><span class="line">          &#123; "type": "docs", "section": "📝 Documentation | 文档" &#125;,</span><br><span class="line">          &#123; "type": "style", "section": "💄 Styles | 风格", "hidden": true &#125;,</span><br><span class="line">          &#123; "type": "refactor", "section": "♻ Code Refactoring | 代码重构" &#125;,</span><br><span class="line">          &#123; "type": "test", "section": "✅ Tests | 测试" &#125;,</span><br><span class="line">          &#123; "type": "build", "section": "👷‍ Build System | 构建" &#125;,</span><br><span class="line">          &#123; <span class="attr">"type"</span>: <span class="string">"ci"</span>, <span class="attr">"section"</span>: <span class="string">"🔧 Continuous Integration | CI 配置"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="GitLab-CI-配置"><a href="#GitLab-CI-配置" class="headerlink" title="GitLab CI 配置"></a>GitLab CI 配置</h4><h5 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h5><h6 id="2-1-ssh-秘钥串"><a href="#2-1-ssh-秘钥串" class="headerlink" title="2.1 ssh 秘钥串"></a>2.1 ssh 秘钥串</h6><p>在需要部署的服务器上，使用如下命令打印秘钥:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 打印公钥</span><br><span class="line"><span class="meta">$</span> cat ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="meta">#</span> 打印私钥</span><br><span class="line"><span class="meta">$</span> cat ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>
<p>如果提示没有该文件，则需要手动生成一份。执行以下命令，一直回车，直到结束。再重复上步骤，将公司要里的内容复制到本地备忘录中，下面要用。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 生成秘钥对</span><br><span class="line"><span class="meta">$</span> ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p>
<h6 id="2-2-GlitLab-Token"><a href="#2-2-GlitLab-Token" class="headerlink" title="2.2 GlitLab Token"></a>2.2 GlitLab Token</h6><p>这个是 release-it 在部署提交 git 的时候需要用到的权限。</p>
<ul>
<li>在 GitLab 中，右上角选择自己头像，选择 preferences。</li>
<li>Access Tokens 下，名字随意，Scopes 全选，点击 <code>Create personal access token</code><ul>
<li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/gitlab-token.png" alt="gitlab-token.png"></li>
</ul>
</li>
<li>将生成好的 token 复制出，备用<ul>
<li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/gitlab-token-2.png" alt="gitlab-token-2.png"><h6 id="2-3-将私钥放到到-GitLab-中"><a href="#2-3-将私钥放到到-GitLab-中" class="headerlink" title="2.3 将私钥放到到 GitLab 中"></a>2.3 将私钥放到到 GitLab 中</h6>为了下载代码，可将私钥放到 GItLab 中，操作方法如下：</li>
</ul>
</li>
<li>打开 GItLab 地址</li>
<li>点击右上角头像，选择 <code>Preferences</code></li>
<li>点击左侧 <code>SSH Keys</code>，将 2.1中生成的公钥填到框里，点击 <code>Add</code></li>
<li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/gitlab-ssh.png" alt="gitlab-ssh"></li>
</ul>
<h5 id="3-CI-配置"><a href="#3-CI-配置" class="headerlink" title="3. CI 配置"></a>3. CI 配置</h5><h6 id="3-1-配置-CI-变量"><a href="#3-1-配置-CI-变量" class="headerlink" title="3.1 配置 CI 变量"></a>3.1 配置 CI 变量</h6><p>在 CI 运行的时候有些变量，处于安全考虑，不会明文显示，这里可以把相关变量放到 CI 的 Variables 中，CI 运行的时候，可以直接读取。</p>
<ul>
<li>打开项目的 GitLab 地址，Settings –&gt; CI/CD –&gt; Variables<ul>
<li>添加 <code>GITLAB_TOKEN</code> 跟 <code>SSH_PRIVATE_KEY</code>两个变量。 其中 <code>GITLAB_TOKEN</code> 是 2.1 中生成的 token； <code>SSH_PRIVATE_KEY</code> 则是 2.1 中的私钥.</li>
<li><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2021/09/28/gitlab-ci/gitlab-ci-variable.png" alt="gitlab-ci-variable"><h6 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h6>在需要构建的项目根目录中创建 <code>.gitlab-ci.yml</code> 文件。文件示例如下:<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">SOURCE_PATH:</span> <span class="string">'dist/notice'</span> <span class="comment"># 替换成自己的，需要拷贝的文件夹地址</span></span><br><span class="line">  <span class="attr">REMOTE_ADDRESS:</span> <span class="string">'root@172.177.217.117:/root/webapp/'</span> <span class="comment"># 替换成自己的，拷贝目标的远程的地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apt-get</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">zip</span> <span class="string">unzip</span> <span class="string">git</span> <span class="string">openssh-client</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">eval</span> <span class="string">`ssh-agent</span> <span class="string">-s`</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"$&#123;SSH_PRIVATE_KEY&#125;"</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">'\r'</span> <span class="string">|</span> <span class="string">ssh-add</span> <span class="bullet">-</span> <span class="string">&gt;</span> <span class="string">/dev/null</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'[[ -f /.dockerenv ]] &amp;&amp; echo -e "Host *\n\tStrictHostKeyChecking no\n\n" &gt; ~/.ssh/config'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">checkout</span> <span class="string">$CI_BUILD_REF_NAME</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">remote</span> <span class="string">set-url</span> <span class="string">origin</span> <span class="string">"git@gitlab.xxx.com:$CI_PROJECT_PATH.git"</span> <span class="comment">#  替换成自己的 GitLab 地址</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"$&#123;CI_USERNAME&#125;"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"$&#123;CI_EMAIL&#125;"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">origin</span> <span class="string">$CI_BUILD_REF_NAME</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker_node</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Start building App"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">config</span> <span class="string">list</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Build successfully!"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zip</span> <span class="string">-q</span> <span class="string">-r</span> <span class="string">./dist/notice.zip</span> <span class="string">./dist/notice</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_development:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker_node</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Deploying to dev server"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">scp</span> <span class="string">-r</span> <span class="string">$SOURCE_PATH</span> <span class="string">$REMOTE_ADDRESS</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Deployed"</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">production</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">release:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">release</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker_node</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEBUG="release-it:*"</span> <span class="string">GITLAB_TOKEN="$GITLAB_TOKEN"</span> <span class="string">yarn</span> <span class="string">run</span> <span class="string">release</span> <span class="string">--ci</span> <span class="string">--verbose</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="产出"><a href="#产出" class="headerlink" title="产出"></a>产出</h4><ol>
<li>package.json 版本变化</li>
<li>Tags 打标签</li>
<li>Releases 打包后的二进制文件</li>
<li>CHANGELOG.md 生成的变化日志</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其中的每个点来说都不难，但是整合跟调试的过程中，有很多错误，刚开始只有个简单的报错，根本不知道为什么会这样，这里学会了使用 DBUG 日志，能够帮助你来定位错误，同时有的文档里面没有描写的，看源码的调用使用也能够解决 一部分问题。在 issues 中看别人提的问题，也能解决一些问题，最重要的是看官方给的文档，能够解决更多的问题。</p>
<p>总而言之，遇到问题，想办法去解决，但是需要精准的定位问题，才可以。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<p><a href="https://docs.docker.com/engine/install/centos/#install-using-the-repository" target="_blank" rel="noopener">Install Docker Engine on CentOS</a><br><a href="https://docs.gitlab.com/runner/register/#docker" target="_blank" rel="noopener">Registering runners</a><br><a href="https://docs.gitlab.com/ee/user/project/push_options.html#push-options-for-gitlab-cicd" target="_blank" rel="noopener">push 时跳过 ci 执行</a><br><a href="https://ruleoftech.com/2020/automate-versioning-and-changelog-with-release-it-on-gitlab-ci-cd" target="_blank" rel="noopener">Automate versioning and changelog with release-it on GitLab CI/CD</a><br><a href="https://docs.gitlab.com/runner/install/docker.html" target="_blank" rel="noopener">Run GitLab Runner in a container </a></p>
</blockquote>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>GitLab</tag>
        <tag>release-it</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】Node.js 最佳实践</title>
    <url>/2017/06/19/node-js-best/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/06/19/node-js-best/1.png" alt="header"><br><a id="more"></a></p>
<h1 id="译-Node-js-最佳实践"><a href="#译-Node-js-最佳实践" class="headerlink" title="[译]Node.js 最佳实践"></a>[译]Node.js 最佳实践</h1><blockquote>
<p>本文翻译自<strong><a href="https://www.codementor.io/mattgoldspink/nodejs-best-practices-du1086jja" target="_blank" rel="noopener">Node.js Best Practices</a> </strong>,以下是译文，有不对的地方，欢迎留言指正。</p>
</blockquote>
<p>Node.js最近几年已经成为最流行的平台之一。Node.js项目非常的容易上手，但是一旦你写完<code>Hello World</code>的app，知道如何最好地构建代码并且如何处理错误有时会成为一个噩梦（与大多数语言和框架一样）。<br>不幸的是，这个噩梦使得坚固的应用程序跟产生灾难有所区别。</p>
<p>虽说如此，但是让我们看一些针对Node.js最佳实践，能够帮助你跳出一些Node.js的坑。</p>
<h2 id="1-使用npm-init初始化你的所有项目"><a href="#1-使用npm-init初始化你的所有项目" class="headerlink" title="1. 使用npm init初始化你的所有项目"></a>1. 使用<code>npm init</code>初始化你的所有项目</h2><p>很多人都知道NPM是一种安装依赖包的工具，但它远不止如此。我强烈建议大家用<code>npm init</code>创建一个项目，如下所示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir my-new-project</span><br><span class="line">$ cd my-new-project</span><br><span class="line">$ npm init</span><br></pre></td></tr></table></figure>
<p>执行完后，会生成一个文件<code>package.json</code>，为你生成一些初始设置数据，帮助其他在项目上工作的人有与您相同的设置。</p>
<p>例如，我经常打开<code>package.json</code>并添加一个指定运行的Node.js的版本，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;engines&quot;: &#123;</span><br><span class="line">  &quot;node&quot;: &quot;6.2.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-创建-npmrc"><a href="#2-创建-npmrc" class="headerlink" title="2. 创建.npmrc"></a>2. 创建<code>.npmrc</code></h2><p>如果你以前用过npm，就一定对<code>--save</code>这个标记不陌生，它代表安装第三方包并更新到<code>package.json</code>中。当其他开发人员克隆项目的时候，可以确保具有正确的依赖关系。但是，不是每次安装包的时候都能记得添加这个标记。</p>
<p>另外，NPM会在每个版本前面添加符号<code>^</code>,当有人运行<code>npm install</code>，和你相比，他们会得到包的不同版本。虽然更新包是一个很好的做法，但是有的开发人员在不同版本上运行，从而得到不同的结果或API的可用性。</p>
<p>因此，最好的方式是，让每个人都使用相同的版本。为了达到这目的，我们发现’.npmrc’文件有一些有用的属性，可以确保每次<code>npm install</code>都能更新<code>package.json</code>，并且强制安装依赖性的版本一致。</p>
<p>你只需要在你的终端运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config set save=true</span><br><span class="line">$ npm config set save-exact=true</span><br></pre></td></tr></table></figure>
<p>现在当前运行 <code>npm install</code>,你的依赖将会保存并且将锁定你安装的版本。</p>
<h2 id="3-在package-json中添加脚本"><a href="#3-在package-json中添加脚本" class="headerlink" title="3. 在package.json中添加脚本"></a>3. 在<code>package.json</code>中添加脚本</h2><p>所有的程序都需要一个启动脚本。来让程序知道哪个文件先调用，哪个参数是在某些项目中特别重要。这些NPM都为你想到了。</p>
<p>简单的添加一个<code>scripts</code>在你的<code>package.json</code>中，并增加一个<code>start</code>的key。这个的意思是以一个命令启动你的程序。上代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;node myapp.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦有人运行<code>npm start</code>,NPM将会运行<code>node myapp.js</code>，并从<code>node_modules/.bin</code>找到所有的<code>$PATH</code>变量运行。这就意味着，你将不用把所有的包进行全局安装。</p>
<p>这里还有一些其他的例子值得参考:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;postinstall&quot;: &quot;bower install &amp;&amp; grunt build&quot;,</span><br><span class="line">  &quot;start&quot;: &quot;node myapp.js&quot;,</span><br><span class="line">  &quot;test&quot;: &quot;node ./node_modules/jasmine/bin/jasmine.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行<code>npm install</code>后就会运行<code>postinstall</code>。还有<code>postinstall</code>里可以填写任意，你想在NPM包安装完以后的操作。</p>
<p>当有人运行<code>npm test</code>将会触发<code>test</code>脚本，这是一个好的方法去进行测试，而不用关心你是用Jasmine,Mocha,Selenium,还是etc。</p>
<p>你也可以在这里自定义你自己的脚本。运行就用<code>npm run scriptname</code>。</p>
<h2 id="4-使用环境变量"><a href="#4-使用环境变量" class="headerlink" title="4. 使用环境变量"></a>4. 使用环境变量</h2><p>每个语言都有配置文件。不同环境使用不同的数据库，服务等。</p>
<p>Node.js推荐的方法是使用环境变量，在代码中用<code>process.env</code>来获取。例如，打印出你正在使用的环境变量,并查看<code>NODE_ENV</code>的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&quot;Running in :&quot;  + process.env.NODE_ENV);</span><br></pre></td></tr></table></figure>
<p>这是现在大多数云托管商在用的一个标准变量名称。</p>
<p>如果想查看更多的配置，请参考<br><a href="https://github.com/indexzero/nconf" target="_blank" rel="noopener">https://github.com/indexzero/nconf</a>.</p>
<p>另外一个挺受欢迎的加载环境变量的是<br><a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener">https://github.com/motdotla/dotenv</a> (谢谢@szabi)</p>
<h2 id="5-使用编程风格规范"><a href="#5-使用编程风格规范" class="headerlink" title="5. 使用编程风格规范"></a>5. 使用编程风格规范</h2><p>我们都经历过接受别人项目，查看别人的代码，然后花费一个小时格式化代码，替换tab符。 导致整个问题的一是，每个人都有自己开发风格，在加上组织或者公司没有一套标准的开发方式规范。</p>
<p>如果所有的代码都按照一种风格编写，那么将会更易理解，减少是使用tab还是空格的时间。如果编程风格是规定的（并且使用JSHint,ESlint或JSCS强制执行），这样的代码更易管理。</p>
<p>你不必自己去写规则，有的时候借鉴别人的规则能事半功倍。这里有一些好的例子：</p>
<ul>
<li>Airbnb - <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a></li>
<li>Google - <a href="https://google.github.io/styleguide/javascriptguide.xml" target="_blank" rel="noopener">https://google.github.io/styleguide/javascriptguide.xml</a></li>
<li>jQuery - <a href="https://contribute.jquery.org/style-guide/js/" target="_blank" rel="noopener">https://contribute.jquery.org/style-guide/js/</a></li>
<li>Standard JS - <a href="http://standardjs.com/" target="_blank" rel="noopener">http://standardjs.com/</a> -谢谢 @szab 提供这个</li>
</ul>
<p>选择一个，并用起来吧！</p>
<h2 id="6-拥抱-async"><a href="#6-拥抱-async" class="headerlink" title="6. 拥抱 async"></a>6. 拥抱 async</h2><p>我相信大家都听过<em> promises</em>的炒作了吧，甚至听到一些<em>async/await</em>和<code>generators</code>在ES2016中。所有技术的背后，关键思想就是让你的代码能够异步执行。</p>
<p>JavaScript中有方法同步执行的问题，它将阻碍其他代码运行，直到它们完成。但是同步执行代码更易理解。另外，异步结构如<em>promises</em>其实会处理一些东西来让你的代码免受阻塞。</p>
<p>首先，我强烈建议你使用<code>--trace-sync-io</code>标记来运行你的程序（仅在开发环境中）。当程序使用同步API时，这将打印一个讲个跟堆栈跟踪。</p>
<p>有很多关于如何使用的<em>promises</em>, <em>generators</em> 和 <em>async/await</em>的文章，我不用复制粘贴，给你地址，自己看：</p>
<ul>
<li>Promises - <a href="http://www.html5rocks.com/en/tutorials/es6/promises/" target="_blank" rel="noopener">http://www.html5rocks.com/en/tutorials/es6/promises/</a></li>
<li>Async / Await - <a href="https://www.twilio.com/blog/2015/10/asyncawait-the-hero-javascript-deserved.html" target="_blank" rel="noopener">https://www.twilio.com/blog/2015/10/asyncawait-the-hero-javascript-deserved.html</a></li>
<li>Generators - <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Iterators_and_Generators" target="_blank" rel="noopener">https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Iterators_and_Generators</a></li>
</ul>
<h2 id="7-处理-errors"><a href="#7-处理-errors" class="headerlink" title="7. 处理 errors"></a>7. 处理 errors</h2><p>生产环境中出现error，瞬间让你的app体验变差。好的异常处理对弈任何app都很重要，并且处理错误的最佳方法是使用上面的异步编程。例如，<em>promises</em>提供的<code>.catch()</code>方法，干净的处理捕捉到的所有错误。</p>
<p>加入你有一串promises,并且任何一个都可能突然挂掉，你可以用下面的方式非常简单的处理这些error：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">doSomething()</span><br><span class="line">    .then(doNextStage)</span><br><span class="line">    .then(recordTheWorkSoFar)</span><br><span class="line">    .then(updateAnyInterestedParties)</span><br><span class="line">    .then(tidyUp)</span><br><span class="line">    .catch(errorHandler);</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，哪个函数失败都不重要，任何一个发生错误都将出现在<code>errorHandler</code>中。</p>
<h2 id="8-确保你的应用程序可以自动重启"><a href="#8-确保你的应用程序可以自动重启" class="headerlink" title="8. 确保你的应用程序可以自动重启"></a>8. 确保你的应用程序可以自动重启</h2><p>ok，当你遵循上述的最佳实践来处理你的errors，但是，不幸的是仍然有一些错误出现，让你的程序挂掉😦。</p>
<p>如何让你的程序在发生错误的时候快速重启。如何让你的程序在运行的时候快速重启。如何让你的程序在机器重启的时候快速启动。</p>
<p>我建议用PM2<a href="http://pm2.keymetrics.io/" target="_blank" rel="noopener">http://pm2.keymetrics.io/</a> 来管理你的进程.其他的还有 <a href="http://nodemon.io/" target="_blank" rel="noopener">Nodemon</a>(thanks @szabi) 和 <a href="https://github.com/foreverjs/forever" target="_blank" rel="noopener">Forever</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/06/19/node-js-best/2.png" alt="1"></p>
<p>首先，全局安装这个模块:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install pm2 -g</span><br></pre></td></tr></table></figure>
<p>然后启动你的进程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pm2 start myApp.js</span><br></pre></td></tr></table></figure>
<p>其他的例如服务器崩溃重新启动，你可以看PM2使用说明：</p>
<ul>
<li><a href="http://pm2.keymetrics.io/docs/usage/startup/" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/usage/startup/</a></li>
</ul>
<h2 id="9-使用集群，提高你程序的可靠性跟性能"><a href="#9-使用集群，提高你程序的可靠性跟性能" class="headerlink" title="9. 使用集群，提高你程序的可靠性跟性能"></a>9. 使用集群，提高你程序的可靠性跟性能</h2><p>默认情况下，Node.js在单进程中运行。实际上，你想运行多个进程来进行负载。这提高了web程序的处理HTTP请求和性能的可扩展性。除此之外，如果你的一个进程崩溃了，其他的仍然能处理请求。</p>
<p>使用PM2这样的进程管理的好处就是支持集群。</p>
<ul>
<li><a href="http://pm2.keymetrics.io/docs/usage/cluster-mode/" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/usage/cluster-mode/</a></li>
</ul>
<p>要想让你的程序启动多个实例，你只需运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pm2 start myApp.js -i max</span><br></pre></td></tr></table></figure>
<p>需要注意的是，没个进程都是独立的，他们不共享内存或资源。例如，每个进程都将打开它自己与数据库的连接。Redis可以共享session状态。</p>
<h2 id="10-所有的导入依赖包写在文件最前面"><a href="#10-所有的导入依赖包写在文件最前面" class="headerlink" title="10. 所有的导入依赖包写在文件最前面"></a>10. 所有的导入依赖包写在文件最前面</h2><p>我经常看到一些程序员这么这样的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.get(&quot;/my-service&quot;, function(request, response) &#123;</span><br><span class="line">    var datastore = require(&quot;myDataStoreDep&quot;)(someConfig);</span><br><span class="line"></span><br><span class="line">    datastore.get(req.query.someKey)</span><br><span class="line">    // etc, ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面这段代码的问题是，当有人请求<code>/my-service</code>时， 代码将会从<code>myDataStoreDep</code>加载所有的文件，任何一个都有可能抛出异常。另外，当传递配置文件时，这个错误使这个进程崩溃。此外，我们不知道资源同步需要多长时间。在这段代码中，我们阻止了其他所有的请求被处理。</p>
<p>所以你应该总是预先加载所有的依赖项，然后配置它们。这样一来，您将从启动中知道是否存在问题，而不是在您的应用程序投入使用后三到四个小时！</p>
<h2 id="11-使用日志库来重现错误"><a href="#11-使用日志库来重现错误" class="headerlink" title="11. 使用日志库来重现错误"></a>11. 使用日志库来重现错误</h2><p><code>console.log</code>是非常好的记录手段，但是在生产环境被限制使用。在成千上万条日志中找出错误的原因…我相信你肯定遇到过，真尼玛痛苦。</p>
<p>一个成熟的日志库可以解救你。首先，它允许你设置日志的等级<code>debug</code>,<code>info</code>,<code>warning</code>,<code>error</code>,然后，它还允许你选择记录的方式，是记录文件还是数据库。</p>
<p>在我的程序中，我通常使用<a href="https://www.loggly.com/" target="_blank" rel="noopener">Loggly</a>, Loggly能够让我使用图形化界面快速搜索。此外，它还允许我配置阈值开关，例如，如果我的程序开始返回<code>500 SERVER ERROR</code>消息给用户超过30秒，Loggly可以给我发送一条消息让我知道发生了什么。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/06/19/node-js-best/3.png" alt="3"></p>
<h2 id="12-在web应用中使用Helmet"><a href="#12-在web应用中使用Helmet" class="headerlink" title="12.在web应用中使用Helmet"></a>12.在web应用中使用<code>Helmet</code></h2><p>如果你写web应用，你应该遵循很多常见的最佳实践来保护你的程序：</p>
<ul>
<li>XSS 保护</li>
<li>防止点击使用 <code>X-Frame-Options</code></li>
<li>所有连接使用 HTTPS</li>
<li>在header中使用<code>Context-Security-Policy</code></li>
<li>禁用X-Powered-By头，使攻击者无法将其攻击缩小到特定的软件</li>
</ul>
<p>Helmet不会记得配置所有这些headers，而是将它们全部设置为明确的默认值，并允许您调整所需的默认值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/06/19/node-js-best/4.png" alt="Helmet"></p>
<p>在Express.js应用程序上设置非常简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install helmet</span><br></pre></td></tr></table></figure>
<p>然后在你的代码中配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var helmet = require(&apos;helmet&apos;);</span><br><span class="line">app.use(helmet());</span><br></pre></td></tr></table></figure>
<h2 id="13-监控你的应用程序"><a href="#13-监控你的应用程序" class="headerlink" title="13. 监控你的应用程序"></a>13. 监控你的应用程序</h2><p>在应用程序出现问题时收到通知，对于生产应用程序至关重要。你不想检查你的Twitter feed，看到成千上万的愤怒的用户告诉你你的服务器崩溃，或者你的应用程序坏了，而且已经过去几个小时了。因此，对关键问题或异常行为进行监控和提醒是非常重要的。</p>
<p>我们已经讨论了PM2进程管理。此外，它为开发人员开发了一个<a href="https://keymetrics.io/" target="_blank" rel="noopener">KeyMetrics.io</a>的SaaS平台，用来监控程序，能够跟PM2配合使用。这是非常简单的，针对很多开发者他们有一个免费的计划。一旦你注册了KeyMetrics，你可以简单地运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pm2 interact [public_key] [private_key] [machine_name]</span><br></pre></td></tr></table></figure>
<p>它会发送内存和CPU使用情况，以及关键指标服务器的异常报告，在它们的首页可以看到。你还可以看到http请求的延迟或在出现问题时设置事件（例如下载包超时）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ruicky/ruicky.github.io/2017/06/19/node-js-best/5.png" alt="latency"></p>
<p>另外，Loggly（我们之前提到的）也提供了基于监视的关闭日志。这两种工具的组合可以为您提供一种在出现故障之前快速对问题做出反应的方法。</p>
<h2 id="14-测试你的代码"><a href="#14-测试你的代码" class="headerlink" title="14. 测试你的代码"></a>14. 测试你的代码</h2><blockquote>
<p>Yeah, yeah, yeah - I know I should be testing. TDD and all that jazz!</p>
</blockquote>
<p>测试会多次挽救你的程序，像培养一个习惯一样，开始并持续做是痛苦的。它影响你的开发进度。但是，凭借经验来说，一旦没有测试的代码产生问题，你希望能快速解决它。</p>
<p>无论您在一个项目中处于什么阶段，开始接入测试都不会太晚。我的建议开始小，开始简单。我也强烈建议为每个bug撰写测试。这样你知道：</p>
<ul>
<li>如何重现错误（确保您的测试首先失败！）</li>
<li>修复错误（确保在修复问题后测试通行证）</li>
<li>该错误将永远不会再发生（确保您在每个新的部署中运行测试）</li>
</ul>
<p>有很多的测试库，我个人推荐<a href="http://jasmine.github.io/2.0/node.html" target="_blank" rel="noopener">Jasmine</a> 因为我已经使用了很长时间，但是 <code>Mocha</code>, <code>chai</code> 或者其他的库也是很好的。如果你正在写web程序，我强烈建议你 使用<a href="https://github.com/visionmedia/supertest" target="_blank" rel="noopener">Supertest</a>黑盒子来测试你的程序。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>女士们，先生们，这就是我提名的 Node.js“TOP 14 最佳实践”。<br>如果您想提名一个额外的Node.js最佳实践，请留言。让我们在Node.js项目永存。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
</search>
